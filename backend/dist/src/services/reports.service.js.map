{"version":3,"file":"reports.service.js","sourceRoot":"","sources":["../../../src/services/reports.service.ts"],"names":[],"mappings":";;;;;;AAAA,qDAAiD;AACjD,6DAAqC;AAErC,+CAA4C;AAE5C,MAAa,cAAe,SAAQ,yBAAW;IAC3C;;;;;;OAMG;IACH,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,KAAc,EAAE,IAAa;QACvD,gBAAM,CAAC,KAAK,CAAC,wCAAwC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAExE,IAAI,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,8BAAa,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAEjE,gBAAM,CAAC,IAAI,CAAC,uCAAuC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YAEtE,OAAO,MAAM,CAAC;QAClB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,gBAAM,CAAC,KAAK,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;YACjE,MAAM,KAAK,CAAC;QAChB,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,KAAc,EAAE,IAAa;QAC5D,gBAAM,CAAC,KAAK,CAAC,6CAA6C,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAE7E,IAAI,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,8BAAa,CAAC,qBAAqB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAEtE,gBAAM,CAAC,IAAI,CAAC,6CAA6C,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YAE5E,OAAO,MAAM,CAAC;QAClB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,gBAAM,CAAC,KAAK,CAAC,gDAAgD,EAAE,KAAK,CAAC,CAAC;YACtE,MAAM,KAAK,CAAC;QAChB,CAAC;IACL,CAAC;CACJ;AA9CD,wCA8CC","sourcesContent":["import { OrdersService } from './orders.service';\r\nimport Logger from '../utils/logger';\r\n\r\nimport { BaseService } from './BaseService';\r\n\r\nexport class ReportsService extends BaseService {\r\n    /**\r\n     * Retrieves sales overview data for events\r\n     * @param month - Optional month filter (1-12)\r\n     * @param year - Optional year filter\r\n     * @returns A promise that resolves to sales overview data\r\n     * @throws Will throw an error if there's a problem retrieving or processing the data\r\n     */\r\n    static async getSalesOverview(month?: number, year?: number) {\r\n        Logger.debug('ReportsService.getSalesOverview called', { month, year });\r\n        \r\n        try {\r\n            \r\n            const result = await OrdersService.getSalesOverview(month, year);\r\n            \r\n            Logger.info('Sales overview retrieved successfully', { month, year });\r\n            \r\n            return result;\r\n        } catch (error) {\r\n            Logger.error('Error in ReportsService.getSalesOverview:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves user purchase report data\r\n     * @param month - Optional month filter (1-12)\r\n     * @param year - Optional year filter\r\n     * @returns A promise that resolves to user purchase report data\r\n     * @throws Will throw an error if there's a problem retrieving or processing the data\r\n     */\r\n    static async getUserPurchaseReport(month?: number, year?: number) {\r\n        Logger.debug('ReportsService.getUserPurchaseReport called', { month, year });\r\n        \r\n        try {\r\n            \r\n            const result = await OrdersService.getUserPurchaseReport(month, year);\r\n            \r\n            Logger.info('User purchase report retrieved successfully', { month, year });\r\n            \r\n            return result;\r\n        } catch (error) {\r\n            Logger.error('Error in ReportsService.getUserPurchaseReport:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}"]}