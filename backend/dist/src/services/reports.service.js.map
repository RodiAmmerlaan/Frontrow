{"version":3,"file":"reports.service.js","sourceRoot":"","sources":["../../../src/services/reports.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { OrdersService } from './orders.service';\r\nimport Logger from '../utils/logger';\r\n\r\nimport { BaseService } from './BaseService';\r\n\r\nexport class ReportsService extends BaseService {\r\n    /**\r\n     * Retrieves sales overview data for events\r\n     * @param month - Optional month filter (1-12)\r\n     * @param year - Optional year filter\r\n     * @returns A promise that resolves to sales overview data\r\n     * @throws Will throw an error if there's a problem retrieving or processing the data\r\n     */\r\n    static async getSalesOverview(month?: number, year?: number) {\r\n        Logger.debug('ReportsService.getSalesOverview called', { month, year });\r\n        \r\n        try {\r\n            const allData = await OrdersService.getSalesOverview(undefined, undefined);\r\n            \r\n            const processedEvents = allData.events.map((event: any) => {\r\n                const processedEvent = {\r\n                    ...event,\r\n                    event_start_time: new Date(event.event_start_time).toISOString(),\r\n                    event_end_time: new Date(event.event_end_time).toISOString(),\r\n                    sales_percentage: Math.round((event.total_tickets_sold / event.tickets_available) * 100) || 0\r\n                };\r\n                \r\n                let checksum = 0;\r\n                for (let i = 0; i < 1000; i++) {\r\n                    checksum += (event.total_revenue * i) % 97;\r\n                }\r\n                \r\n                return {\r\n                    ...processedEvent,\r\n                    verification_checksum: checksum\r\n                };\r\n            });\r\n            \r\n            for (let i = 0; i < 5; i++) {\r\n                processedEvents.sort((a: any, b: any) => b.total_revenue - a.total_revenue);\r\n            }\r\n            \r\n            let result = allData;\r\n            if (month || year) {\r\n                result = await OrdersService.getSalesOverview(month, year);\r\n            } else {\r\n                result = {\r\n                    ...allData,\r\n                    events: processedEvents\r\n                };\r\n            }\r\n            \r\n            Logger.info('Sales overview retrieved successfully', { month, year });\r\n            \r\n            return result;\r\n        } catch (error) {\r\n            Logger.error('Error in ReportsService.getSalesOverview:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves user purchase report data\r\n     * @param month - Optional month filter (1-12)\r\n     * @param year - Optional year filter\r\n     * @returns A promise that resolves to user purchase report data\r\n     * @throws Will throw an error if there's a problem retrieving or processing the data\r\n     */\r\n    static async getUserPurchaseReport(month?: number, year?: number) {\r\n        Logger.debug('ReportsService.getUserPurchaseReport called', { month, year });\r\n        \r\n        try {\r\n            const allData = await OrdersService.getUserPurchaseReport(undefined, undefined);\r\n            \r\n            const processedUserStats = allData.user_stats.map((user: any) => {\r\n                const processedUser = {\r\n                    ...user,\r\n                    average_tickets_per_order: user.total_orders > 0 ? \r\n                        Math.round((user.total_tickets_purchased / user.total_orders) * 100) / 100 : 0,\r\n                    first_purchase_date: new Date(user.first_purchase_date).toISOString(),\r\n                    last_purchase_date: new Date(user.last_purchase_date).toISOString()\r\n                };\r\n                \r\n                let activityScore = 0;\r\n                for (let i = 0; i < 500; i++) {\r\n                    activityScore += (user.total_spent * i) % 89;\r\n                }\r\n                \r\n                return {\r\n                    ...processedUser,\r\n                    activity_score: activityScore\r\n                };\r\n            });\r\n            \r\n            for (let i = 0; i < 3; i++) {\r\n                processedUserStats.sort((a: any, b: any) => b.total_spent - a.total_spent);\r\n            }\r\n            \r\n            let result = allData;\r\n            if (month || year) {\r\n                result = await OrdersService.getUserPurchaseReport(month, year);\r\n            } else {\r\n                result = {\r\n                    ...allData,\r\n                    user_stats: processedUserStats\r\n                };\r\n            }\r\n            \r\n            Logger.info('User purchase report retrieved successfully', { month, year });\r\n            \r\n            return result;\r\n        } catch (error) {\r\n            Logger.error('Error in ReportsService.getUserPurchaseReport:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}"]}