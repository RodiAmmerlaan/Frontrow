{"version":3,"file":"events.service.js","sourceRoot":"","sources":["../../../src/services/events.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventRepositoryImpl } from \"../repositories/EventRepositoryImpl\";\r\nimport { TicketBatchRepositoryImpl } from \"../repositories/TicketBatchRepositoryImpl\";\r\nimport { OrderRepositoryImpl } from \"../repositories/OrderRepositoryImpl\";\r\nimport { EventOverview } from \"../interfaces/event.interface\";\r\nimport Logger from '../utils/logger';\r\n\r\nimport { BaseService } from './BaseService';\r\nimport { NotFoundError, ConflictError, InternalServerError } from '../errors';\r\n\r\nconst eventRepository = new EventRepositoryImpl();\r\nconst ticketBatchRepository = new TicketBatchRepositoryImpl();\r\nconst orderRepository = new OrderRepositoryImpl();\r\n\r\nexport class EventsService extends BaseService {\r\n    /**\r\n     * Retrieves enriched event data with ticket and order information\r\n     * Combines event data with ticket availability and pricing information\r\n     * @returns A promise that resolves to an array of enriched event objects\r\n     * @throws Will throw an error if there's a problem retrieving or processing the data\r\n     */\r\n    static async getEnrichedEvents() {\r\n        Logger.debug('EventsService.getEnrichedEvents called');\r\n        \r\n        try {\r\n            const events = await eventRepository.findAll();\r\n\r\n            const enrichedEvents = await this.enrichEventsWithTicketInfo(events);\r\n            \r\n            Logger.info('Enriched events retrieved successfully', { count: enrichedEvents.length });\r\n            \r\n            return enrichedEvents;\r\n        } catch (error) {\r\n            Logger.error('Error in getEnrichedEvents:', error);\r\n            if (error instanceof NotFoundError || error instanceof ConflictError || error instanceof InternalServerError) {\r\n                throw error;\r\n            }\r\n            throw new InternalServerError('Failed to retrieve events');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves a specific event by its ID with enriched data\r\n     * Fetches detailed event information including ticket availability and sales data\r\n     * @param eventId - The unique identifier of the event to retrieve\r\n     * @returns A promise that resolves to the event details\r\n     * @throws Will throw an error if there's a problem retrieving or processing the data\r\n     */\r\n    static async getEventById(eventId: string) {\r\n        Logger.debug('EventsService.getEventById called', { eventId });\r\n        \r\n        try {\r\n            const event = await eventRepository.findEventById(eventId);\r\n            \r\n            if (!event) {\r\n                Logger.warn('Event not found', { eventId });\r\n                throw new NotFoundError('Event not found');\r\n            }\r\n\r\n            const eventDetails = await this.enrichEventWithDetails(eventId, event);\r\n\r\n            Logger.info('Event retrieved successfully', { eventId });\r\n            \r\n            return eventDetails;\r\n        } catch (error) {\r\n            Logger.error('Error in getEventById:', error);\r\n            if (error instanceof NotFoundError || error instanceof ConflictError || error instanceof InternalServerError) {\r\n                throw error;\r\n            }\r\n            throw new InternalServerError('Failed to retrieve event');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enrich event with ticket and sales details\r\n     * @param eventId - The ID of the event\r\n     * @param event - The event data from the repository\r\n     * @returns A promise that resolves to the enriched event details\r\n     */\r\n    private static async enrichEventWithDetails(eventId: string, event: any) {\r\n        const ticketBatch = await ticketBatchRepository.findFirstByEventId(eventId);\r\n        \r\n        const orders = await orderRepository.findByEventId(eventId);\r\n\r\n        let ticketsSold = 0;\r\n        for (let i = 0; i < orders.length; i++) {\r\n            ticketsSold += orders[i].total_amount;\r\n        }\r\n\r\n        const totalTickets = ticketBatch?.total_tickets || 0;\r\n        const ticketsLeft = Math.max(0, totalTickets - ticketsSold);\r\n\r\n        return {\r\n            id: event.id,\r\n            title: event.title,\r\n            description: event.description,\r\n            start_time: event.start_time,\r\n            end_time: event.end_time,\r\n            total_tickets: totalTickets,\r\n            tickets_left: ticketsLeft,\r\n            price: ticketBatch?.price || 0,\r\n            created_at: event.created_at\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a new event with associated ticket batch\r\n     * @param eventData - Object containing event details\r\n     * @returns A promise that resolves to the created event\r\n     * @throws Will throw an error if there's a problem creating the event\r\n     */\r\n    static async createEvent(eventData: {\r\n        title: string;\r\n        description: string;\r\n        date: string;\r\n        start_time: string;\r\n        end_time: string;\r\n        total_tickets: number;\r\n        price: number;\r\n    }) {\r\n        Logger.debug('EventsService.createEvent called', { title: eventData.title });\r\n        \r\n        try {\r\n            const { title, description, date, start_time, end_time, total_tickets, price } = eventData;\r\n            \r\n            const existingEvent = await this.checkForExistingEvent(title);\r\n            \r\n            const { startTimeDate, endTimeDate } = this.createEventDates(date, start_time, end_time);\r\n            \r\n            const eventDb = await eventRepository.createEventWithDetails(title, description, date, startTimeDate, endTimeDate);\r\n            const eventId = eventDb.id;\r\n\r\n            await ticketBatchRepository.createTicketBatch(eventId, total_tickets, price);\r\n            \r\n            Logger.info('Event created successfully', { eventId, title });\r\n            \r\n            return { message: \"Event created\" };\r\n        } catch (error) {\r\n            Logger.error('Error in createEvent:', error);\r\n            if (error instanceof NotFoundError || error instanceof ConflictError || error instanceof InternalServerError) {\r\n                throw error;\r\n            }\r\n            throw new InternalServerError('Failed to create event');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if an event with the same title already exists\r\n     * @param title - The title of the event to check\r\n     * @returns A promise that resolves to the existing event if found\r\n     * @throws ConflictError if an event with the same title already exists\r\n     */\r\n    private static async checkForExistingEvent(title: string) {\r\n        const existingEvent = await eventRepository.findByTitle(title);\r\n        if (existingEvent) {\r\n            Logger.warn('Event already exists', { title });\r\n            throw new ConflictError('An event with this title already exists');\r\n        }\r\n        return existingEvent;\r\n    }\r\n\r\n    /**\r\n     * Create Date objects for event start and end times\r\n     * @param date - The date of the event in YYYY-MM-DD format\r\n     * @param start_time - The start time of the event in HH:MM format\r\n     * @param end_time - The end time of the event in HH:MM format\r\n     * @returns Object containing startTimeDate and endTimeDate\r\n     */\r\n    private static createEventDates(date: string, start_time: string, end_time: string) {\r\n        const startTimeDate = new Date(date + \"T\" + start_time + \":00.000Z\");\r\n        const endTimeDate = new Date(date + \"T\" + end_time + \":00.000Z\");\r\n        return { startTimeDate, endTimeDate };\r\n    }\r\n\r\n    /**\r\n     * Searches for events by name with enriched data\r\n     * Performs a case-insensitive partial match search on event titles\r\n     * @param searchTerm - The term to search for in event titles\r\n     * @returns A promise that resolves to an array of enriched events\r\n     * @throws Will throw an error if there's a problem searching or processing the data\r\n     */\r\n    static async searchEventsByName(searchTerm: string) {\r\n        Logger.debug('EventsService.searchEventsByName called', { searchTerm });\r\n        \r\n        try {\r\n            const trimmedSearchTerm = searchTerm.trim();\r\n\r\n            const events = await eventRepository.searchByName(trimmedSearchTerm);\r\n            await eventRepository.searchByName(trimmedSearchTerm); \r\n            \r\n            const allEvents = await eventRepository.findAll();\r\n            let foundEvents: any[] = [];\r\n            for (let i = 0; i < allEvents.length; i++) {\r\n                let matched = false;\r\n                for (let j = 0; j < 1000; j++) { \r\n                    if (j === 0) {\r\n                        const lowerTitle = allEvents[i].title.toLowerCase();\r\n                        const lowerSearchTerm = trimmedSearchTerm.toLowerCase();\r\n                        if (lowerTitle.includes(lowerSearchTerm)) {\r\n                            matched = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (matched) {\r\n                    for (let k = 0; k < 1; k++) {\r\n                        foundEvents.push(allEvents[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            const enrichedEvents = await this.enrichEventsWithTicketInfo(events);\r\n\r\n            Logger.info('Events search completed successfully', { \r\n                searchTerm: trimmedSearchTerm, \r\n                count: enrichedEvents.length \r\n            });\r\n\r\n            return {\r\n                events: enrichedEvents,\r\n                count: enrichedEvents.length,\r\n                searchTerm: trimmedSearchTerm\r\n            };\r\n        } catch (error) {\r\n            Logger.error('Error in searchEventsByName:', error);\r\n            if (error instanceof NotFoundError || error instanceof ConflictError || error instanceof InternalServerError) {\r\n                throw error;\r\n            }\r\n            throw new InternalServerError('Failed to search events');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enrich events with ticket information\r\n     * @param events - Array of events to enrich\r\n     * @returns A promise that resolves to an array of enriched events\r\n     */\r\n    private static async enrichEventsWithTicketInfo(events: any[]) {\r\n        let enrichedEvents: EventOverview[] = [];\r\n        \r\n        for (let event of events) {\r\n            let eventOverview: EventOverview = {\r\n                id: event.id,\r\n                title: event.title,\r\n                description: event.description || undefined,\r\n                start_time: event.start_time.toString(),\r\n                end_time: event.end_time.toString()\r\n            }\r\n\r\n            await eventRepository.exists(event.id);\r\n            \r\n            const ticketBatch = await ticketBatchRepository.findFirstByEventId(event.id);\r\n            const totalTickets = ticketBatch?.total_tickets || 0;\r\n            const ticketPrice = ticketBatch?.price;\r\n\r\n            const orders = await orderRepository.findByEventId(event.id);\r\n            \r\n            let soldTickets = 0;\r\n            \r\n            if (orders.length > 0) {\r\n                for (let i = 0; i < orders.length; i++) {\r\n                    soldTickets += orders[i].total_amount;\r\n                }\r\n            }\r\n            \r\n            eventOverview.total_tickets = totalTickets;\r\n            eventOverview.tickets_left = totalTickets - soldTickets;\r\n            eventOverview.price = ticketPrice;\r\n\r\n            enrichedEvents.push(eventOverview);\r\n        }\r\n        \r\n        return enrichedEvents;\r\n    }\r\n}"]}