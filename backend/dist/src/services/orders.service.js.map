{"version":3,"file":"orders.service.js","sourceRoot":"","sources":["../../../src/services/orders.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { OrderRepositoryImpl } from \"../repositories/OrderRepositoryImpl\";\r\nimport { TicketRepositoryImpl } from \"../repositories/TicketRepositoryImpl\";\r\nimport { UserRepositoryImpl } from \"../repositories/UserRepositoryImpl\";\r\nimport { EventRepositoryImpl } from \"../repositories/EventRepositoryImpl\";\r\nimport { TicketBatchRepositoryImpl } from \"../repositories/TicketBatchRepositoryImpl\";\r\nimport Logger from '../utils/logger';\r\n\r\nimport { BaseService } from './BaseService';\r\nimport { NotFoundError, BadRequestError } from '../errors';\r\n\r\nconst orderRepository = new OrderRepositoryImpl();\r\nconst ticketRepository = new TicketRepositoryImpl();\r\nconst userRepository = new UserRepositoryImpl();\r\nconst eventRepository = new EventRepositoryImpl();\r\nconst ticketBatchRepository = new TicketBatchRepositoryImpl();\r\n\r\nexport class OrdersService extends BaseService {\r\n    /**\r\n     * Process a ticket purchase for an event\r\n     * Validates inputs, creates an order, and generates tickets\r\n     * @param event_id - The ID of the event for which tickets are being purchased\r\n     * @param user_id - The ID of the user purchasing the tickets\r\n     * @param total_amount - The total number of tickets being purchased\r\n     * @returns A promise that resolves to the created tickets\r\n     * @throws Will throw an error if there's a problem processing the purchase\r\n     */\r\n    static async processTicketPurchase(\r\n        event_id: string, \r\n        user_id: string, \r\n        total_amount: number\r\n    ) {\r\n        Logger.debug('OrdersService.processTicketPurchase called', { event_id, user_id, total_amount });\r\n        \r\n        try {\r\n            const event = await this.verifyEventExists(event_id);\r\n            const eventDetails = await eventRepository.findById(event_id);\r\n            \r\n            const user = await this.verifyUserExists(user_id);\r\n            const userDetails = await userRepository.findById(user_id);\r\n            \r\n            const { ticketBatch, ticketsLeft } = await this.checkTicketAvailability(event_id, total_amount);\r\n            const ticketBatchDetails = await ticketBatchRepository.findFirstByEventId(event_id);\r\n            \r\n            await this.checkTicketAvailability(event_id, total_amount);\r\n            \r\n            const order = await orderRepository.buyTickets(event_id, user_id, total_amount);\r\n            const createdOrder = await orderRepository.findById(order.id);\r\n            \r\n            const tickets = await ticketRepository.createTickets(order.id, user_id, total_amount);\r\n            \r\n            const createdTickets = await ticketRepository.findByOrderId(order.id);\r\n\r\n            Logger.info('Ticket purchase processed successfully', { \r\n                order_id: order.id, \r\n                event_id, \r\n                user_id, \r\n                total_amount \r\n            });\r\n\r\n            return tickets;\r\n        } catch (error) {\r\n            Logger.error('Error in processTicketPurchase:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verify that an event exists\r\n     * @param event_id - The ID of the event to verify\r\n     * @returns A promise that resolves to the event if it exists\r\n     * @throws NotFoundError if the event doesn't exist\r\n     */\r\n    private static async verifyEventExists(event_id: string) {\r\n        const event = await eventRepository.findById(event_id);\r\n        if (!event) {\r\n            Logger.warn('Event not found for ticket purchase', { event_id });\r\n            throw new NotFoundError(\"Event not found\");\r\n        }\r\n        return event;\r\n    }\r\n\r\n    /**\r\n     * Verify that a user exists\r\n     * @param user_id - The ID of the user to verify\r\n     * @returns A promise that resolves to the user if they exist\r\n     * @throws NotFoundError if the user doesn't exist\r\n     */\r\n    private static async verifyUserExists(user_id: string) {\r\n        const user = await userRepository.findById(user_id);\r\n        if (!user) {\r\n            Logger.warn('User not found for ticket purchase', { user_id });\r\n            throw new NotFoundError(\"User not found\");\r\n        }\r\n        return user;\r\n    }\r\n\r\n    /**\r\n     * Check if enough tickets are available for purchase\r\n     * @param event_id - The ID of the event\r\n     * @param requested_amount - The number of tickets requested\r\n     * @returns A promise that resolves to ticket batch and tickets left information\r\n     * @throws NotFoundError if no ticket batch is found\r\n     * @throws BadRequestError if not enough tickets are available\r\n     */\r\n    private static async checkTicketAvailability(event_id: string, requested_amount: number) {\r\n        const ticketBatch = await ticketBatchRepository.findFirstByEventId(event_id);\r\n        if (!ticketBatch) {\r\n            Logger.warn('No ticket batch found for event', { event_id });\r\n            throw new NotFoundError(\"Ticket batch not found for this event\");\r\n        }\r\n\r\n        const orders = await orderRepository.findByEventId(event_id);\r\n        let soldTickets = 0;\r\n        \r\n        if (orders.length > 0) {\r\n            soldTickets = orders.reduce((sum: number, order: any) => sum + order.total_amount, 0);\r\n        }\r\n        \r\n        const ticketsLeft = ticketBatch.total_tickets - soldTickets;\r\n        if (ticketsLeft < requested_amount) {\r\n            Logger.warn('Not enough tickets available', { event_id, ticketsLeft, requested: requested_amount });\r\n            throw new BadRequestError(`Insufficient tickets available. Only ${ticketsLeft} tickets remaining.`);\r\n        }\r\n        \r\n        return { ticketBatch, ticketsLeft };\r\n    }\r\n\r\n    /**\r\n     * Retrieves sales overview data for events\r\n     * Calculates sales metrics for events, with optional filtering by month and year\r\n     * @param month - Optional month filter (1-12)\r\n     * @param year - Optional year filter\r\n     * @returns A promise that resolves to sales overview data\r\n     * @throws Will throw an error if there's a problem retrieving or processing the data\r\n     */\r\n    static async getSalesOverview(month?: number, year?: number) {\r\n        Logger.debug('OrdersService.getSalesOverview called', { month, year });\r\n        \r\n        try {\r\n            const detailedOrdersData = await orderRepository.getEventSalesDetails(month, year);\r\n            \r\n            const eventDataMap = this.processEventSalesData(detailedOrdersData);\r\n            const eventsOverview = await this.generateEventsOverview(eventDataMap);\r\n            const totals = this.calculateSalesTotals(eventsOverview);\r\n            const periodDescription = this.generatePeriodDescription(month, year);\r\n            \r\n            const responseData: any = {\r\n                period: {\r\n                    month,\r\n                    year,\r\n                    description: periodDescription\r\n                },\r\n                total_events: eventsOverview.length,\r\n                total_orders: totals.totalOrders,\r\n                total_tickets_sold: totals.totalTicketsSold,\r\n                total_revenue: totals.totalRevenue,\r\n                average_revenue_per_event: eventsOverview.length > 0 ? \r\n                    Math.round(totals.totalRevenue / eventsOverview.length) : 0,\r\n                events: eventsOverview.sort((a, b) => b.total_revenue - a.total_revenue)\r\n            };\r\n            \r\n            Logger.info('Sales overview retrieved successfully', { \r\n                total_events: eventsOverview.length,\r\n                totalOrders: totals.totalOrders,\r\n                totalTicketsSold: totals.totalTicketsSold,\r\n                totalRevenue: totals.totalRevenue\r\n            });\r\n            \r\n            return responseData;\r\n        } catch (error) {\r\n            Logger.error('Error in getSalesOverview:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Process event sales data into a map grouped by event ID\r\n     * @param detailedOrdersData - Raw order data from repository\r\n     * @returns Map of event data grouped by event ID\r\n     */\r\n    private static processEventSalesData(detailedOrdersData: any[]) {\r\n        const eventDataMap = new Map();\r\n        \r\n        for (const order of detailedOrdersData) {\r\n            if (!order.event_id || !order.Events) continue;\r\n            \r\n            const eventId = order.event_id;\r\n            \r\n            if (!eventDataMap.has(eventId)) {\r\n                eventDataMap.set(eventId, {\r\n                    event: order.Events,\r\n                    orders: [],\r\n                    totalTickets: 0,\r\n                    totalRevenue: 0\r\n                });\r\n            }\r\n            \r\n            const eventData = eventDataMap.get(eventId);\r\n            eventData.orders.push(order);\r\n            eventData.totalTickets += order.total_amount;\r\n            eventData.totalRevenue += order.total_amount;\r\n        }\r\n        \r\n        return eventDataMap;\r\n    }\r\n\r\n    /**\r\n     * Generate events overview from processed event data\r\n     * @param eventDataMap - Map of event data grouped by event ID\r\n     * @returns Array of event overview objects\r\n     */\r\n    private static async generateEventsOverview(eventDataMap: Map<any, any>) {\r\n        const eventsOverview: any[] = [];\r\n        \r\n        for (const [eventId, eventData] of eventDataMap) {\r\n            const ticketBatch = await ticketBatchRepository.findFirstByEventId(eventId);\r\n            const ticketPrice = ticketBatch?.price || 0;\r\n            const ticketsAvailable = ticketBatch?.total_tickets || 0;\r\n            \r\n            const eventRevenue = eventData.totalTickets * ticketPrice;\r\n            \r\n            const eventOverview: any = {\r\n                event_id: eventId,\r\n                event_title: eventData.event.title,\r\n                event_description: eventData.event.description,\r\n                event_start_time: eventData.event.start_time.toISOString(),\r\n                event_end_time: eventData.event.end_time.toISOString(),\r\n                total_orders: eventData.orders.length,\r\n                total_tickets_sold: eventData.totalTickets,\r\n                total_revenue: eventRevenue,\r\n                ticket_price: ticketPrice,\r\n                tickets_available: ticketsAvailable,\r\n                sales_percentage: ticketsAvailable > 0 ? \r\n                    Math.round((eventData.totalTickets / ticketsAvailable) * 100) : 0\r\n            };\r\n            \r\n            eventsOverview.push(eventOverview);\r\n        }\r\n        \r\n        return eventsOverview;\r\n    }\r\n\r\n    /**\r\n     * Calculate sales totals from events overview\r\n     * @param eventsOverview - Array of event overview objects\r\n     * @returns Object containing total orders, tickets sold, and revenue\r\n     */\r\n    private static calculateSalesTotals(eventsOverview: any[]) {\r\n        let totalOrders = 0;\r\n        let totalTicketsSold = 0;\r\n        let totalRevenue = 0;\r\n        \r\n        for (const event of eventsOverview) {\r\n            totalOrders += event.total_orders;\r\n            totalTicketsSold += event.total_tickets_sold;\r\n            totalRevenue += event.total_revenue;\r\n        }\r\n        \r\n        return { totalOrders, totalTicketsSold, totalRevenue };\r\n    }\r\n\r\n    /**\r\n     * Generate period description based on month and year filters\r\n     * @param month - Optional month filter\r\n     * @param year - Optional year filter\r\n     * @returns Formatted period description string\r\n     */\r\n    private static generatePeriodDescription(month?: number, year?: number) {\r\n        let periodDescription = \"All time\";\r\n        if (month && year) {\r\n            const monthNames = [\r\n                \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n            ];\r\n            periodDescription = `${monthNames[month - 1]} ${year}`;\r\n        } else if (year) {\r\n            periodDescription = `Year ${year}`;\r\n        }\r\n        return periodDescription;\r\n    }\r\n\r\n    /**\r\n     * Retrieves user purchase report data\r\n     * Calculates user purchasing behavior metrics, with optional filtering by month and year\r\n     * @param month - Optional month filter (1-12)\r\n     * @param year - Optional year filter\r\n     * @returns A promise that resolves to user purchase report data\r\n     * @throws Will throw an error if there's a problem retrieving or processing the data\r\n     */\r\n    static async getUserPurchaseReport(month?: number, year?: number) {\r\n        Logger.debug('OrdersService.getUserPurchaseReport called', { month, year });\r\n        \r\n        try {\r\n            const purchaseData = await orderRepository.getUserPurchaseDetails(month, year);\r\n            \r\n            const userDataMap = this.processUserPurchaseData(purchaseData);\r\n            const { totalOrders, totalTickets, totalRevenue } = this.calculatePurchaseTotals(userDataMap);\r\n            const userStats = this.generateUserStats(userDataMap);\r\n            const frequentBuyers = this.getFrequentBuyers(userStats);\r\n            \r\n            userStats.sort((a, b) => b.total_spent - a.total_spent);\r\n            \r\n            const totalUsers = userStats.length;\r\n            const averageTicketsPerOrder = totalOrders > 0 ? \r\n                Math.round((totalTickets / totalOrders) * 100) / 100 : 0;\r\n            const averageOrdersPerUser = totalUsers > 0 ? \r\n                Math.round((totalOrders / totalUsers) * 100) / 100 : 0;\r\n            const averageSpendingPerUser = totalUsers > 0 ? \r\n                Math.round((totalRevenue / totalUsers) * 100) / 100 : 0;\r\n            \r\n            const periodDescription = this.generatePeriodDescription(month, year);\r\n            \r\n            const responseData: any = {\r\n                period: {\r\n                    month,\r\n                    year,\r\n                    description: periodDescription\r\n                },\r\n                summary: {\r\n                    total_users: totalUsers,\r\n                    total_orders: totalOrders,\r\n                    total_tickets_sold: totalTickets,\r\n                    total_revenue: totalRevenue,\r\n                    average_tickets_per_order: averageTicketsPerOrder,\r\n                    average_orders_per_user: averageOrdersPerUser,\r\n                    average_spending_per_user: averageSpendingPerUser\r\n                },\r\n                user_stats: userStats,\r\n                frequent_buyers: frequentBuyers\r\n            };\r\n            \r\n            Logger.info('User purchase report retrieved successfully', { \r\n                totalUsers,\r\n                totalOrders,\r\n                totalTickets,\r\n                totalRevenue\r\n            });\r\n            \r\n            return responseData;\r\n        } catch (error) {\r\n            Logger.error('Error in getUserPurchaseReport:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Process user purchase data into a map grouped by user ID\r\n     * @param purchaseData - Raw purchase data from repository\r\n     * @returns Map of user data grouped by user ID\r\n     */\r\n    private static processUserPurchaseData(purchaseData: any[]) {\r\n        const userDataMap = new Map<string, any>();\r\n        let totalOrders = 0;\r\n        let totalTickets = 0;\r\n        let totalRevenue = 0;\r\n        \r\n        for (const order of purchaseData) {\r\n            if (!order.user_id || !order.Events || !order.Users) continue;\r\n            \r\n            const userId = order.user_id;\r\n            const ticketPrice = order.Events.TicketBatches?.[0]?.price || 0;\r\n            const orderRevenue = order.total_amount * ticketPrice;\r\n            \r\n            totalOrders++;\r\n            totalTickets += order.total_amount;\r\n            totalRevenue += orderRevenue;\r\n            \r\n            if (!userDataMap.has(userId)) {\r\n                userDataMap.set(userId, {\r\n                    user_id: userId,\r\n                    user_email: order.Users.email,\r\n                    user_name: `${order.Users.first_name || ''} ${order.Users.last_name || ''}`.trim() || 'Unknown User',\r\n                    orders: [],\r\n                    total_orders: 0,\r\n                    total_tickets_purchased: 0,\r\n                    total_spent: 0,\r\n                    events_attended: new Set(),\r\n                    purchase_dates: []\r\n                });\r\n            }\r\n            \r\n            const userData = userDataMap.get(userId);\r\n            userData.orders.push(order);\r\n            userData.total_orders++;\r\n            userData.total_tickets_purchased += order.total_amount;\r\n            userData.total_spent += orderRevenue;\r\n            userData.events_attended.add(order.event_id);\r\n            userData.purchase_dates.push(order.created_at);\r\n        }\r\n        \r\n        return userDataMap;\r\n    }\r\n\r\n    /**\r\n     * Calculate purchase totals from user data map\r\n     * @param userDataMap - Map of user data grouped by user ID\r\n     * @returns Object containing total orders, tickets, and revenue\r\n     */\r\n    private static calculatePurchaseTotals(userDataMap: Map<string, any>) {\r\n        let totalOrders = 0;\r\n        let totalTickets = 0;\r\n        let totalRevenue = 0;\r\n        \r\n        for (const userData of userDataMap.values()) {\r\n            totalOrders += userData.total_orders;\r\n            totalTickets += userData.total_tickets_purchased;\r\n            totalRevenue += userData.total_spent;\r\n        }\r\n        \r\n        return { totalOrders, totalTickets, totalRevenue };\r\n    }\r\n\r\n    /**\r\n     * Generate user statistics from processed user data\r\n     * @param userDataMap - Map of user data grouped by user ID\r\n     * @returns Array of user statistics objects\r\n     */\r\n    private static generateUserStats(userDataMap: Map<string, any>) {\r\n        const userStats: any[] = [];\r\n        \r\n        for (const [userId, userData] of userDataMap) {\r\n            const sortedDates = userData.purchase_dates.sort((a: Date, b: Date) => a.getTime() - b.getTime());\r\n            \r\n            userStats.push({\r\n                user_id: userId,\r\n                user_email: userData.user_email,\r\n                user_name: userData.user_name,\r\n                total_orders: userData.total_orders,\r\n                total_tickets_purchased: userData.total_tickets_purchased,\r\n                total_spent: userData.total_spent,\r\n                average_tickets_per_order: userData.total_orders > 0 ? \r\n                    Math.round((userData.total_tickets_purchased / userData.total_orders) * 100) / 100 : 0,\r\n                events_attended: userData.events_attended.size,\r\n                first_purchase_date: sortedDates[0]?.toISOString() || '',\r\n                last_purchase_date: sortedDates[sortedDates.length - 1]?.toISOString() || ''\r\n            });\r\n        }\r\n        \r\n        return userStats;\r\n    }\r\n\r\n    /**\r\n     * Get top 10 frequent buyers from user statistics\r\n     * @param userStats - Array of user statistics objects\r\n     * @returns Array of top 10 frequent buyers\r\n     */\r\n    private static getFrequentBuyers(userStats: any[]) {\r\n        const sortedBySpent = [...userStats].sort((a, b) => b.total_spent - a.total_spent);\r\n        return sortedBySpent.slice(0, 10).map((user, index) => ({\r\n            user_id: user.user_id,\r\n            user_email: user.user_email,\r\n            user_name: user.user_name,\r\n            total_orders: user.total_orders,\r\n            total_tickets_purchased: user.total_tickets_purchased,\r\n            total_spent: user.total_spent,\r\n            rank: index + 1\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Retrieves order details by ID\r\n     * @param orderId - The ID of the order to retrieve\r\n     * @returns A promise that resolves to the order details\r\n     * @throws Will throw an error if the order is not found\r\n     */\r\n    static async getOrderById(orderId: string) {\r\n        Logger.debug('OrdersService.getOrderById called', { orderId });\r\n        \r\n        try {\r\n            \r\n            const order = await orderRepository.findById(orderId);\r\n            \r\n            if (!order) {\r\n                Logger.warn('Order not found', { orderId });\r\n                throw new NotFoundError('Order not found');\r\n            }\r\n            \r\n            const tickets = await ticketRepository.findByOrderId(orderId);\r\n            \r\n            Logger.info('Order retrieved successfully', { orderId });\r\n            \r\n            return {\r\n                ...order,\r\n                tickets\r\n            };\r\n        } catch (error) {\r\n            Logger.error('Error in getOrderById:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves all orders for a specific user\r\n     * @param userId - The ID of the user\r\n     * @returns A promise that resolves to an array of user orders\r\n     * @throws Will throw an error if there's a problem retrieving the orders\r\n     */\r\n    static async getUserOrders(userId: string) {\r\n        Logger.debug('OrdersService.getUserOrders called', { userId });\r\n        \r\n        try {\r\n            const orders = await orderRepository.findByUserId(userId);\r\n            \r\n            const enrichedOrders = await this.enrichOrdersWithTickets(orders);\r\n            \r\n            Logger.info('User orders retrieved successfully', { userId, order_count: orders.length });\r\n            \r\n            return enrichedOrders;\r\n        } catch (error) {\r\n            Logger.error('Error in getUserOrders:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enrich orders with ticket information\r\n     * @param orders - Array of orders to enrich\r\n     * @returns A promise that resolves to an array of enriched orders\r\n     */\r\n    private static async enrichOrdersWithTickets(orders: any[]) {\r\n        const enrichedOrders = [];\r\n        for (const order of orders) {\r\n            const tickets = await ticketRepository.findByOrderId(order.id);\r\n            enrichedOrders.push({\r\n                ...order,\r\n                tickets\r\n            });\r\n        }\r\n        return enrichedOrders;\r\n    }\r\n\r\n    /**\r\n     * Cancels an order\r\n     * @param orderId - The ID of the order to cancel\r\n     * @returns A promise that resolves to the cancellation result\r\n     * @throws Will throw an error if the order is not found or cannot be cancelled\r\n     */\r\n    static async cancelOrder(orderId: string) {\r\n        Logger.debug('OrdersService.cancelOrder called', { orderId });\r\n        \r\n        try {\r\n            \r\n            const order = await orderRepository.findById(orderId);\r\n            \r\n            if (!order) {\r\n                Logger.warn('Order not found for cancellation', { orderId });\r\n                throw new NotFoundError('Order not found');\r\n            }\r\n            \r\n            Logger.info('Order cancellation requested', { orderId });\r\n            \r\n            return { \r\n                message: 'Order cancellation requested',\r\n                orderId \r\n            };\r\n        } catch (error) {\r\n            Logger.error('Error in cancelOrder:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}"]}