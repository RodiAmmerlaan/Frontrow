{"version":3,"file":"token.util.js","sourceRoot":"","sources":["../../../src/utils/token.util.ts"],"names":[],"mappings":";;AAQA,sDAkBC;AAzBD,6DAA8D;AAE9D;;;;GAIG;AACH,SAAgB,qBAAqB,CAAC,OAAgB;IAOpD,IAAI,CAAC;QACH,MAAM,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC;QACjE,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,mBAAmB,EAAE,CAAC;QACxD,CAAC;QAED,MAAM,OAAO,GAAG,IAAA,iCAAiB,EAAC,GAAG,CAAC,CAAC;QACvC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IACpC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,0BAA0B,EAAE,CAAC;IAC/D,CAAC;AACH,CAAC","sourcesContent":["import { Request } from 'express';\r\nimport { verifyAccessToken } from '../services/token.service';\r\n\r\n/**\r\n * Extracts and verifies JWT token from request authorization header\r\n * @param request - Express request object\r\n * @returns The decoded JWT payload or null if token is missing/invalid\r\n */\r\nexport function extractAndVerifyToken(request: Request): { \r\n  success: true; \r\n  decoded: ReturnType<typeof verifyAccessToken> \r\n} | { \r\n  success: false; \r\n  error: string \r\n} {\r\n  try {\r\n    const jwt = request.headers.authorization?.split(\" \")[1]?.trim();\r\n    if (!jwt) {\r\n      return { success: false, error: \"No token provided\" };\r\n    }\r\n    \r\n    const decoded = verifyAccessToken(jwt);\r\n    return { success: true, decoded };\r\n  } catch (error) {\r\n    return { success: false, error: \"Invalid or expired token\" };\r\n  }\r\n}"]}