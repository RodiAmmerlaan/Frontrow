{"version":3,"file":"usage.example.js","sourceRoot":"","sources":["../../../src/errors/usage.example.ts"],"names":[],"mappings":";;;;;AAAA,iDASwB;AACxB,6DAAqC;AAErC,IAAI,CAAC;IACH,MAAM,IAAI,kCAAmB,CAAC,8BAA8B,CAAC,CAAC;AAChE,CAAC;AAAC,OAAO,KAAK,EAAE,CAAC;IACf,IAAI,KAAK,YAAY,kCAAmB,EAAE,CAAC;QACzC,gBAAM,CAAC,IAAI,CAAC,yBAAyB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACxD,CAAC;AACH,CAAC;AAED,IAAI,CAAC;IACH,MAAM,IAAI,iCAAkB,CAAC,kDAAkD,CAAC,CAAC;AACnF,CAAC;AAAC,OAAO,KAAK,EAAE,CAAC;IACf,IAAI,KAAK,YAAY,iCAAkB,EAAE,CAAC;QACxC,gBAAM,CAAC,IAAI,CAAC,wBAAwB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACvD,CAAC;AACH,CAAC;AAED,IAAI,CAAC;IACH,MAAM,IAAI,4BAAa,CAAC,4BAA4B,CAAC,CAAC;AACxD,CAAC;AAAC,OAAO,KAAK,EAAE,CAAC;IACf,IAAI,KAAK,YAAY,4BAAa,EAAE,CAAC;QACnC,gBAAM,CAAC,IAAI,CAAC,oBAAoB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACnD,CAAC;AACH,CAAC;AAED,IAAI,CAAC;IACH,MAAM,IAAI,8BAAe,CAAC,yBAAyB,CAAC,CAAC;AACvD,CAAC;AAAC,OAAO,KAAK,EAAE,CAAC;IACf,IAAI,KAAK,YAAY,8BAAe,EAAE,CAAC;QACrC,gBAAM,CAAC,IAAI,CAAC,qBAAqB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACpD,CAAC;AACH,CAAC;AAED,IAAI,CAAC;IACH,MAAM,IAAI,8BAAe,CAAC,2BAA2B,CAAC,CAAC;AACzD,CAAC;AAAC,OAAO,KAAK,EAAE,CAAC;IACf,IAAI,KAAK,YAAY,8BAAe,EAAE,CAAC;QACrC,gBAAM,CAAC,IAAI,CAAC,sBAAsB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACrD,CAAC;AACH,CAAC;AAED,IAAI,CAAC;IACH,MAAM,IAAI,4BAAa,CAAC,uCAAuC,CAAC,CAAC;AACnE,CAAC;AAAC,OAAO,KAAK,EAAE,CAAC;IACf,IAAI,KAAK,YAAY,4BAAa,EAAE,CAAC;QACnC,gBAAM,CAAC,IAAI,CAAC,mBAAmB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAClD,CAAC;AACH,CAAC;AAED,IAAI,CAAC;IACH,MAAM,IAAI,6BAAc,CAAC,4CAA4C,CAAC,CAAC;AACzE,CAAC;AAAC,OAAO,KAAK,EAAE,CAAC;IACf,IAAI,KAAK,YAAY,6BAAc,EAAE,CAAC;QACpC,gBAAM,CAAC,IAAI,CAAC,qBAAqB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACpD,CAAC;AACH,CAAC;AAED,IAAI,CAAC;IACH,MAAM,IAAI,kCAAmB,CAAC,4BAA4B,CAAC,CAAC;AAC9D,CAAC;AAAC,OAAO,KAAK,EAAE,CAAC;IACf,IAAI,KAAK,YAAY,kCAAmB,EAAE,CAAC;QACzC,gBAAM,CAAC,KAAK,CAAC,0BAA0B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC1D,CAAC;AACH,CAAC","sourcesContent":["import {\r\n  AuthenticationError,\r\n  AuthorizationError,\r\n  NotFoundError,\r\n  ValidationError,\r\n  BadRequestError,\r\n  ConflictError,\r\n  RateLimitError,\r\n  InternalServerError\r\n} from './CustomErrors';\r\nimport Logger from '../utils/logger';\r\n\r\ntry {\r\n  throw new AuthenticationError('Invalid username or password');\r\n} catch (error) {\r\n  if (error instanceof AuthenticationError) {\r\n    Logger.info(`Authentication Error: ${error.message}`);\r\n  }\r\n}\r\n\r\ntry {\r\n  throw new AuthorizationError('Insufficient permissions to access this resource');\r\n} catch (error) {\r\n  if (error instanceof AuthorizationError) {\r\n    Logger.info(`Authorization Error: ${error.message}`);\r\n  }\r\n}\r\n\r\ntry {\r\n  throw new NotFoundError('User with ID 123 not found');\r\n} catch (error) {\r\n  if (error instanceof NotFoundError) {\r\n    Logger.info(`Not Found Error: ${error.message}`);\r\n  }\r\n}\r\n\r\ntry {\r\n  throw new ValidationError('Email field is required');\r\n} catch (error) {\r\n  if (error instanceof ValidationError) {\r\n    Logger.info(`Validation Error: ${error.message}`);\r\n  }\r\n}\r\n\r\ntry {\r\n  throw new BadRequestError('Malformed request payload');\r\n} catch (error) {\r\n  if (error instanceof BadRequestError) {\r\n    Logger.info(`Bad Request Error: ${error.message}`);\r\n  }\r\n}\r\n\r\ntry {\r\n  throw new ConflictError('A user with this email already exists');\r\n} catch (error) {\r\n  if (error instanceof ConflictError) {\r\n    Logger.info(`Conflict Error: ${error.message}`);\r\n  }\r\n}\r\n\r\ntry {\r\n  throw new RateLimitError('Too many requests. Please try again later.');\r\n} catch (error) {\r\n  if (error instanceof RateLimitError) {\r\n    Logger.info(`Rate Limit Error: ${error.message}`);\r\n  }\r\n}\r\n\r\ntry {\r\n  throw new InternalServerError('Database connection failed');\r\n} catch (error) {\r\n  if (error instanceof InternalServerError) {\r\n    Logger.error(`Internal Server Error: ${error.message}`);\r\n  }\r\n}"]}