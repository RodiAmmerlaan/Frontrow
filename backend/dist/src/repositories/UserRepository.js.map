{"version":3,"file":"UserRepository.js","sourceRoot":"","sources":["../../../src/repositories/UserRepository.ts"],"names":[],"mappings":"","sourcesContent":["import { Users } from \"@prisma/client\";\r\nimport { BaseRepository } from \"./BaseRepository\";\r\n\r\nexport interface UserRepository extends BaseRepository<Users, string> {\r\n  /**\r\n   * Find a user by their email address\r\n   * @param email - The email address of the user to find\r\n   * @returns A promise that resolves to the user or null if not found\r\n   */\r\n  findByEmail(email: string): Promise<Users | null>;\r\n\r\n  /**\r\n   * Find users by their role\r\n   * @param role - The role to filter users by\r\n   * @returns A promise that resolves to an array of users with the specified role\r\n   */\r\n  findByRole(role: string): Promise<Users[]>;\r\n\r\n  /**\r\n   * Find or create a user (upsert)\r\n   * @param userData - The user data to find or create\r\n   * @returns A promise that resolves to the found or created user\r\n   */\r\n  findOrCreate(userData: Partial<Users>): Promise<Users>;\r\n  \r\n  /**\r\n   * Registers a new user in the database\r\n   * @param email - The user's email address\r\n   * @param password - The hashed password\r\n   * @param first_name - The user's first name\r\n   * @param last_name - The user's last name\r\n   * @param street - The user's street address\r\n   * @param house_number - The user's house number\r\n   * @param postal_code - The user's postal code\r\n   * @param city - The user's city\r\n   * @returns A promise that resolves to the created or updated user\r\n   */\r\n  registerUser(email: string, password: string, first_name: string, last_name: string, street: string, house_number: string, postal_code: string, city: string): Promise<Users>;\r\n}"]}