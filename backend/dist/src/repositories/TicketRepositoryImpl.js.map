{"version":3,"file":"TicketRepositoryImpl.js","sourceRoot":"","sources":["../../../src/repositories/TicketRepositoryImpl.ts"],"names":[],"mappings":";;;AACA,6DAA0D;AAG1D,MAAa,oBAAqB,SAAQ,uCAAmC;IAC3E;;;;OAIG;IACH,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,OAAO;QACX,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,UAA8C;QACzD,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;IAChE,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,UAA4B;QACnD,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;gBACtC,KAAK,EAAE,EAAE,EAAE,EAAE;gBACb,IAAI,EAAE,UAAU;aACjB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YACpD,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACvE,OAAO,CAAC,CAAC,MAAM,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,aAAa,CAAC,OAAe;QACjC,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YACxC,KAAK,EAAE;gBACL,GAAG,EAAE;oBACH,EAAE,QAAQ,EAAE,OAAO,EAAE;oBACrB,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;iBAC7B;aACF;SACF,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,YAAY,CAAC,MAAc;QAC/B,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAChF,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,UAAU,CAAC,OAA6C;QAC5D,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YACnC,IAAI,EAAE,OAAO;SACd,CAAC,CAAC;QAEH,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAClE,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YACxC,KAAK,EAAE;gBACL,aAAa,EAAE;oBACb,EAAE,EAAE,aAAa;iBAClB;aACF;SACF,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,aAAa,CAAC,QAAgB,EAAE,OAAe,EAAE,MAAc;QACnE,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC1D,QAAQ,EAAE,QAAQ;YAClB,WAAW,EAAE,OAAO;YACpB,aAAa,EAAE,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE;SAC1E,CAAC,CAAC,CAAC;QAEJ,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IAC5C,CAAC;CACF;AAlID,oDAkIC","sourcesContent":["import { Tickets } from \"@prisma/client\";\r\nimport { BaseRepositoryImpl } from \"./BaseRepositoryImpl\";\r\nimport { TicketRepository } from \"./TicketRepository\";\r\n\r\nexport class TicketRepositoryImpl extends BaseRepositoryImpl<Tickets, string> implements TicketRepository {\r\n  /**\r\n   * Find a ticket by its ID\r\n   * @param id - The unique identifier of the ticket\r\n   * @returns A promise that resolves to the ticket or null if not found\r\n   */\r\n  async findById(id: string): Promise<Tickets | null> {\r\n    return await this.prisma.tickets.findUnique({ where: { id } });\r\n  }\r\n\r\n  /**\r\n   * Find all tickets\r\n   * @returns A promise that resolves to an array of all tickets\r\n   */\r\n  async findAll(): Promise<Tickets[]> {\r\n    return await this.prisma.tickets.findMany();\r\n  }\r\n\r\n  /**\r\n   * Create a new ticket\r\n   * @param ticketData - The ticket data to create\r\n   * @returns A promise that resolves to the created ticket\r\n   */\r\n  async create(ticketData: Omit<Tickets, 'id' | 'created_at'>): Promise<Tickets> {\r\n    return await this.prisma.tickets.create({ data: ticketData });\r\n  }\r\n\r\n  /**\r\n   * Update an existing ticket\r\n   * @param id - The unique identifier of the ticket to update\r\n   * @param ticketData - The updated ticket data\r\n   * @returns A promise that resolves to the updated ticket or null if not found\r\n   */\r\n  async update(id: string, ticketData: Partial<Tickets>): Promise<Tickets | null> {\r\n    try {\r\n      return await this.prisma.tickets.update({\r\n        where: { id },\r\n        data: ticketData\r\n      });\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a ticket by its ID\r\n   * @param id - The unique identifier of the ticket to delete\r\n   * @returns A promise that resolves to true if deletion was successful, false otherwise\r\n   */\r\n  async delete(id: string): Promise<boolean> {\r\n    try {\r\n      await this.prisma.tickets.delete({ where: { id } });\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a ticket exists by its ID\r\n   * @param id - The unique identifier to check\r\n   * @returns A promise that resolves to true if the ticket exists, false otherwise\r\n   */\r\n  async exists(id: string): Promise<boolean> {\r\n    const ticket = await this.prisma.tickets.findUnique({ where: { id } });\r\n    return !!ticket;\r\n  }\r\n\r\n  /**\r\n   * Find tickets by order ID\r\n   * @param orderId - The ID of the order\r\n   * @returns A promise that resolves to an array of tickets for the order\r\n   */\r\n  async findByOrderId(orderId: string): Promise<Tickets[]> {\r\n    const now = new Date();\r\n    return await this.prisma.tickets.findMany({ \r\n      where: { \r\n        AND: [\r\n          { order_id: orderId },\r\n          { created_at: { lte: now } }\r\n        ]\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Find tickets by user ID\r\n   * @param userId - The ID of the user\r\n   * @returns A promise that resolves to an array of tickets assigned to the user\r\n   */\r\n  async findByUserId(userId: string): Promise<Tickets[]> {\r\n    return await this.prisma.tickets.findMany({ where: { assigned_to: userId } });\r\n  }\r\n\r\n  /**\r\n   * Create multiple tickets at once\r\n   * @param tickets - Array of ticket data to create\r\n   * @returns A promise that resolves to an array of created tickets\r\n   */\r\n  async createMany(tickets: Omit<Tickets, 'id' | 'created_at'>[]): Promise<Tickets[]> {\r\n    await this.prisma.tickets.createMany({\r\n      data: tickets\r\n    });\r\n    \r\n    const ticketNumbers = tickets.map(ticket => ticket.ticket_number);\r\n    return await this.prisma.tickets.findMany({\r\n      where: {\r\n        ticket_number: {\r\n          in: ticketNumbers\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates multiple tickets for an order\r\n   * @param order_id - The ID of the order for which tickets are being created\r\n   * @param user_id - The ID of the user who will own the tickets\r\n   * @param amount - The number of tickets to create\r\n   * @returns A promise that resolves to an array of created tickets\r\n   */\r\n  async createTickets(order_id: string, user_id: string, amount: number): Promise<Tickets[]> {\r\n    const ticketsData = Array.from({ length: amount }, (_, i) => ({\r\n        order_id: order_id,\r\n        assigned_to: user_id,\r\n        ticket_number: \"T-\" + order_id.split(\"-\")[0] + \"-\" + (i + 1).toString()\r\n    }));\r\n    \r\n    return await this.createMany(ticketsData);\r\n  }\r\n}"]}