{"version":3,"file":"TicketBatchRepositoryImpl.js","sourceRoot":"","sources":["../../../src/repositories/TicketBatchRepositoryImpl.ts"],"names":[],"mappings":";;;AACA,6DAA0D;AAG1D,MAAa,yBAA0B,SAAQ,uCAAyC;IACtF;;;;OAIG;IACH,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACvE,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,OAAO;QACX,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;IACpD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,eAAyD;QACpE,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC,CAAC;IAC3E,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,eAAuC;QAC9D,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;gBAC5C,KAAK,EAAE,EAAE,EAAE,EAAE;gBACb,IAAI,EAAE,eAAe;aACtB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAClF,OAAO,CAAC,CAAC,WAAW,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,aAAa,CAAC,OAAe;QACjC,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;IACpF,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,kBAAkB,CAAC,OAAe;QACtC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;YACvD,KAAK,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE;YAC5B,IAAI,EAAE,CAAC;SACR,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAChD,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,iBAAiB,CAAC,QAAgB,EAAE,aAAqB,EAAE,KAAa;QAC5E,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC;YACrB,QAAQ,EAAE,QAAQ;YAClB,aAAa,EAAE,aAAa;YAC5B,KAAK,EAAE,KAAK;SACf,CAAC,CAAC;IACL,CAAC;CACF;AAxGD,8DAwGC","sourcesContent":["import { TicketBatches } from \"@prisma/client\";\r\nimport { BaseRepositoryImpl } from \"./BaseRepositoryImpl\";\r\nimport { TicketBatchRepository } from \"./TicketBatchRepository\";\r\n\r\nexport class TicketBatchRepositoryImpl extends BaseRepositoryImpl<TicketBatches, string> implements TicketBatchRepository {\r\n  /**\r\n   * Find a ticket batch by its ID\r\n   * @param id - The unique identifier of the ticket batch\r\n   * @returns A promise that resolves to the ticket batch or null if not found\r\n   */\r\n  async findById(id: string): Promise<TicketBatches | null> {\r\n    return await this.prisma.ticketBatches.findUnique({ where: { id } });\r\n  }\r\n\r\n  /**\r\n   * Find all ticket batches\r\n   * @returns A promise that resolves to an array of all ticket batches\r\n   */\r\n  async findAll(): Promise<TicketBatches[]> {\r\n    return await this.prisma.ticketBatches.findMany();\r\n  }\r\n\r\n  /**\r\n   * Create a new ticket batch\r\n   * @param ticketBatchData - The ticket batch data to create\r\n   * @returns A promise that resolves to the created ticket batch\r\n   */\r\n  async create(ticketBatchData: Omit<TicketBatches, 'id' | 'created_at'>): Promise<TicketBatches> {\r\n    return await this.prisma.ticketBatches.create({ data: ticketBatchData });\r\n  }\r\n\r\n  /**\r\n   * Update an existing ticket batch\r\n   * @param id - The unique identifier of the ticket batch to update\r\n   * @param ticketBatchData - The updated ticket batch data\r\n   * @returns A promise that resolves to the updated ticket batch or null if not found\r\n   */\r\n  async update(id: string, ticketBatchData: Partial<TicketBatches>): Promise<TicketBatches | null> {\r\n    try {\r\n      return await this.prisma.ticketBatches.update({\r\n        where: { id },\r\n        data: ticketBatchData\r\n      });\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a ticket batch by its ID\r\n   * @param id - The unique identifier of the ticket batch to delete\r\n   * @returns A promise that resolves to true if deletion was successful, false otherwise\r\n   */\r\n  async delete(id: string): Promise<boolean> {\r\n    try {\r\n      await this.prisma.ticketBatches.delete({ where: { id } });\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a ticket batch exists by its ID\r\n   * @param id - The unique identifier to check\r\n   * @returns A promise that resolves to true if the ticket batch exists, false otherwise\r\n   */\r\n  async exists(id: string): Promise<boolean> {\r\n    const ticketBatch = await this.prisma.ticketBatches.findUnique({ where: { id } });\r\n    return !!ticketBatch;\r\n  }\r\n\r\n  /**\r\n   * Find ticket batches by event ID\r\n   * @param eventId - The ID of the event\r\n   * @returns A promise that resolves to an array of ticket batches for the event\r\n   */\r\n  async findByEventId(eventId: string): Promise<TicketBatches[]> {\r\n    return await this.prisma.ticketBatches.findMany({ where: { event_id: eventId } });\r\n  }\r\n\r\n  /**\r\n   * Find the first ticket batch for an event\r\n   * @param eventId - The ID of the event\r\n   * @returns A promise that resolves to the first ticket batch or null if not found\r\n   */\r\n  async findFirstByEventId(eventId: string): Promise<TicketBatches | null> {\r\n    const batches = await this.prisma.ticketBatches.findMany({ \r\n      where: { event_id: eventId },\r\n      take: 1\r\n    });\r\n    return batches.length > 0 ? batches[0] : null;\r\n  }\r\n\r\n  /**\r\n   * Creates a new ticket batch for an event\r\n   * @param event_id - The ID of the event\r\n   * @param total_tickets - The total number of tickets in this batch\r\n   * @param price - The price per ticket\r\n   * @returns A promise that resolves to the created ticket batch\r\n   */\r\n  async createTicketBatch(event_id: string, total_tickets: number, price: number): Promise<TicketBatches> {\r\n    return await this.create({\r\n        event_id: event_id,\r\n        total_tickets: total_tickets,\r\n        price: price\r\n    });\r\n  }\r\n}"]}