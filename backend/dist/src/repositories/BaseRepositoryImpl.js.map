{"version":3,"file":"BaseRepositoryImpl.js","sourceRoot":"","sources":["../../../src/repositories/BaseRepositoryImpl.ts"],"names":[],"mappings":";;;AAAA,2CAA8C;AAE9C,+DAA4D;AAE5D,MAAsB,kBAAkB;IAGtC;QACE,IAAI,CAAC,MAAM,GAAG,IAAI,qBAAY,EAAE,CAAC;IACnC,CAAC;IAED;;;;;OAKG;IACO,iBAAiB,CAAC,KAAU,EAAE,SAAiB,EAAE,QAAa;QACtE,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YAC3B,MAAM,IAAI,iCAAe,CAAC,qBAAqB,SAAS,EAAE,EAAE,kBAAkB,CAAC,CAAC;QAClF,CAAC;QACD,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YAC3B,MAAM,IAAI,iCAAe,CAAC,qBAAqB,SAAS,EAAE,EAAE,kBAAkB,CAAC,CAAC;QAClF,CAAC;QAED,MAAM,IAAI,iCAAe,CAAC,8BAA8B,SAAS,KAAK,KAAK,CAAC,OAAO,EAAE,EAAE,gBAAgB,CAAC,CAAC;IAC3G,CAAC;CAQF;AA9BD,gDA8BC","sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\nimport { BaseRepository } from \"./BaseRepository\";\r\nimport { RepositoryError } from '../errors/RepositoryError';\r\n\r\nexport abstract class BaseRepositoryImpl<T, ID> implements BaseRepository<T, ID> {\r\n  protected prisma: PrismaClient;\r\n  \r\n  constructor() {\r\n    this.prisma = new PrismaClient();\r\n  }\r\n\r\n  /**\r\n   * Handles Prisma errors and converts them to application-specific errors\r\n   * @param error - The error to handle\r\n   * @param operation - The operation that was being performed\r\n   * @param entityId - Optional entity ID related to the operation\r\n   */\r\n  protected handlePrismaError(error: any, operation: string, entityId?: ID): never {\r\n    if (error.code === 'P2002') { \r\n      throw new RepositoryError(`Duplicate entity: ${operation}`, 'DUPLICATE_ENTITY');\r\n    }\r\n    if (error.code === 'P2025') { \r\n      throw new RepositoryError(`Entity not found: ${operation}`, 'ENTITY_NOT_FOUND');\r\n    }\r\n    \r\n    throw new RepositoryError(`Database operation failed: ${operation}. ${error.message}`, 'DATABASE_ERROR');\r\n  }\r\n\r\n  abstract findById(id: ID): Promise<T | null>;  \r\n  abstract findAll(): Promise<T[]>;\r\n  abstract create(entity: Omit<T, 'id'>): Promise<T>;\r\n  abstract update(id: ID, entity: Partial<T>): Promise<T | null>;\r\n  abstract delete(id: ID): Promise<boolean>;\r\n  abstract exists(id: ID): Promise<boolean>;\r\n}"]}