{"version":3,"file":"BaseRepository.js","sourceRoot":"","sources":["../../../src/repositories/BaseRepository.ts"],"names":[],"mappings":"","sourcesContent":["export interface BaseRepository<T, ID> {\r\n  /**\r\n   * Find an entity by its ID\r\n   * @param id - The unique identifier of the entity\r\n   * @returns A promise that resolves to the entity or null if not found\r\n   */\r\n  findById(id: ID): Promise<T | null>;\r\n\r\n  /**\r\n   * Find all entities\r\n   * @returns A promise that resolves to an array of all entities\r\n   */\r\n  findAll(): Promise<T[]>;\r\n\r\n  /**\r\n   * Create a new entity\r\n   * @param entity - The entity to create\r\n   * @returns A promise that resolves to the created entity\r\n   */\r\n  create(entity: Omit<T, 'id'>): Promise<T>;\r\n\r\n  /**\r\n   * Update an existing entity\r\n   * @param id - The unique identifier of the entity to update\r\n   * @param entity - The updated entity data\r\n   * @returns A promise that resolves to the updated entity\r\n   */\r\n  update(id: ID, entity: Partial<T>): Promise<T | null>;\r\n\r\n  /**\r\n   * Delete an entity by its ID\r\n   * @param id - The unique identifier of the entity to delete\r\n   * @returns A promise that resolves to true if deletion was successful, false otherwise\r\n   */\r\n  delete(id: ID): Promise<boolean>;\r\n\r\n  /**\r\n   * Check if an entity exists by its ID\r\n   * @param id - The unique identifier to check\r\n   * @returns A promise that resolves to true if the entity exists, false otherwise\r\n   */\r\n  exists(id: ID): Promise<boolean>;\r\n}"]}