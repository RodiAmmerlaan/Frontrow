{"version":3,"file":"BaseController.js","sourceRoot":"","sources":["../../../src/controllers/BaseController.ts"],"names":[],"mappings":";;;AACA,0DAOgC;AAChC,sCAQmB;AAEnB,MAAa,cAAc;IACzB;;;;;;OAMG;IACO,WAAW,CACnB,QAAkB,EAClB,IAAO,EACP,OAAgB,EAChB,aAAqB,GAAG;QAExB,OAAO,IAAA,2BAAW,EAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;;OAMG;IACO,SAAS,CACjB,QAAkB,EAClB,KAAa,EACb,aAAqB,GAAG,EACxB,OAAgB;QAEhB,OAAO,IAAA,yBAAS,EAAC,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;IAED;;;;OAIG;IACO,YAAY,CACpB,QAAkB,EAClB,OAAgB;QAEhB,OAAO,IAAA,4BAAY,EAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACO,cAAc,CACtB,QAAkB,EAClB,OAAgB;QAEhB,OAAO,IAAA,8BAAc,EAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACO,gBAAgB,CACxB,QAAkB,EAClB,OAAgB;QAEhB,OAAO,IAAA,gCAAgB,EAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC7C,CAAC;IAED;;;;OAIG;IACO,aAAa,CACrB,QAAkB,EAClB,OAAgB;QAEhB,OAAO,IAAA,6BAAa,EAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACO,wBAAwB,CAAC,OAAgB;QACjD,MAAM,IAAI,4BAAmB,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IAED;;;OAGG;IACO,uBAAuB,CAAC,OAAgB;QAChD,MAAM,IAAI,2BAAkB,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IAED;;;OAGG;IACO,kBAAkB,CAAC,OAAgB;QAC3C,MAAM,IAAI,sBAAa,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;IAED;;;OAGG;IACO,oBAAoB,CAAC,OAAgB;QAC7C,MAAM,IAAI,wBAAe,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAED;;;OAGG;IACO,oBAAoB,CAAC,OAAgB;QAC7C,MAAM,IAAI,wBAAe,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAED;;;OAGG;IACO,kBAAkB,CAAC,OAAgB;QAC3C,MAAM,IAAI,sBAAa,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;IAED;;;OAGG;IACO,wBAAwB,CAAC,OAAgB;QACjD,MAAM,IAAI,4BAAmB,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACO,oBAAoB,CAAC,OAAgB;QAC7C,OAAQ,OAAe,CAAC,IAAI,IAAI,IAAI,CAAC;IACvC,CAAC;IAED;;;;;OAKG;IACO,OAAO,CAAC,OAAgB,EAAE,IAAY;QAC9C,MAAM,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACO,UAAU,CAAC,OAAgB,EAAE,KAAe;QACpD,MAAM,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAClD,CAAC;CACF;AAvKD,wCAuKC","sourcesContent":["import { Request, Response } from 'express';\r\nimport { \r\n  sendSuccess, \r\n  sendError, \r\n  sendNotFound, \r\n  sendBadRequest, \r\n  sendUnauthorized, \r\n  sendForbidden \r\n} from '../utils/response.util';\r\nimport {\r\n  AuthenticationError,\r\n  AuthorizationError,\r\n  NotFoundError,\r\n  ValidationError,\r\n  BadRequestError,\r\n  ConflictError,\r\n  InternalServerError\r\n} from '../errors';\r\n\r\nexport class BaseController {\r\n  /**\r\n   * Send a successful response\r\n   * @param response - Express response object\r\n   * @param data - Data to send in the response\r\n   * @param message - Optional message\r\n   * @param statusCode - HTTP status code (default: 200)\r\n   */\r\n  protected sendSuccess<T>(\r\n    response: Response,\r\n    data: T,\r\n    message?: string,\r\n    statusCode: number = 200\r\n  ): Response {\r\n    return sendSuccess(response, data, message, statusCode);\r\n  }\r\n\r\n  /**\r\n   * Send an error response\r\n   * @param response - Express response object\r\n   * @param error - Error identifier\r\n   * @param statusCode - HTTP status code (default: 500)\r\n   * @param message - Optional message\r\n   */\r\n  protected sendError(\r\n    response: Response,\r\n    error: string,\r\n    statusCode: number = 500,\r\n    message?: string\r\n  ): Response {\r\n    return sendError(response, error, statusCode, message);\r\n  }\r\n\r\n  /**\r\n   * Send a not found response\r\n   * @param response - Express response object\r\n   * @param message - Optional message\r\n   */\r\n  protected sendNotFound(\r\n    response: Response,\r\n    message?: string\r\n  ): Response {\r\n    return sendNotFound(response, message);\r\n  }\r\n\r\n  /**\r\n   * Send a bad request response\r\n   * @param response - Express response object\r\n   * @param message - Optional message\r\n   */\r\n  protected sendBadRequest(\r\n    response: Response,\r\n    message?: string\r\n  ): Response {\r\n    return sendBadRequest(response, message);\r\n  }\r\n\r\n  /**\r\n   * Send an unauthorized response\r\n   * @param response - Express response object\r\n   * @param message - Optional message\r\n   */\r\n  protected sendUnauthorized(\r\n    response: Response,\r\n    message?: string\r\n  ): Response {\r\n    return sendUnauthorized(response, message);\r\n  }\r\n\r\n  /**\r\n   * Send a forbidden response\r\n   * @param response - Express response object\r\n   * @param message - Optional message\r\n   */\r\n  protected sendForbidden(\r\n    response: Response,\r\n    message?: string\r\n  ): Response {\r\n    return sendForbidden(response, message);\r\n  }\r\n\r\n  /**\r\n   * Throw an authentication error\r\n   * @param message - Optional error message\r\n   */\r\n  protected throwAuthenticationError(message?: string): never {\r\n    throw new AuthenticationError(message);\r\n  }\r\n\r\n  /**\r\n   * Throw an authorization error\r\n   * @param message - Optional error message\r\n   */\r\n  protected throwAuthorizationError(message?: string): never {\r\n    throw new AuthorizationError(message);\r\n  }\r\n\r\n  /**\r\n   * Throw a not found error\r\n   * @param message - Optional error message\r\n   */\r\n  protected throwNotFoundError(message?: string): never {\r\n    throw new NotFoundError(message);\r\n  }\r\n\r\n  /**\r\n   * Throw a validation error\r\n   * @param message - Optional error message\r\n   */\r\n  protected throwValidationError(message?: string): never {\r\n    throw new ValidationError(message);\r\n  }\r\n\r\n  /**\r\n   * Throw a bad request error\r\n   * @param message - Optional error message\r\n   */\r\n  protected throwBadRequestError(message?: string): never {\r\n    throw new BadRequestError(message);\r\n  }\r\n\r\n  /**\r\n   * Throw a conflict error\r\n   * @param message - Optional error message\r\n   */\r\n  protected throwConflictError(message?: string): never {\r\n    throw new ConflictError(message);\r\n  }\r\n\r\n  /**\r\n   * Throw an internal server error\r\n   * @param message - Optional error message\r\n   */\r\n  protected throwInternalServerError(message?: string): never {\r\n    throw new InternalServerError(message);\r\n  }\r\n\r\n  /**\r\n   * Get the authenticated user from the request\r\n   * @param request - Express request object\r\n   * @returns User object or null if not authenticated\r\n   */\r\n  protected getAuthenticatedUser(request: Request): { id: string; email: string; role: string } | null {\r\n    return (request as any).user || null;\r\n  }\r\n\r\n  /**\r\n   * Check if the authenticated user has a specific role\r\n   * @param request - Express request object\r\n   * @param role - Role to check\r\n   * @returns True if user has the role, false otherwise\r\n   */\r\n  protected hasRole(request: Request, role: string): boolean {\r\n    const user = this.getAuthenticatedUser(request);\r\n    return user ? user.role === role : false;\r\n  }\r\n\r\n  /**\r\n   * Check if the authenticated user has any of the specified roles\r\n   * @param request - Express request object\r\n   * @param roles - Array of roles to check\r\n   * @returns True if user has any of the roles, false otherwise\r\n   */\r\n  protected hasAnyRole(request: Request, roles: string[]): boolean {\r\n    const user = this.getAuthenticatedUser(request);\r\n    return user ? roles.includes(user.role) : false;\r\n  }\r\n}"]}