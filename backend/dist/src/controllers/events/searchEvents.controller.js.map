{"version":3,"file":"searchEvents.controller.js","sourceRoot":"","sources":["../../../../src/controllers/events/searchEvents.controller.ts"],"names":[],"mappings":";;;;;;AACA,kEAA8D;AAC9D,sDAAmD;AACnD,gEAAwC;AACxC,yCAAmF;AAEnF,MAAa,sBAAuB,SAAQ,+BAAc;IACtD;;;;;;OAMG;IAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA4EG;IACI,KAAK,CAAC,YAAY,CACrB,OAAgB,EAChB,QAAkB;QAElB,MAAM,aAAa,GAAI,OAAe,CAAC,aAAa,IAAI,KAAK,CAAC;QAC9D,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC;QAC/B,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,mCAAmC,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QAE7E,IAAI,CAAC;YACD,MAAM,MAAM,GAAG,MAAM,8BAAa,CAAC,kBAAkB,CAAC,IAAc,CAAC,CAAC;YACtE,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,gCAAgC,EAAE;gBAC3D,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE,MAAM,CAAC,KAAK;aAC5B,CAAC,CAAC;YACH,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC9C,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YAClB,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClE,IAAI,KAAK,YAAY,wBAAe,EAAE,CAAC;gBACnC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,2BAA2B,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBACpF,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7C,CAAC;YACD,IAAI,KAAK,YAAY,sBAAa,EAAE,CAAC;gBACjC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,0BAA0B,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBACnF,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC3C,CAAC;YACD,IAAI,CAAC,wBAAwB,CAAC,kDAAkD,CAAC,CAAC;QACtF,CAAC;IACL,CAAC;CACJ;AAlHD,wDAkHC;AAEY,QAAA,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC;AACtD,QAAA,YAAY,GAAG,8BAAsB,CAAC,YAAY,CAAC,IAAI,CAAC,8BAAsB,CAAC,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\nimport { EventsService } from '../../services/events.service';\r\nimport { BaseController } from '../BaseController';\r\nimport Logger from '../../utils/logger';\r\nimport { ValidationError, NotFoundError, InternalServerError } from '../../errors';\r\n\r\nexport class SearchEventsController extends BaseController {\r\n    /**\r\n     * Controller function to search for events by name\r\n     * Performs a case-insensitive partial match search on event titles\r\n     * @param request - Express request object containing the search term in query parameters\r\n     * @param response - Express response object\r\n     * @returns Response with array of matching events or appropriate error message\r\n     */\r\n    \r\n    /**\r\n     * @openapi\r\n     * /events/search:\r\n     *   get:\r\n     *     summary: Search for events by name\r\n     *     description: Performs a case-insensitive partial match search on event titles\r\n     *     tags:\r\n     *       - Events\r\n     *     parameters:\r\n     *       - in: query\r\n     *         name: name\r\n     *         required: true\r\n     *         schema:\r\n     *           type: string\r\n     *           minLength: 1\r\n     *         description: The search term to match against event titles\r\n     *     responses:\r\n     *       200:\r\n     *         description: Successful response with matching events\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 data:\r\n     *                   type: object\r\n     *                   properties:\r\n     *                     events:\r\n     *                       type: array\r\n     *                       items:\r\n     *                         $ref: '#/components/schemas/Event'\r\n     *                     count:\r\n     *                       type: integer\r\n     *                     searchTerm:\r\n     *                       type: string\r\n     *       400:\r\n     *         description: Bad request - validation error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       404:\r\n     *         description: No events found matching the search term\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       500:\r\n     *         description: Internal server error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     */\r\n    public async searchEvents(\r\n        request: Request,\r\n        response: Response\r\n    ) {\r\n        const correlationId = (request as any).correlationId || 'N/A';\r\n        const { name } = request.query;\r\n        Logger.debug(`[${correlationId}] Search events controller called`, { name });\r\n        \r\n        try {\r\n            const result = await EventsService.searchEventsByName(name as string);\r\n            Logger.info(`[${correlationId}] Successfully searched events`, { \r\n                searchTerm: name, \r\n                resultCount: result.count \r\n            });\r\n            return this.sendSuccess(response, result);\r\n        } catch (error: any) {\r\n            Logger.error(`[${correlationId}] Error searching events:`, error);\r\n            if (error instanceof ValidationError) {\r\n                Logger.warn(`[${correlationId}] Search validation error`, { error: error.message });\r\n                this.throwBadRequestError(error.message);\r\n            }\r\n            if (error instanceof NotFoundError) {\r\n                Logger.warn(`[${correlationId}] Search not found error`, { error: error.message });\r\n                this.throwNotFoundError(error.message);\r\n            }\r\n            this.throwInternalServerError(\"Failed to search events. Please try again later.\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const searchEventsController = new SearchEventsController();\r\nexport const searchEvents = searchEventsController.searchEvents.bind(searchEventsController);"]}