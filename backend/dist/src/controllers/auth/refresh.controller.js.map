{"version":3,"file":"refresh.controller.js","sourceRoot":"","sources":["../../../../src/controllers/auth/refresh.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA,8CA6BC;AA1FD,8DAA0D;AAC1D,qCAA4C;AAC5C,6DAA0E;AAC1E,gEAAwC;AACxC,yCAAmD;AAEnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsDG;AACI,KAAK,UAAU,iBAAiB,CACnC,OAAgB,EAChB,QAAkB;IAElB,MAAM,aAAa,GAAI,OAAe,CAAC,aAAa,IAAI,KAAK,CAAC;IAC9D,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,6BAA6B,CAAC,CAAC;IAE7D,IAAI,CAAC;QACD,MAAM,GAAG,GAAG,IAAA,yBAAgB,EAAC,OAAO,CAAC,CAAC;QACtC,IAAG,CAAC,GAAG,EAAE,CAAC;YACN,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,0BAA0B,CAAC,CAAC;YACzD,OAAO,IAAA,gCAAgB,EAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;QAChE,CAAC;QAED,MAAM,MAAM,GAAG,MAAM,0BAAW,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;QAExD,MAAM,EAAE,gBAAgB,EAAE,GAAG,wDAAa,UAAU,GAAC,CAAC;QACtD,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QACpD,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,iCAAiC,CAAC,CAAC;QAChE,OAAO,IAAA,2BAAW,EAAC,QAAQ,EAAE,EAAE,YAAY,EAAE,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;IACvE,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,IAAI,KAAK,YAAY,4BAAmB,EAAE,CAAC;YACvC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,wBAAwB,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACjF,OAAO,IAAA,gCAAgB,EAAC,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC;QAED,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,+BAA+B,EAAE,KAAK,CAAC,CAAC;QACtE,OAAO,IAAA,gCAAgB,EAAC,QAAQ,EAAE,kEAAkE,CAAC,CAAC;IAC1G,CAAC;AACL,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { getRefreshCookie } from './cookie';\r\nimport { sendUnauthorized, sendSuccess } from '../../utils/response.util';\r\nimport Logger from '../../utils/logger';\r\nimport { AuthenticationError } from '../../errors';\r\n\r\n/**\r\n * @openapi\r\n * /auth/refresh:\r\n *   post:\r\n *     summary: Refresh authentication tokens\r\n *     description: Refreshes the access token using the refresh token stored in cookies\r\n *     tags:\r\n *       - Authentication\r\n *     responses:\r\n *       200:\r\n *         description: Successful token refresh\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     access_token:\r\n *                       type: string\r\n *         headers:\r\n *           Set-Cookie:\r\n *             description: Refresh token cookie\r\n *             schema:\r\n *               type: string\r\n *       401:\r\n *         description: Unauthorized - invalid or missing refresh token\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 error:\r\n *                   type: string\r\n *                 message:\r\n *                   type: string\r\n *       500:\r\n *         description: Internal server error\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 error:\r\n *                   type: string\r\n *                 message:\r\n *                   type: string\r\n */\r\nexport async function refreshController(\r\n    request: Request,\r\n    response: Response\r\n) {\r\n    const correlationId = (request as any).correlationId || 'N/A';\r\n    Logger.debug(`[${correlationId}] Refresh controller called`);\r\n    \r\n    try {\r\n        const raw = getRefreshCookie(request);\r\n        if(!raw) {\r\n            Logger.warn(`[${correlationId}] Missing refresh cookie`);\r\n            return sendUnauthorized(response, 'Missing refresh Cookie');\r\n        }\r\n\r\n        const tokens = await AuthService.refreshUserTokens(raw);\r\n\r\n        const { setRefreshCookie } = await import('./cookie');\r\n        setRefreshCookie(response, tokens.refreshToken, 30);\r\n        Logger.info(`[${correlationId}] Tokens refreshed successfully`);\r\n        return sendSuccess(response, { access_token: tokens.accessToken });\r\n    } catch (error) {\r\n        if (error instanceof AuthenticationError) {\r\n            Logger.warn(`[${correlationId}] Token refresh failed`, { error: error.message });\r\n            return sendUnauthorized(response, error.message);\r\n        }\r\n        \r\n        Logger.error(`[${correlationId}] Error in refreshController:`, error);\r\n        return sendUnauthorized(response, 'Failed to refresh authentication tokens. Please try again later.');\r\n    }\r\n}"]}