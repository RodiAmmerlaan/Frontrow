{"version":3,"file":"login.controller.js","sourceRoot":"","sources":["../../../../src/controllers/auth/login.controller.ts"],"names":[],"mappings":";;;;;;AACA,qCAA4C;AAC5C,sDAAmD;AACnD,8DAA0D;AAC1D,gEAAwC;AACxC,yCAAoE;AAEpE,MAAa,eAAgB,SAAQ,+BAAc;IAC/C;;;;;;OAMG;IAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsEG;IACI,KAAK,CAAC,KAAK,CACd,OAAgB,EAChB,QAAkB;QAElB,MAAM,aAAa,GAAI,OAAe,CAAC,aAAa,IAAI,KAAK,CAAC;QAC9D,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;QACzC,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,2BAA2B,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QAEtE,IAAI,CAAC;YACD,MAAM,UAAU,GAAG,MAAM,0BAAW,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAEvE,IAAA,yBAAgB,EAAC,QAAQ,EAAE,UAAU,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;YACxD,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,+BAA+B,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YACzE,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,YAAY,EAAE,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC;QAChF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,IAAI,KAAK,YAAY,wBAAe,EAAE,CAAC;gBACnC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,0BAA0B,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC1F,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7C,CAAC;YACD,IAAI,KAAK,YAAY,4BAAmB,EAAE,CAAC;gBACvC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,yBAAyB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;gBACnE,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACjD,CAAC;YACD,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,gBAAgB,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,KAAK,CAAC;QAChB,CAAC;IACL,CAAC;CACJ;AA3GD,0CA2GC;AAEY,QAAA,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;AACxC,QAAA,KAAK,GAAG,uBAAe,CAAC,KAAK,CAAC,IAAI,CAAC,uBAAe,CAAC,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\nimport { setRefreshCookie } from './cookie';\r\nimport { BaseController } from '../BaseController';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport Logger from '../../utils/logger';\r\nimport { ValidationError, AuthenticationError } from '../../errors';\r\n\r\nexport class LoginController extends BaseController {\r\n    /**\r\n     * Controller function to handle user login\r\n     * Authenticates user credentials and issues JWT tokens\r\n     * @param request - Express request object containing email and password in body\r\n     * @param response - Express response object\r\n     * @returns Response with access token and refresh cookie, or unauthorized error\r\n     */\r\n    \r\n    /**\r\n     * @openapi\r\n     * /auth/login:\r\n     *   post:\r\n     *     summary: User login\r\n     *     description: Authenticates user credentials and issues JWT tokens\r\n     *     tags:\r\n     *       - Authentication\r\n     *     requestBody:\r\n     *       required: true\r\n     *       content:\r\n     *         application/json:\r\n     *           schema:\r\n     *             type: object\r\n     *             required:\r\n     *               - email\r\n     *               - password\r\n     *             properties:\r\n     *               email:\r\n     *                 type: string\r\n     *                 format: email\r\n     *               password:\r\n     *                 type: string\r\n     *                 format: password\r\n     *     responses:\r\n     *       200:\r\n     *         description: Successful login\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 data:\r\n     *                   type: object\r\n     *                   properties:\r\n     *                     access_token:\r\n     *                       type: string\r\n     *         headers:\r\n     *           Set-Cookie:\r\n     *             description: Refresh token cookie\r\n     *             schema:\r\n     *               type: string\r\n     *       400:\r\n     *         description: Bad request - validation error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       401:\r\n     *         description: Unauthorized - invalid credentials\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     */\r\n    public async login(\r\n        request: Request,\r\n        response: Response,\r\n    ) {\r\n        const correlationId = (request as any).correlationId || 'N/A';\r\n        const { email, password } = request.body;\r\n        Logger.debug(`[${correlationId}] Login controller called`, { email });\r\n        \r\n        try {\r\n            const authResult = await AuthService.authenticateUser(email, password);\r\n            \r\n            setRefreshCookie(response, authResult.refreshToken, 30);\r\n            Logger.info(`[${correlationId}] User logged in successfully`, { email });\r\n            return this.sendSuccess(response, { access_token: authResult.accessToken });\r\n        } catch (error) {\r\n            if (error instanceof ValidationError) {\r\n                Logger.warn(`[${correlationId}] Login validation error`, { email, error: error.message });\r\n                this.throwBadRequestError(error.message);\r\n            }\r\n            if (error instanceof AuthenticationError) {\r\n                Logger.warn(`[${correlationId}] Authentication failed`, { email });\r\n                this.throwAuthenticationError(error.message);\r\n            }\r\n            Logger.error(`[${correlationId}] Login error:`, error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nexport const loginController = new LoginController();\r\nexport const login = loginController.login.bind(loginController);"]}