{"version":3,"file":"OrderRepositoryImpl.js","sourceRoot":"","sources":["../../src/repositories/OrderRepositoryImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import { Orders } from \"@prisma/client\";\nimport { BaseRepositoryImpl } from \"./BaseRepositoryImpl\";\nimport { OrderRepository } from \"./OrderRepository\";\nimport { buildDateFilterWhereClause } from \"../utils/dateFilterUtils\";\nimport { RepositoryError, EntityNotFoundError } from '../errors/RepositoryError';\n\nexport class OrderRepositoryImpl extends BaseRepositoryImpl<Orders, string> implements OrderRepository {\n  /**\n   * Find an order by its ID\n   * @param id - The unique identifier of the order\n   * @returns A promise that resolves to the order or null if not found\n   */\n  async findById(id: string): Promise<Orders | null> {\n    return await this.prisma.orders.findUnique({ where: { id } });\n  }\n\n  /**\n   * Find all orders\n   * @returns A promise that resolves to an array of all orders\n   */\n  async findAll(): Promise<Orders[]> {\n    return await this.prisma.orders.findMany();\n  }\n\n  /**\n   * Create a new order\n   * @param orderData - The order data to create\n   * @returns A promise that resolves to the created order\n   */\n  async create(orderData: Omit<Orders, 'id' | 'created_at'>): Promise<Orders> {\n    return await this.prisma.orders.create({ data: orderData });\n  }\n\n  /**\n   * Update an existing order\n   * @param id - The unique identifier of the order to update\n   * @param orderData - The updated order data\n   * @returns A promise that resolves to the updated order or null if not found\n   */\n  async update(id: string, orderData: Partial<Orders>): Promise<Orders> {\n    try {\n      return await this.prisma.orders.update({\n        where: { id },\n        data: orderData\n      });\n    } catch (error: any) {\n      if (error.code === 'P2025') { \n        throw new EntityNotFoundError(`Order with ID ${id} not found`);\n      }\n      throw new RepositoryError(`Failed to update order with ID ${id}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Delete an order by its ID\n   * @param id - The unique identifier of the order to delete\n   * @returns A promise that resolves to true if deletion was successful, false otherwise\n   */\n  async delete(id: string): Promise<boolean> {\n    try {\n      await this.prisma.orders.delete({ where: { id } });\n      return true;\n    } catch (error: any) {\n      if (error.code === 'P2025') {\n        throw new EntityNotFoundError(`Order with ID ${id} not found`);\n      }\n      throw new RepositoryError(`Failed to delete order with ID ${id}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Check if an order exists by its ID\n   * @param id - The unique identifier to check\n   * @returns A promise that resolves to true if the order exists, false otherwise\n   */\n  async exists(id: string): Promise<boolean> {\n    const order = await this.prisma.orders.findUnique({ where: { id } });\n    return !!order;\n  }\n\n  /**\n   * Find orders by user ID\n   * @param userId - The ID of the user\n   * @returns A promise that resolves to an array of orders for the user\n   */\n  async findByUserId(userId: string): Promise<Orders[]> {\n    return await this.prisma.orders.findMany({ where: { user_id: userId } });\n  }\n\n  /**\n   * Find orders by event ID\n   * @param eventId - The ID of the event\n   * @returns A promise that resolves to an array of orders for the event\n   */\n  async findByEventId(eventId: string): Promise<Orders[]> {\n    return await this.prisma.orders.findMany({ where: { event_id: eventId } });\n  }\n\n  /**\n   * Get orders with related event and user information\n   * @returns A promise that resolves to an array of detailed order records\n   */\n  async findWithDetails(): Promise<Orders[]> {\n    return await this.prisma.orders.findMany({\n      include: {\n        Events: {\n          select: {\n            id: true,\n            title: true,\n            description: true,\n            start_time: true,\n            end_time: true\n          }\n        },\n        Users: {\n          select: {\n            id: true,\n            email: true,\n            first_name: true,\n            last_name: true\n          }\n        },\n        Tickets: true\n      },\n      orderBy: {\n        created_at: 'desc'\n      }\n    });\n  }\n\n  /**\n   * Creates a new order for ticket purchase\n   * @param event_id - The ID of the event for which tickets are being purchased\n   * @param user_id - The ID of the user purchasing the tickets\n   * @param total_amount - The total number of tickets being purchased\n   * @returns A promise that resolves to the created order\n   */\n  async buyTickets(event_id: string, user_id: string, total_amount: number): Promise<Orders> {\n    return await this.create({\n        user_id: user_id,\n        event_id: event_id,\n        total_amount: total_amount\n    });\n  }\n\n  /**\n   * Retrieves detailed sales data for events with related event and user information\n   * @param month - Optional month filter (1-12)\n   * @param year - Optional year filter\n   * @returns A promise that resolves to an array of detailed sales records\n   */\n  async getEventSalesDetails(month?: number, year?: number) {\n    const whereClause = buildDateFilterWhereClause({ month, year });\n    \n    return await this.prisma.orders.findMany({\n        where: whereClause,\n        include: {\n            Events: {\n                select: {\n                    id: true,\n                    title: true,\n                    description: true,\n                    start_time: true,\n                    end_time: true\n                }\n            },\n            Users: {\n                select: {\n                    id: true,\n                    email: true,\n                    first_name: true,\n                    last_name: true\n                }\n            },\n            Tickets: true\n        },\n        orderBy: {\n            created_at: 'desc'\n        }\n    });\n  }\n\n  /**\n   * Retrieves detailed user purchase data with related event and user information\n   * @param month - Optional month filter (1-12)\n   * @param year - Optional year filter\n   * @returns A promise that resolves to an array of detailed purchase records\n   */\n  async getUserPurchaseDetails(month?: number, year?: number) {\n    const whereClause = buildDateFilterWhereClause({ month, year });\n    \n    return await this.prisma.orders.findMany({\n        where: whereClause,\n        include: {\n            Events: {\n                select: {\n                    id: true,\n                    title: true,\n                    description: true,\n                    start_time: true,\n                    end_time: true,\n                    TicketBatches: {\n                        select: {\n                            price: true\n                        }\n                    }\n                }\n            },\n            Users: {\n                select: {\n                    id: true,\n                    email: true,\n                    first_name: true,\n                    last_name: true\n                }\n            },\n            Tickets: true\n        },\n        orderBy: {\n            created_at: 'desc'\n        }\n    });\n  }\n}"]}