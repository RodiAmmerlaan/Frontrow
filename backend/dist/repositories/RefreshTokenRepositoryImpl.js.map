{"version":3,"file":"RefreshTokenRepositoryImpl.js","sourceRoot":"","sources":["../../src/repositories/RefreshTokenRepositoryImpl.ts"],"names":[],"mappings":";;;AACA,6DAA0D;AAG1D,MAAa,0BAA2B,SAAQ,uCAAwC;IACtF;;;;OAIG;IACH,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACtE,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,OAAO;QACX,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;IACnD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,gBAAoF;QAC/F,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC,CAAC;IAC3E,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,gBAAuC;QAC9D,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC;gBAC3C,KAAK,EAAE,EAAE,EAAE,EAAE;gBACb,IAAI,EAAE,gBAAgB;aACvB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YACzD,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAClF,OAAO,CAAC,CAAC,YAAY,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,eAAe;QACnB,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IACjF,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,YAAY,CAAC,MAAc;QAC/B,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IACjF,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,WAAW,CAAC,EAAU;QAC1B,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC;gBAC3C,KAAK,EAAE,EAAE,EAAE,EAAE;gBACb,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,EAAE;aAChC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,gBAAgB;QACpB,OAAO,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;IACtC,CAAC;CACF;AA5GD,gEA4GC","sourcesContent":["import { RefreshToken } from \"@prisma/client\";\nimport { BaseRepositoryImpl } from \"./BaseRepositoryImpl\";\nimport { RefreshTokenRepository } from \"./RefreshTokenRepository\";\n\nexport class RefreshTokenRepositoryImpl extends BaseRepositoryImpl<RefreshToken, number> implements RefreshTokenRepository {\n  /**\n   * Find a refresh token by its ID\n   * @param id - The unique identifier of the refresh token\n   * @returns A promise that resolves to the refresh token or null if not found\n   */\n  async findById(id: number): Promise<RefreshToken | null> {\n    return await this.prisma.refreshToken.findUnique({ where: { id } });\n  }\n\n  /**\n   * Find all refresh tokens\n   * @returns A promise that resolves to an array of all refresh tokens\n   */\n  async findAll(): Promise<RefreshToken[]> {\n    return await this.prisma.refreshToken.findMany();\n  }\n\n  /**\n   * Create a new refresh token\n   * @param refreshTokenData - The refresh token data to create\n   * @returns A promise that resolves to the created refresh token\n   */\n  async create(refreshTokenData: Omit<RefreshToken, 'id' | 'createdat' | 'expiresat' | 'revokedat'>): Promise<RefreshToken> {\n    return await this.prisma.refreshToken.create({ data: refreshTokenData });\n  }\n\n  /**\n   * Update an existing refresh token\n   * @param id - The unique identifier of the refresh token to update\n   * @param refreshTokenData - The updated refresh token data\n   * @returns A promise that resolves to the updated refresh token or null if not found\n   */\n  async update(id: number, refreshTokenData: Partial<RefreshToken>): Promise<RefreshToken | null> {\n    try {\n      return await this.prisma.refreshToken.update({\n        where: { id },\n        data: refreshTokenData\n      });\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Delete a refresh token by its ID\n   * @param id - The unique identifier of the refresh token to delete\n   * @returns A promise that resolves to true if deletion was successful, false otherwise\n   */\n  async delete(id: number): Promise<boolean> {\n    try {\n      await this.prisma.refreshToken.delete({ where: { id } });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Check if a refresh token exists by its ID\n   * @param id - The unique identifier to check\n   * @returns A promise that resolves to true if the refresh token exists, false otherwise\n   */\n  async exists(id: number): Promise<boolean> {\n    const refreshToken = await this.prisma.refreshToken.findUnique({ where: { id } });\n    return !!refreshToken;\n  }\n\n  /**\n   * Find all valid (non-revoked) refresh tokens\n   * @returns A promise that resolves to an array of valid refresh tokens\n   */\n  async findValidTokens(): Promise<RefreshToken[]> {\n    return await this.prisma.refreshToken.findMany({ where: { revokedat: null } });\n  }\n\n  /**\n   * Find refresh tokens by user ID\n   * @param userId - The ID of the user\n   * @returns A promise that resolves to an array of refresh tokens for the user\n   */\n  async findByUserId(userId: string): Promise<RefreshToken[]> {\n    return await this.prisma.refreshToken.findMany({ where: { user_id: userId } });\n  }\n\n  /**\n   * Revoke a refresh token by setting its revoked timestamp\n   * @param id - The ID of the refresh token to revoke\n   * @returns A promise that resolves to the updated refresh token\n   */\n  async revokeToken(id: number): Promise<RefreshToken | null> {\n    try {\n      return await this.prisma.refreshToken.update({\n        where: { id },\n        data: { revokedat: new Date() }\n      });\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Retrieves all valid (non-revoked) refresh tokens\n   * @returns A promise that resolves to an array of valid refresh tokens\n   */\n  async getRefreshTokens(): Promise<RefreshToken[]> {\n    return await this.findValidTokens();\n  }\n}"]}