{"version":3,"file":"TicketRepositoryImpl.js","sourceRoot":"","sources":["../../src/repositories/TicketRepositoryImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tickets } from \"@prisma/client\";\nimport { BaseRepositoryImpl } from \"./BaseRepositoryImpl\";\nimport { TicketRepository } from \"./TicketRepository\";\n\nexport class TicketRepositoryImpl extends BaseRepositoryImpl<Tickets, string> implements TicketRepository {\n  /**\n   * Find a ticket by its ID\n   * @param id - The unique identifier of the ticket\n   * @returns A promise that resolves to the ticket or null if not found\n   */\n  async findById(id: string): Promise<Tickets | null> {\n    return await this.prisma.tickets.findUnique({ where: { id } });\n  }\n\n  /**\n   * Find all tickets\n   * @returns A promise that resolves to an array of all tickets\n   */\n  async findAll(): Promise<Tickets[]> {\n    return await this.prisma.tickets.findMany();\n  }\n\n  /**\n   * Create a new ticket\n   * @param ticketData - The ticket data to create\n   * @returns A promise that resolves to the created ticket\n   */\n  async create(ticketData: Omit<Tickets, 'id' | 'created_at'>): Promise<Tickets> {\n    return await this.prisma.tickets.create({ data: ticketData });\n  }\n\n  /**\n   * Update an existing ticket\n   * @param id - The unique identifier of the ticket to update\n   * @param ticketData - The updated ticket data\n   * @returns A promise that resolves to the updated ticket or null if not found\n   */\n  async update(id: string, ticketData: Partial<Tickets>): Promise<Tickets | null> {\n    try {\n      return await this.prisma.tickets.update({\n        where: { id },\n        data: ticketData\n      });\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Delete a ticket by its ID\n   * @param id - The unique identifier of the ticket to delete\n   * @returns A promise that resolves to true if deletion was successful, false otherwise\n   */\n  async delete(id: string): Promise<boolean> {\n    try {\n      await this.prisma.tickets.delete({ where: { id } });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Check if a ticket exists by its ID\n   * @param id - The unique identifier to check\n   * @returns A promise that resolves to true if the ticket exists, false otherwise\n   */\n  async exists(id: string): Promise<boolean> {\n    const ticket = await this.prisma.tickets.findUnique({ where: { id } });\n    return !!ticket;\n  }\n\n  /**\n   * Find tickets by order ID\n   * @param orderId - The ID of the order\n   * @returns A promise that resolves to an array of tickets for the order\n   */\n  async findByOrderId(orderId: string): Promise<Tickets[]> {\n    return await this.prisma.tickets.findMany({ where: { order_id: orderId } });\n  }\n\n  /**\n   * Find tickets by user ID\n   * @param userId - The ID of the user\n   * @returns A promise that resolves to an array of tickets assigned to the user\n   */\n  async findByUserId(userId: string): Promise<Tickets[]> {\n    return await this.prisma.tickets.findMany({ where: { assigned_to: userId } });\n  }\n\n  /**\n   * Create multiple tickets at once\n   * @param tickets - Array of ticket data to create\n   * @returns A promise that resolves to an array of created tickets\n   */\n  async createMany(tickets: Omit<Tickets, 'id' | 'created_at'>[]): Promise<Tickets[]> {\n    await this.prisma.tickets.createMany({\n      data: tickets\n    });\n    \n    const ticketNumbers = tickets.map(ticket => ticket.ticket_number);\n    return await this.prisma.tickets.findMany({\n      where: {\n        ticket_number: {\n          in: ticketNumbers\n        }\n      }\n    });\n  }\n\n  /**\n   * Creates multiple tickets for an order\n   * @param order_id - The ID of the order for which tickets are being created\n   * @param user_id - The ID of the user who will own the tickets\n   * @param amount - The number of tickets to create\n   * @returns A promise that resolves to an array of created tickets\n   */\n  async createTickets(order_id: string, user_id: string, amount: number): Promise<Tickets[]> {\n    const ticketsData = Array.from({ length: amount }, (_, i) => ({\n        order_id: order_id,\n        assigned_to: user_id,\n        ticket_number: \"T-\" + order_id.split(\"-\")[0] + \"-\" + (i + 1).toString()\n    }));\n    \n    return await this.createMany(ticketsData);\n  }\n}"]}