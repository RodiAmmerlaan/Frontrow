{"version":3,"file":"UserRepositoryImpl.js","sourceRoot":"","sources":["../../src/repositories/UserRepositoryImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import { Users } from \"@prisma/client\";\r\nimport { BaseRepositoryImpl } from \"./BaseRepositoryImpl\";\r\nimport { UserRepository } from \"./UserRepository\";\r\nimport { RepositoryError, EntityNotFoundError } from '../errors/RepositoryError';\r\n\r\nexport class UserRepositoryImpl extends BaseRepositoryImpl<Users, string> implements UserRepository {\r\n  /**\r\n   * Find a user by their ID\r\n   * @param id - The unique identifier of the user\r\n   * @returns A promise that resolves to the user or null if not found\r\n   */\r\n  async findById(id: string): Promise<Users | null> {\r\n    return await this.prisma.users.findUnique({ where: { id } });\r\n  }\r\n\r\n  /**\r\n   * Find all users\r\n   * @returns A promise that resolves to an array of all users\r\n   */\r\n  async findAll(): Promise<Users[]> {\r\n    return await this.prisma.users.findMany();\r\n  }\r\n\r\n  /**\r\n   * Create a new user\r\n   * @param userData - The user data to create\r\n   * @returns A promise that resolves to the created user\r\n   */\r\n  async create(userData: Omit<Users, 'id' | 'created_at' | 'updated_at'>): Promise<Users> {\r\n    return await this.prisma.users.create({\r\n      data: {\r\n        ...userData,\r\n        postal_code: userData.postal_code ? userData.postal_code.replace(/\\s+/g, '') : null\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update an existing user\r\n   * @param id - The unique identifier of the user to update\r\n   * @param userData - The updated user data\r\n   * @returns A promise that resolves to the updated user or null if not found\r\n   */\r\n  async update(id: string, userData: Partial<Users>): Promise<Users> {\r\n    try {\r\n      return await this.prisma.users.update({\r\n        where: { id },\r\n        data: userData\r\n      });\r\n    } catch (error: any) {\r\n      if (error.code === 'P2025') { \r\n        throw new EntityNotFoundError(`User with ID ${id} not found`);\r\n      }\r\n      throw new RepositoryError(`Failed to update user with ID ${id}: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a user by their ID\r\n   * @param id - The unique identifier of the user to delete\r\n   * @returns A promise that resolves to true if deletion was successful, false otherwise\r\n   */\r\n  async delete(id: string): Promise<boolean> {\r\n    try {\r\n      await this.prisma.users.delete({ where: { id } });\r\n      return true;\r\n    } catch (error: any) {\r\n      if (error.code === 'P2025') { \r\n        throw new EntityNotFoundError(`User with ID ${id} not found`);\r\n      }\r\n      throw new RepositoryError(`Failed to delete user with ID ${id}: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a user exists by their ID\r\n   * @param id - The unique identifier to check\r\n   * @returns A promise that resolves to true if the user exists, false otherwise\r\n   */\r\n  async exists(id: string): Promise<boolean> {\r\n    const user = await this.prisma.users.findUnique({ where: { id } });\r\n    return !!user;\r\n  }\r\n\r\n  /**\r\n   * Find a user by their email address\r\n   * @param email - The email address of the user to find\r\n   * @returns A promise that resolves to the user or null if not found\r\n   */\r\n  async findByEmail(email: string): Promise<Users | null> {\r\n    return await this.prisma.users.findUnique({ where: { email } });\r\n  }\r\n\r\n  /**\r\n   * Find users by their role\r\n   * @param role - The role to filter users by\r\n   * @returns A promise that resolves to an array of users with the specified role\r\n   */\r\n  async findByRole(role: string): Promise<Users[]> {\r\n    return await this.prisma.users.findMany({ where: { role } });\r\n  }\r\n\r\n  /**\r\n   * Find or create a user (upsert)\r\n   * @param userData - The user data to find or create\r\n   * @returns A promise that resolves to the found or created user\r\n   */\r\n  async findOrCreate(userData: Partial<Users>): Promise<Users> {\r\n    return await this.prisma.users.upsert({\r\n      where: { email: userData.email! },\r\n      update: {},\r\n      create: {\r\n        email: userData.email!,\r\n        password: userData.password!,\r\n        first_name: userData.first_name || null,\r\n        last_name: userData.last_name || null,\r\n        street: userData.street || null,\r\n        house_number: userData.house_number || null,\r\n        postal_code: userData.postal_code ? userData.postal_code.replace(/\\s+/g, '') : null,\r\n        city: userData.city || null,\r\n        role: userData.role || 'USER'\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers a new user in the database\r\n   * @param email - The user's email address\r\n   * @param password - The hashed password\r\n   * @param first_name - The user's first name\r\n   * @param last_name - The user's last name\r\n   * @param street - The user's street address\r\n   * @param house_number - The user's house number\r\n   * @param postal_code - The user's postal code\r\n   * @param city - The user's city\r\n   * @returns A promise that resolves to the created or updated user\r\n   */\r\n  async registerUser(email: string, password: string, first_name: string, last_name: string, street: string, house_number: string, postal_code: string, city: string): Promise<Users> {\r\n    return await this.findOrCreate({\r\n        email: email,\r\n        password: password,\r\n        first_name: first_name,\r\n        last_name: last_name,\r\n        street: street,\r\n        house_number: house_number,\r\n        postal_code: postal_code,\r\n        city: city,\r\n        role: 'USER'\r\n    });\r\n  }\r\n}"]}