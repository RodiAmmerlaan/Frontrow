{"version":3,"file":"profile.controller.js","sourceRoot":"","sources":["../../../src/controllers/auth/profile.controller.ts"],"names":[],"mappings":";;;;;AA6EA,oDA8BC;AA1GD,8DAA0D;AAC1D,uDAA+D;AAC/D,6DAAmG;AACnG,gEAAwC;AACxC,yCAA6C;AAE7C;;;;;;GAMG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6DG;AACI,KAAK,UAAU,oBAAoB,CACtC,OAAgB,EAChB,QAAkB;IAElB,MAAM,aAAa,GAAI,OAAe,CAAC,aAAa,IAAI,KAAK,CAAC;IAC9D,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,iCAAiC,CAAC,CAAC;IAEjE,IAAI,CAAC;QACD,MAAM,WAAW,GAAG,IAAA,kCAAqB,EAAC,OAAO,CAAC,CAAC;QAEnD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;YACvB,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,+BAA+B,EAAE,EAAE,KAAK,EAAE,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;YAC5F,OAAO,IAAA,gCAAgB,EAAC,QAAQ,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;QACzD,CAAC;QAED,MAAM,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC;QAChC,MAAM,WAAW,GAAG,MAAM,0BAAW,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAElE,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,uCAAuC,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAC/F,OAAO,IAAA,2BAAW,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IAE9C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,IAAI,KAAK,YAAY,sBAAa,EAAE,CAAC;YACjC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,kBAAkB,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC3E,OAAO,IAAA,4BAAY,EAAC,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QACjD,CAAC;QAED,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,kCAAkC,EAAE,KAAK,CAAC,CAAC;QACzE,OAAO,IAAA,yBAAS,EAAC,QAAQ,EAAE,0DAA0D,EAAE,GAAG,CAAC,CAAC;IAChG,CAAC;AACL,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { extractAndVerifyToken } from '../../utils/token.util';\r\nimport { sendUnauthorized, sendNotFound, sendSuccess, sendError } from '../../utils/response.util';\r\nimport Logger from '../../utils/logger';\r\nimport { NotFoundError } from '../../errors';\r\n\r\n/**\r\n * Controller function to retrieve the authenticated user's profile\r\n * Extracts user ID from JWT token and fetches user details\r\n * @param request - Express request object containing JWT in authorization header\r\n * @param response - Express response object\r\n * @returns Response with user profile data or appropriate error message\r\n */\r\n\r\n/**\r\n * @openapi\r\n * /auth/profile:\r\n *   get:\r\n *     summary: Retrieve authenticated user's profile\r\n *     description: Fetches the profile details of the currently authenticated user using JWT token\r\n *     tags:\r\n *       - Authentication\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Successful response with user profile\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/User'\r\n *       401:\r\n *         description: Unauthorized - invalid or missing token\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 error:\r\n *                   type: string\r\n *                 message:\r\n *                   type: string\r\n *       404:\r\n *         description: User not found\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 error:\r\n *                   type: string\r\n *                 message:\r\n *                   type: string\r\n *       500:\r\n *         description: Internal server error\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 error:\r\n *                   type: string\r\n *                 message:\r\n *                   type: string\r\n */\r\nexport async function getProfileController(\r\n    request: Request,\r\n    response: Response\r\n) {\r\n    const correlationId = (request as any).correlationId || 'N/A';\r\n    Logger.debug(`[${correlationId}] Get profile controller called`);\r\n    \r\n    try {\r\n        const tokenResult = extractAndVerifyToken(request);\r\n        \r\n        if (!tokenResult.success) {\r\n            Logger.warn(`[${correlationId}] Unauthorized access attempt`, { error: tokenResult.error });\r\n            return sendUnauthorized(response, tokenResult.error);\r\n        }\r\n        \r\n        const { decoded } = tokenResult;\r\n        const userProfile = await AuthService.getUserProfile(decoded.sub);\r\n        \r\n        Logger.info(`[${correlationId}] User profile retrieved successfully`, { userId: decoded.sub });\r\n        return sendSuccess(response, userProfile);\r\n        \r\n    } catch (error) {\r\n        if (error instanceof NotFoundError) {\r\n            Logger.warn(`[${correlationId}] User not found`, { error: error.message });\r\n            return sendNotFound(response, error.message);\r\n        }\r\n        \r\n        Logger.error(`[${correlationId}] Error in getProfileController:`, error);\r\n        return sendError(response, \"Failed to retrieve user profile. Please try again later.\", 500);\r\n    }\r\n}"]}