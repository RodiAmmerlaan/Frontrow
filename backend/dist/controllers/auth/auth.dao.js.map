{"version":3,"file":"auth.dao.js","sourceRoot":"","sources":["../../../src/controllers/auth/auth.dao.ts"],"names":[],"mappings":";;AAWA,0CAEC;AAOD,oCAEC;AAMD,4CAEC;AAcD,oCAYC;AAxDD,8EAA2E;AAC3E,8FAA2F;AAE3F,MAAM,cAAc,GAAG,IAAI,uCAAkB,EAAE,CAAC;AAChD,MAAM,sBAAsB,GAAG,IAAI,uDAA0B,EAAE,CAAC;AAEhE;;;;GAIG;AACI,KAAK,UAAU,eAAe,CAAC,KAAa;IAC/C,OAAO,MAAM,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACnD,CAAC;AAAA,CAAC;AAEF;;;;GAIG;AACI,KAAK,UAAU,YAAY,CAAC,EAAU;IACzC,OAAO,MAAM,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC7C,CAAC;AAAA,CAAC;AAEF;;;GAGG;AACI,KAAK,UAAU,gBAAgB;IAClC,OAAO,MAAM,sBAAsB,CAAC,eAAe,EAAE,CAAC;AAC1D,CAAC;AAAA,CAAC;AAEF;;;;;;;;;;;GAWG;AACI,KAAK,UAAU,YAAY,CAAC,KAAa,EAAE,QAAgB,EAAE,UAAkB,EAAE,SAAiB,EAAE,MAAc,EAAE,YAAoB,EAAE,WAAmB,EAAE,IAAY;IAC9K,OAAO,MAAM,cAAc,CAAC,YAAY,CAAC;QACrC,KAAK,EAAE,KAAK;QACZ,QAAQ,EAAE,QAAQ;QAClB,UAAU,EAAE,UAAU;QACtB,SAAS,EAAE,SAAS;QACpB,MAAM,EAAE,MAAM;QACd,YAAY,EAAE,YAAY;QAC1B,WAAW,EAAE,WAAW;QACxB,IAAI,EAAE,IAAI;QACV,IAAI,EAAE,MAAM;KACf,CAAC,CAAC;AACP,CAAC","sourcesContent":["import { UserRepositoryImpl } from \"../../repositories/UserRepositoryImpl\";\r\nimport { RefreshTokenRepositoryImpl } from \"../../repositories/RefreshTokenRepositoryImpl\";\r\n\r\nconst userRepository = new UserRepositoryImpl();\r\nconst refreshTokenRepository = new RefreshTokenRepositoryImpl();\r\n\r\n/**\r\n * Finds a user by their email address\r\n * @param email - The email address of the user to find\r\n * @returns A promise that resolves to the user object or null if not found\r\n */\r\nexport async function findUserByEmail(email: string) {\r\n    return await userRepository.findByEmail(email);\r\n};\r\n\r\n/**\r\n * Finds a user by their unique ID\r\n * @param id - The unique identifier of the user\r\n * @returns A promise that resolves to the user object or null if not found\r\n */\r\nexport async function findUserById(id: string) {\r\n    return await userRepository.findById(id);\r\n};\r\n\r\n/**\r\n * Retrieves all valid (non-revoked) refresh tokens\r\n * @returns A promise that resolves to an array of valid refresh tokens\r\n */\r\nexport async function getRefreshTokens() {\r\n    return await refreshTokenRepository.findValidTokens();\r\n};\r\n\r\n/**\r\n * Registers a new user in the database\r\n * @param email - The user's email address\r\n * @param password - The hashed password\r\n * @param first_name - The user's first name\r\n * @param last_name - The user's last name\r\n * @param street - The user's street address\r\n * @param house_number - The user's house number\r\n * @param postal_code - The user's postal code\r\n * @param city - The user's city\r\n * @returns A promise that resolves to the created or updated user\r\n */\r\nexport async function registerUser(email: string, password: string, first_name: string, last_name: string, street: string, house_number: string, postal_code: string, city: string) {\r\n    return await userRepository.findOrCreate({\r\n        email: email,\r\n        password: password,\r\n        first_name: first_name,\r\n        last_name: last_name,\r\n        street: street,\r\n        house_number: house_number,\r\n        postal_code: postal_code,\r\n        city: city,\r\n        role: 'USER'\r\n    });\r\n}"]}