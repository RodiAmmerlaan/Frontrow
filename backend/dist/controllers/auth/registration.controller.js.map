{"version":3,"file":"registration.controller.js","sourceRoot":"","sources":["../../../src/controllers/auth/registration.controller.ts"],"names":[],"mappings":";;;;;AAwGA,wDAoCC;AA3ID,qCAA4C;AAC5C,6DAAwE;AACxE,8DAA0D;AAC1D,gEAAwC;AACxC,yCAAmF;AAEnF;;;;;;GAMG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwFG;AACI,KAAK,UAAU,sBAAsB,CACxC,OAAgB,EAChB,QAAkB;IAElB,MAAM,aAAa,GAAI,OAAe,CAAC,aAAa,IAAI,KAAK,CAAC;IAC9D,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,kCAAkC,EAAE;QAC9D,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK;KAC5B,CAAC,CAAC;IAEH,IAAI,CAAC;QACD,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;QAEzG,MAAM,UAAU,GAAG,MAAM,0BAAW,CAAC,YAAY,CAAC;YAC9C,KAAK;YACL,QAAQ;YACR,UAAU;YACV,SAAS;YACT,MAAM;YACN,YAAY;YACZ,WAAW;YACX,IAAI;SACP,CAAC,CAAC;QAEH,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,gCAAgC,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QAC1E,IAAA,yBAAgB,EAAC,QAAQ,EAAE,UAAU,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QACxD,OAAO,IAAA,2BAAW,EAAC,QAAQ,EAAE,EAAE,YAAY,EAAE,UAAU,CAAC,WAAW,EAAE,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;IAC3F,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QAClB,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,uBAAuB,EAAE,KAAK,CAAC,CAAC;QAC9D,IAAI,KAAK,YAAY,sBAAa,EAAE,CAAC;YACjC,OAAO,IAAA,8BAAc,EAAC,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QACnD,CAAC;QACD,IAAI,KAAK,YAAY,wBAAe,EAAE,CAAC;YACnC,OAAO,IAAA,8BAAc,EAAC,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QACnD,CAAC;QACD,OAAO,IAAA,8BAAc,EAAC,QAAQ,EAAE,kDAAkD,CAAC,CAAC;IACxF,CAAC;AACL,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\nimport { setRefreshCookie } from './cookie';\r\nimport { sendBadRequest, sendSuccess } from '../../utils/response.util';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport Logger from '../../utils/logger';\r\nimport { ConflictError, ValidationError, InternalServerError } from '../../errors';\r\n\r\n/**\r\n * Controller function to handle user registration\r\n * Creates a new user account and issues authentication tokens\r\n * @param request - Express request object containing user registration data in body\r\n * @param response - Express response object\r\n * @returns Response with access token and refresh cookie, or error message\r\n */\r\n\r\n/**\r\n * @openapi\r\n * /auth/register:\r\n *   post:\r\n *     summary: User registration\r\n *     description: Creates a new user account and issues authentication tokens\r\n *     tags:\r\n *       - Authentication\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - email\r\n *               - password\r\n *               - first_name\r\n *               - last_name\r\n *               - street\r\n *               - house_number\r\n *               - postal_code\r\n *               - city\r\n *             properties:\r\n *               email:\r\n *                 type: string\r\n *                 format: email\r\n *               password:\r\n *                 type: string\r\n *                 format: password\r\n *               first_name:\r\n *                 type: string\r\n *               last_name:\r\n *                 type: string\r\n *               street:\r\n *                 type: string\r\n *               house_number:\r\n *                 type: string\r\n *               postal_code:\r\n *                 type: string\r\n *               city:\r\n *                 type: string\r\n *     responses:\r\n *       201:\r\n *         description: Successful registration\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     access_token:\r\n *                       type: string\r\n *         headers:\r\n *           Set-Cookie:\r\n *             description: Refresh token cookie\r\n *             schema:\r\n *               type: string\r\n *       400:\r\n *         description: Bad request - validation error\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 error:\r\n *                   type: string\r\n *                 message:\r\n *                   type: string\r\n *       409:\r\n *         description: Conflict - user already exists\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 error:\r\n *                   type: string\r\n *                 message:\r\n *                   type: string\r\n */\r\nexport async function registrationController(\r\n    request: Request,\r\n    response: Response\r\n) {\r\n    const correlationId = (request as any).correlationId || 'N/A';\r\n    Logger.debug(`[${correlationId}] Registration controller called`, { \r\n        email: request.body.email \r\n    });\r\n    \r\n    try {\r\n        const { email, password, first_name, last_name, street, house_number, postal_code, city } = request.body;\r\n        \r\n        const authResult = await AuthService.registerUser({\r\n            email,\r\n            password,\r\n            first_name,\r\n            last_name,\r\n            street,\r\n            house_number,\r\n            postal_code,\r\n            city\r\n        });\r\n\r\n        Logger.info(`[${correlationId}] User registered successfully`, { email });\r\n        setRefreshCookie(response, authResult.refreshToken, 30);\r\n        return sendSuccess(response, { access_token: authResult.accessToken }, undefined, 201);\r\n    } catch (error: any) {\r\n        Logger.error(`[${correlationId}] Registration error:`, error);\r\n        if (error instanceof ConflictError) {\r\n            return sendBadRequest(response, error.message);\r\n        }\r\n        if (error instanceof ValidationError) {\r\n            return sendBadRequest(response, error.message);\r\n        }\r\n        return sendBadRequest(response, 'Failed to register user. Please try again later.');\r\n    }\r\n}"]}