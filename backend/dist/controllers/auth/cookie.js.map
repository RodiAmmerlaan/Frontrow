{"version":3,"file":"cookie.js","sourceRoot":"","sources":["../../../src/controllers/auth/cookie.ts"],"names":[],"mappings":";;AAQA,4CAQC;AAMD,gDAEC;AAOD,4CAEC;AA/BD;;;;;GAKG;AACH,SAAgB,gBAAgB,CAAC,QAAkB,EAAE,QAAgB,EAAE,UAAkB;IACrF,QAAQ,CAAC,MAAM,CAAC,eAAe,EAAE,QAAQ,EAAE;QACvC,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,KAAK;QACb,QAAQ,EAAE,KAAK;QACf,MAAM,EAAE,UAAU,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;QACxC,IAAI,EAAE,OAAO;KAChB,CAAC,CAAC;AACP,CAAC;AAED;;;GAGG;AACH,SAAgB,kBAAkB,CAAC,QAAkB;IACjD,QAAQ,CAAC,WAAW,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;AAC7D,CAAC;AAED;;;;GAIG;AACH,SAAgB,gBAAgB,CAAC,OAAgB;IAC7C,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;AACtE,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\n\r\n/**\r\n * Sets a refresh token cookie in the response\r\n * @param response - Express response object\r\n * @param rawToken - The refresh token to store in the cookie\r\n * @param maxAgeDays - The number of days until the cookie expires\r\n */\r\nexport function setRefreshCookie(response: Response, rawToken: string, maxAgeDays: number) {\r\n    response.cookie('refresh_token', rawToken, {\r\n        httpOnly: true,\r\n        secure: false,\r\n        sameSite: 'lax',\r\n        maxAge: maxAgeDays * 24 * 60 * 60 * 1000,\r\n        path: '/auth'\r\n    });\r\n}\r\n\r\n/**\r\n * Clears the refresh token cookie from the response\r\n * @param response - Express response object\r\n */\r\nexport function clearRefreshCookie(response: Response) {\r\n    response.clearCookie('refresh_token', { path: '/auth' });\r\n}\r\n\r\n/**\r\n * Extracts the refresh token from the request cookies\r\n * @param request - Express request object\r\n * @returns The refresh token if found, or null if not present\r\n */\r\nexport function getRefreshCookie(request: Request) {\r\n    return request.headers.cookie?.split(\"refresh_token=\")[1] || null;\r\n}"]}