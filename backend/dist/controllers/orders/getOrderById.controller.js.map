{"version":3,"file":"getOrderById.controller.js","sourceRoot":"","sources":["../../../src/controllers/orders/getOrderById.controller.ts"],"names":[],"mappings":";;;;;;AACA,kEAA8D;AAC9D,sDAAmD;AACnD,gEAAwC;AACxC,yCAAmF;AAEnF,MAAa,sBAAuB,SAAQ,+BAAc;IACtD;;;;;OAKG;IAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAkFG;IACI,KAAK,CAAC,YAAY,CACrB,OAAgB,EAChB,QAAkB;QAElB,MAAM,aAAa,GAAI,OAAe,CAAC,aAAa,IAAI,KAAK,CAAC;QAC9D,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;QACnC,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,qCAAqC,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;QAElF,IAAI,CAAC;YACD,MAAM,KAAK,GAAG,MAAM,8BAAa,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAExD,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,gCAAgC,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;YAC5E,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC7C,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YAClB,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAE3E,IAAI,KAAK,YAAY,sBAAa,EAAE,CAAC;gBACjC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,mBAAmB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;gBAC/D,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC3C,CAAC;YAED,IAAI,KAAK,YAAY,wBAAe,EAAE,CAAC;gBACnC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,oBAAoB,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC7E,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7C,CAAC;YAED,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,8CAA8C,CAAC,CAAC;YAC9E,IAAI,CAAC,wBAAwB,CAAC,0BAA0B,CAAC,CAAC;QAC9D,CAAC;IACL,CAAC;CACJ;AAzHD,wDAyHC;AAEY,QAAA,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC;AACtD,QAAA,YAAY,GAAG,8BAAsB,CAAC,YAAY,CAAC,IAAI,CAAC,8BAAsB,CAAC,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\nimport { OrdersService } from '../../services/orders.service';\r\nimport { BaseController } from '../BaseController';\r\nimport Logger from '../../utils/logger';\r\nimport { NotFoundError, ValidationError, InternalServerError } from '../../errors';\r\n\r\nexport class GetOrderByIdController extends BaseController {\r\n    /**\r\n     * Controller function to retrieve order details by ID\r\n     * @param request - Express request object containing order ID in params\r\n     * @param response - Express response object\r\n     * @returns Response with order details or appropriate error message\r\n     */\r\n    \r\n    /**\r\n     * @openapi\r\n     * /orders/{orderId}:\r\n     *   get:\r\n     *     summary: Retrieve order details by ID\r\n     *     description: Fetches detailed information about a specific order by its ID\r\n     *     tags:\r\n     *       - Orders\r\n     *     security:\r\n     *       - bearerAuth: []\r\n     *     parameters:\r\n     *       - in: path\r\n     *         name: orderId\r\n     *         required: true\r\n     *         schema:\r\n     *           type: string\r\n     *           format: uuid\r\n     *         description: The order ID\r\n     *     responses:\r\n     *       200:\r\n     *         description: Successful response with order details\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 data:\r\n     *                   $ref: '#/components/schemas/Order'\r\n     *       400:\r\n     *         description: Bad request - validation error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       401:\r\n     *         description: Unauthorized\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       404:\r\n     *         description: Order not found\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       500:\r\n     *         description: Internal server error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     */\r\n    public async getOrderById(\r\n        request: Request,\r\n        response: Response\r\n    ) {\r\n        const correlationId = (request as any).correlationId || 'N/A';\r\n        const { orderId } = request.params;\r\n        Logger.debug(`[${correlationId}] Get order by ID controller called`, { orderId });\r\n        \r\n        try {\r\n            const order = await OrdersService.getOrderById(orderId);\r\n            \r\n            Logger.info(`[${correlationId}] Order retrieved successfully`, { orderId });\r\n            return this.sendSuccess(response, order);\r\n        } catch (error: any) {\r\n            Logger.error(`[${correlationId}] Error in getOrderByIdController:`, error);\r\n            \r\n            if (error instanceof NotFoundError) {\r\n                Logger.warn(`[${correlationId}] Order not found`, { orderId });\r\n                this.throwNotFoundError(error.message);\r\n            }\r\n            \r\n            if (error instanceof ValidationError) {\r\n                Logger.warn(`[${correlationId}] Validation error`, { error: error.message });\r\n                this.throwBadRequestError(error.message);\r\n            }\r\n            \r\n            Logger.error(`[${correlationId}] Unexpected error in getOrderByIdController`);\r\n            this.throwInternalServerError('Failed to retrieve order');\r\n        }\r\n    }\r\n}\r\n\r\nexport const getOrderByIdController = new GetOrderByIdController();\r\nexport const getOrderById = getOrderByIdController.getOrderById.bind(getOrderByIdController);"]}