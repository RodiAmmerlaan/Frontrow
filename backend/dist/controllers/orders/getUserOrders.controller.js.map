{"version":3,"file":"getUserOrders.controller.js","sourceRoot":"","sources":["../../../src/controllers/orders/getUserOrders.controller.ts"],"names":[],"mappings":";;;;;;AACA,kEAA8D;AAC9D,sDAAmD;AACnD,gEAAwC;AACxC,yCAAmF;AAEnF,MAAa,uBAAwB,SAAQ,+BAAc;IACvD;;;;;OAKG;IAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAuFG;IACI,KAAK,CAAC,aAAa,CACtB,OAAgB,EAChB,QAAkB;QAElB,MAAM,aAAa,GAAI,OAAe,CAAC,aAAa,IAAI,KAAK,CAAC;QAC9D,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;QAClC,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,qCAAqC,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QAEjF,IAAI,CAAC;YACD,MAAM,MAAM,GAAG,MAAM,8BAAa,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAEzD,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,sCAAsC,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;YACvG,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QAClD,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YAClB,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAE5E,IAAI,KAAK,YAAY,wBAAe,EAAE,CAAC;gBACnC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,oBAAoB,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC7E,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7C,CAAC;YAED,IAAI,KAAK,YAAY,sBAAa,EAAE,CAAC;gBACjC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,mBAAmB,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC5E,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC3C,CAAC;YAED,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,+CAA+C,CAAC,CAAC;YAC/E,IAAI,CAAC,wBAAwB,CAAC,gCAAgC,CAAC,CAAC;QACpE,CAAC;IACL,CAAC;CACJ;AA9HD,0DA8HC;AAEY,QAAA,uBAAuB,GAAG,IAAI,uBAAuB,EAAE,CAAC;AACxD,QAAA,aAAa,GAAG,+BAAuB,CAAC,aAAa,CAAC,IAAI,CAAC,+BAAuB,CAAC,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\nimport { OrdersService } from '../../services/orders.service';\r\nimport { BaseController } from '../BaseController';\r\nimport Logger from '../../utils/logger';\r\nimport { NotFoundError, ValidationError, InternalServerError } from '../../errors';\r\n\r\nexport class GetUserOrdersController extends BaseController {\r\n    /**\r\n     * Controller function to retrieve all orders for a specific user\r\n     * @param request - Express request object containing user ID in params\r\n     * @param response - Express response object\r\n     * @returns Response with user orders or appropriate error message\r\n     */\r\n    \r\n    /**\r\n     * @openapi\r\n     * /orders/user/{userId}:\r\n     *   get:\r\n     *     summary: Retrieve all orders for a specific user\r\n     *     description: Fetches all orders associated with a specific user ID\r\n     *     tags:\r\n     *       - Orders\r\n     *     security:\r\n     *       - bearerAuth: []\r\n     *     parameters:\r\n     *       - in: path\r\n     *         name: userId\r\n     *         required: true\r\n     *         schema:\r\n     *           type: string\r\n     *           format: uuid\r\n     *         description: The user ID\r\n     *     responses:\r\n     *       200:\r\n     *         description: Successful response with user orders\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 data:\r\n     *                   type: object\r\n     *                   properties:\r\n     *                     orders:\r\n     *                       type: array\r\n     *                       items:\r\n     *                         $ref: '#/components/schemas/Order'\r\n     *       400:\r\n     *         description: Bad request - validation error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       401:\r\n     *         description: Unauthorized\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       404:\r\n     *         description: User orders not found\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       500:\r\n     *         description: Internal server error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     */\r\n    public async getUserOrders(\r\n        request: Request,\r\n        response: Response\r\n    ) {\r\n        const correlationId = (request as any).correlationId || 'N/A';\r\n        const { userId } = request.params;\r\n        Logger.debug(`[${correlationId}] Get user orders controller called`, { userId });\r\n        \r\n        try {\r\n            const orders = await OrdersService.getUserOrders(userId);\r\n            \r\n            Logger.info(`[${correlationId}] User orders retrieved successfully`, { userId, count: orders.length });\r\n            return this.sendSuccess(response, { orders });\r\n        } catch (error: any) {\r\n            Logger.error(`[${correlationId}] Error in getUserOrdersController:`, error);\r\n            \r\n            if (error instanceof ValidationError) {\r\n                Logger.warn(`[${correlationId}] Validation error`, { error: error.message });\r\n                this.throwBadRequestError(error.message);\r\n            }\r\n            \r\n            if (error instanceof NotFoundError) {\r\n                Logger.warn(`[${correlationId}] Not found error`, { error: error.message });\r\n                this.throwNotFoundError(error.message);\r\n            }\r\n            \r\n            Logger.error(`[${correlationId}] Unexpected error in getUserOrdersController`);\r\n            this.throwInternalServerError('Failed to retrieve user orders');\r\n        }\r\n    }\r\n}\r\n\r\nexport const getUserOrdersController = new GetUserOrdersController();\r\nexport const getUserOrders = getUserOrdersController.getUserOrders.bind(getUserOrdersController);"]}