{"version":3,"file":"buyTickets.controller.js","sourceRoot":"","sources":["../../../src/controllers/orders/buyTickets.controller.ts"],"names":[],"mappings":";;;;;;AACA,kEAA8D;AAC9D,sDAAmD;AACnD,gEAAwC;AACxC,yCAAoG;AAEpG,MAAa,oBAAqB,SAAQ,+BAAc;IACpD;;;;;;OAMG;IAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA6GG;IACI,KAAK,CAAC,UAAU,CACnB,OAAgB,EAChB,QAAkB;QAElB,MAAM,aAAa,GAAI,OAAe,CAAC,aAAa,IAAI,KAAK,CAAC;QAC9D,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;QACzD,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,iCAAiC,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC,CAAC;QAEtG,IAAI,CAAC;YACD,MAAM,OAAO,GAAG,MAAM,8BAAa,CAAC,qBAAqB,CAAC,QAAQ,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;YAC3F,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,0CAA0C,EAAE;gBACrE,QAAQ;gBACR,OAAO;gBACP,YAAY;aACf,CAAC,CAAC;YACH,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;QAC5E,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YAClB,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAE5E,IAAI,KAAK,YAAY,wBAAe,EAAE,CAAC;gBACnC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,wCAAwC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBACjG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7C,CAAC;YAED,IAAI,KAAK,YAAY,sBAAa,EAAE,CAAC;gBACjC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,sCAAsC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC/F,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC3C,CAAC;YAED,IAAI,KAAK,YAAY,wBAAe,EAAE,CAAC;gBACnC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,uCAAuC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBAChG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7C,CAAC;YAED,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,uCAAuC,CAAC,CAAC;YACvE,IAAI,CAAC,wBAAwB,CAAC,4DAA4D,CAAC,CAAC;QAChG,CAAC;IACL,CAAC;CACJ;AA7JD,oDA6JC;AAEY,QAAA,oBAAoB,GAAG,IAAI,oBAAoB,EAAE,CAAC;AAClD,QAAA,UAAU,GAAG,4BAAoB,CAAC,UAAU,CAAC,IAAI,CAAC,4BAAoB,CAAC,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\nimport { OrdersService } from '../../services/orders.service';\r\nimport { BaseController } from '../BaseController';\r\nimport Logger from '../../utils/logger';\r\nimport { NotFoundError, BadRequestError, ValidationError, InternalServerError } from '../../errors';\r\n\r\nexport class BuyTicketsController extends BaseController {\r\n    /**\r\n     * Controller function to handle ticket purchases\r\n     * Creates an order and associated tickets for a user\r\n     * @param request - Express request object containing event_id, user_id, and total_amount in body\r\n     * @param response - Express response object\r\n     * @returns Response with created tickets or appropriate error message\r\n     */\r\n    \r\n    /**\r\n     * @openapi\r\n     * /orders/buy:\r\n     *   post:\r\n     *     summary: Purchase tickets for an event\r\n     *     description: Creates an order and associated tickets for a user\r\n     *     tags:\r\n     *       - Orders\r\n     *     security:\r\n     *       - bearerAuth: []\r\n     *     requestBody:\r\n     *       required: true\r\n     *       content:\r\n     *         application/json:\r\n     *           schema:\r\n     *             type: object\r\n     *             required:\r\n     *               - event_id\r\n     *               - user_id\r\n     *               - total_amount\r\n     *             properties:\r\n     *               event_id:\r\n     *                 type: string\r\n     *                 format: uuid\r\n     *               user_id:\r\n     *                 type: string\r\n     *                 format: uuid\r\n     *               total_amount:\r\n     *                 type: integer\r\n     *                 minimum: 1\r\n     *     responses:\r\n     *       201:\r\n     *         description: Tickets purchased successfully\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 data:\r\n     *                   type: object\r\n     *                   properties:\r\n     *                     tickets:\r\n     *                       type: array\r\n     *                       items:\r\n     *                         type: object\r\n     *                         properties:\r\n     *                           id:\r\n     *                             type: string\r\n     *                             format: uuid\r\n     *                           order_id:\r\n     *                             type: string\r\n     *                             format: uuid\r\n     *                           event_id:\r\n     *                             type: string\r\n     *                             format: uuid\r\n     *       400:\r\n     *         description: Bad request - validation error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       401:\r\n     *         description: Unauthorized\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       404:\r\n     *         description: Event not found\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       500:\r\n     *         description: Internal server error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     */\r\n    public async buyTickets(\r\n        request: Request,\r\n        response: Response\r\n    ) {\r\n        const correlationId = (request as any).correlationId || 'N/A';\r\n        const { event_id, user_id, total_amount } = request.body;\r\n        Logger.debug(`[${correlationId}] Buy tickets controller called`, { event_id, user_id, total_amount });\r\n        \r\n        try {\r\n            const tickets = await OrdersService.processTicketPurchase(event_id, user_id, total_amount);\r\n            Logger.info(`[${correlationId}] Successfully processed ticket purchase`, { \r\n                event_id, \r\n                user_id, \r\n                total_amount \r\n            });\r\n            return this.sendSuccess(response, { tickets: tickets }, undefined, 201);\r\n        } catch (error: any) {\r\n            Logger.error(`[${correlationId}] Error processing ticket purchase:`, error);\r\n            \r\n            if (error instanceof BadRequestError) {\r\n                Logger.warn(`[${correlationId}] Bad request error in ticket purchase`, { error: error.message });\r\n                this.throwBadRequestError(error.message);\r\n            }\r\n            \r\n            if (error instanceof NotFoundError) {\r\n                Logger.warn(`[${correlationId}] Not found error in ticket purchase`, { error: error.message });\r\n                this.throwNotFoundError(error.message);\r\n            }\r\n            \r\n            if (error instanceof ValidationError) {\r\n                Logger.warn(`[${correlationId}] Validation error in ticket purchase`, { error: error.message });\r\n                this.throwBadRequestError(error.message);\r\n            }\r\n            \r\n            Logger.error(`[${correlationId}] Unexpected error in ticket purchase`);\r\n            this.throwInternalServerError(\"Failed to process ticket purchase. Please try again later.\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const buyTicketsController = new BuyTicketsController();\r\nexport const buyTickets = buyTicketsController.buyTickets.bind(buyTicketsController);"]}