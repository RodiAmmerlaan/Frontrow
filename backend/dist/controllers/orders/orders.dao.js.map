{"version":3,"file":"orders.dao.js","sourceRoot":"","sources":["../../../src/controllers/orders/orders.dao.ts"],"names":[],"mappings":";;AAiBA,gCAMC;AASD,sCAQC;AAOD,kCASC;AAOD,oCAWC;AA1ED,gFAA6E;AAC7E,kFAA+E;AAC/E,8EAA2E;AAC3E,gFAA6E;AAE7E,MAAM,eAAe,GAAG,IAAI,yCAAmB,EAAE,CAAC;AAClD,MAAM,gBAAgB,GAAG,IAAI,2CAAoB,EAAE,CAAC;AACpD,MAAM,cAAc,GAAG,IAAI,uCAAkB,EAAE,CAAC;AAChD,MAAM,eAAe,GAAG,IAAI,yCAAmB,EAAE,CAAC;AAElD;;;;;;GAMG;AACI,KAAK,UAAU,UAAU,CAAC,QAAgB,EAAE,OAAe,EAAE,YAAoB;IACpF,OAAO,MAAM,eAAe,CAAC,MAAM,CAAC;QAChC,OAAO,EAAE,OAAO;QAChB,QAAQ,EAAE,QAAQ;QAClB,YAAY,EAAE,YAAY;KAC7B,CAAC,CAAC;AACP,CAAC;AAAA,CAAC;AAEF;;;;;;GAMG;AACI,KAAK,UAAU,aAAa,CAAC,QAAgB,EAAE,OAAe,EAAE,MAAc;IACjF,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC1D,QAAQ,EAAE,QAAQ;QAClB,WAAW,EAAE,OAAO;QACpB,aAAa,EAAE,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE;KAC1E,CAAC,CAAC,CAAC;IAEJ,OAAO,MAAM,gBAAgB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;AAC1D,CAAC;AAED;;;;GAIG;AACI,KAAK,UAAU,WAAW,CAAC,OAAe;IAC7C,MAAM,IAAI,GAAG,MAAM,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACpD,IAAI,CAAC,IAAI;QAAE,OAAO,IAAI,CAAC;IAEvB,OAAO;QACH,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,UAAU,EAAE,IAAI,CAAC,UAAU;QAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;KAC5B,CAAC;AACN,CAAC;AAED;;;;GAIG;AACI,KAAK,UAAU,YAAY,CAAC,QAAgB;IAC/C,MAAM,KAAK,GAAG,MAAM,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACvD,IAAI,CAAC,KAAK;QAAE,OAAO,IAAI,CAAC;IAExB,OAAO;QACH,EAAE,EAAE,KAAK,CAAC,EAAE;QACZ,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,WAAW,EAAE,KAAK,CAAC,WAAW;QAC9B,UAAU,EAAE,KAAK,CAAC,UAAU;QAC5B,QAAQ,EAAE,KAAK,CAAC,QAAQ;KAC3B,CAAC;AACN,CAAC","sourcesContent":["import { OrderRepositoryImpl } from \"../../repositories/OrderRepositoryImpl\";\r\nimport { TicketRepositoryImpl } from \"../../repositories/TicketRepositoryImpl\";\r\nimport { UserRepositoryImpl } from \"../../repositories/UserRepositoryImpl\";\r\nimport { EventRepositoryImpl } from \"../../repositories/EventRepositoryImpl\";\r\n\r\nconst orderRepository = new OrderRepositoryImpl();\r\nconst ticketRepository = new TicketRepositoryImpl();\r\nconst userRepository = new UserRepositoryImpl();\r\nconst eventRepository = new EventRepositoryImpl();\r\n\r\n/**\r\n * Creates a new order for ticket purchase\r\n * @param event_id - The ID of the event for which tickets are being purchased\r\n * @param user_id - The ID of the user purchasing the tickets\r\n * @param total_amount - The total number of tickets being purchased\r\n * @returns A promise that resolves to the created order\r\n */\r\nexport async function buyTickets(event_id: string, user_id: string, total_amount: number) {\r\n    return await orderRepository.create({\r\n        user_id: user_id,\r\n        event_id: event_id,\r\n        total_amount: total_amount\r\n    });\r\n};\r\n\r\n/**\r\n * Creates multiple tickets for an order\r\n * @param order_id - The ID of the order for which tickets are being created\r\n * @param user_id - The ID of the user who will own the tickets\r\n * @param amount - The number of tickets to create\r\n * @returns A promise that resolves to an array of created tickets\r\n */\r\nexport async function createTickets(order_id: string, user_id: string, amount: number) {\r\n    const ticketsData = Array.from({ length: amount }, (_, i) => ({\r\n        order_id: order_id,\r\n        assigned_to: user_id,\r\n        ticket_number: \"T-\" + order_id.split(\"-\")[0] + \"-\" + (i + 1).toString()\r\n    }));\r\n    \r\n    return await ticketRepository.createMany(ticketsData);\r\n}\r\n\r\n/**\r\n * Retrieves user information by user ID\r\n * @param user_id - The ID of the user to retrieve\r\n * @returns A promise that resolves to the user's email, first name, and last name, or null if not found\r\n */\r\nexport async function getUserById(user_id: string) {\r\n    const user = await userRepository.findById(user_id);\r\n    if (!user) return null;\r\n    \r\n    return {\r\n        email: user.email,\r\n        first_name: user.first_name,\r\n        last_name: user.last_name\r\n    };\r\n}\r\n\r\n/**\r\n * Retrieves event information by event ID\r\n * @param event_id - The ID of the event to retrieve\r\n * @returns A promise that resolves to the event's details, or null if not found\r\n */\r\nexport async function getEventById(event_id: string) {\r\n    const event = await eventRepository.findById(event_id);\r\n    if (!event) return null;\r\n    \r\n    return {\r\n        id: event.id,\r\n        title: event.title,\r\n        description: event.description,\r\n        start_time: event.start_time,\r\n        end_time: event.end_time\r\n    };\r\n}"]}