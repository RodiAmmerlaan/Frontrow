{"version":3,"file":"events.dao.js","sourceRoot":"","sources":["../../../src/controllers/events/events.dao.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventRepositoryImpl } from \"../../repositories/EventRepositoryImpl\";\r\nimport { TicketBatchRepositoryImpl } from \"../../repositories/TicketBatchRepositoryImpl\";\r\nimport { OrderRepositoryImpl } from \"../../repositories/OrderRepositoryImpl\";\r\nimport { buildDateFilterWhereClause, DateFilterParams } from \"../../utils/dateFilterUtils\";\r\n\r\nconst eventRepository = new EventRepositoryImpl();\r\nconst ticketBatchRepository = new TicketBatchRepositoryImpl();\r\nconst orderRepository = new OrderRepositoryImpl();\r\n\r\n/**\r\n * Retrieves all events from the database\r\n * @returns A promise that resolves to an array of all events\r\n */\r\nexport async function findAllEvents() {\r\n    return await eventRepository.findAll();\r\n};\r\n\r\n/**\r\n * Finds an event by its title\r\n * @param title - The title of the event to find\r\n * @returns A promise that resolves to the first event matching the title, or null if not found\r\n */\r\nexport async function findEventByTitle(title: string) {\r\n    return await eventRepository.findByTitle(title);\r\n};\r\n\r\n/**\r\n * Searches for events by name using a case-insensitive partial match\r\n * @param searchTerm - The term to search for in event titles\r\n * @returns A promise that resolves to an array of events matching the search term\r\n */\r\nexport async function searchEventsByName(searchTerm: string) {\r\n    return await eventRepository.searchByName(searchTerm);\r\n};\r\n\r\n/**\r\n * Finds an event by its ID with related ticket batches and order counts\r\n * @param eventId - The unique identifier of the event\r\n * @returns A promise that resolves to the event with related data, or null if not found\r\n */\r\nexport async function findEventById(eventId: string) {\r\n    // Note: This method requires a more complex query with includes that isn't directly supported by our repository\r\n    // We'll keep the original implementation for now\r\n    return await eventRepository['prisma'].events.findFirst({\r\n        where: { id: eventId },\r\n        include: {\r\n            TicketBatches: {\r\n                select: {\r\n                    total_tickets: true,\r\n                    price: true\r\n                }\r\n            },\r\n            _count: {\r\n                select: {\r\n                    Orders: true\r\n                }\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Creates a new event or updates an existing one if the title already exists\r\n * @param title - The title of the event\r\n * @param description - The description of the event\r\n * @param date - The date of the event in YYYY-MM-DD format\r\n * @param start_time - The start time of the event in HH:MM format\r\n * @param end_time - The end time of the event in HH:MM format\r\n * @returns A promise that resolves to the created or updated event\r\n */\r\nexport async function createEvent(title: string, description: string, date: string, start_time: Date, end_time: Date) {\r\n    // start_time and end_time are already Date objects, so we can use them directly\r\n    return await eventRepository['prisma'].events.upsert({\r\n        where: { title: title },\r\n        update: {},\r\n        create: {\r\n            title: title,\r\n            description: description,\r\n            start_time: start_time,\r\n            end_time: end_time\r\n        }\r\n    })\r\n};\r\n\r\n/**\r\n * Creates a new ticket batch for an event\r\n * @param event_id - The ID of the event\r\n * @param total_tickets - The total number of tickets in this batch\r\n * @param price - The price per ticket\r\n * @returns A promise that resolves to the created ticket batch\r\n */\r\nexport async function createTicketBatch(event_id: string, total_tickets: number, price: number) {\r\n    return await ticketBatchRepository.create({\r\n        event_id: event_id,\r\n        total_tickets: total_tickets,\r\n        price: price\r\n    });\r\n};\r\n\r\n/**\r\n * Retrieves all events ordered by date, filtering for future events\r\n * @returns A promise that resolves to an array of events\r\n */\r\nexport async function getAllEventsByDate() {\r\n    return await eventRepository.findAllByDate();\r\n}\r\n\r\n/**\r\n * Retrieves ticket information for a specific event\r\n * @param eventId - The ID of the event\r\n * @returns A promise that resolves to the ticket batch for the event, or null if not found\r\n */\r\nexport async function getTicketsByEventId(eventId: string) {\r\n    return await ticketBatchRepository.findFirstByEventId(eventId);\r\n}\r\n\r\n/**\r\n * Retrieves all orders for a specific event\r\n * @param eventId - The ID of the event\r\n * @returns A promise that resolves to an array of orders for the event\r\n */\r\nexport async function getOrdersByEventId(eventId: string) {\r\n    return await orderRepository.findByEventId(eventId);\r\n}\r\n\r\n/**\r\n * Retrieves sales overview data for events, grouped by event ID\r\n * @param month - Optional month filter (1-12)\r\n * @param year - Optional year filter\r\n * @returns A promise that resolves to grouped sales data by event\r\n */\r\nexport async function getEventSalesOverview(month?: number, year?: number) {\r\n    const whereClause = buildDateFilterWhereClause({ month, year });\r\n    \r\n    return await orderRepository['prisma'].orders.groupBy({\r\n        by: ['event_id'],\r\n        where: whereClause,\r\n        _count: {\r\n            id: true\r\n        },\r\n        _sum: {\r\n            total_amount: true\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Retrieves detailed sales data for events with related event and user information\r\n * @param month - Optional month filter (1-12)\r\n * @param year - Optional year filter\r\n * @returns A promise that resolves to an array of detailed sales records\r\n */\r\nexport async function getEventSalesDetails(month?: number, year?: number) {\r\n    const whereClause = buildDateFilterWhereClause({ month, year });\r\n    \r\n    return await orderRepository['prisma'].orders.findMany({\r\n        where: whereClause,\r\n        include: {\r\n            Events: {\r\n                select: {\r\n                    id: true,\r\n                    title: true,\r\n                    description: true,\r\n                    start_time: true,\r\n                    end_time: true\r\n                }\r\n            },\r\n            Users: {\r\n                select: {\r\n                    id: true,\r\n                    email: true,\r\n                    first_name: true,\r\n                    last_name: true\r\n                }\r\n            },\r\n            Tickets: true\r\n        },\r\n        orderBy: {\r\n            created_at: 'desc'\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Retrieves user purchase analytics, grouped by user ID\r\n * @param month - Optional month filter (1-12)\r\n * @param year - Optional year filter\r\n * @returns A promise that resolves to grouped purchase analytics by user\r\n */\r\nexport async function getUserPurchaseAnalytics(month?: number, year?: number) {\r\n    const whereClause = buildDateFilterWhereClause({ month, year });\r\n    \r\n    return await orderRepository['prisma'].orders.groupBy({\r\n        by: ['user_id'],\r\n        where: whereClause,\r\n        _count: {\r\n            id: true\r\n        },\r\n        _sum: {\r\n            total_amount: true\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Retrieves detailed user purchase data with related event and user information\r\n * @param month - Optional month filter (1-12)\r\n * @param year - Optional year filter\r\n * @returns A promise that resolves to an array of detailed purchase records\r\n */\r\nexport async function getUserPurchaseDetails(month?: number, year?: number) {\r\n    const whereClause = buildDateFilterWhereClause({ month, year });\r\n    \r\n    return await orderRepository['prisma'].orders.findMany({\r\n        where: whereClause,\r\n        include: {\r\n            Events: {\r\n                select: {\r\n                    id: true,\r\n                    title: true,\r\n                    description: true,\r\n                    start_time: true,\r\n                    end_time: true,\r\n                    TicketBatches: {\r\n                        select: {\r\n                            price: true\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            Users: {\r\n                select: {\r\n                    id: true,\r\n                    email: true,\r\n                    first_name: true,\r\n                    last_name: true\r\n                }\r\n            },\r\n            Tickets: true\r\n        },\r\n        orderBy: {\r\n            created_at: 'desc'\r\n        }\r\n    });\r\n}"]}