{"version":3,"file":"getAllEvents.controller.js","sourceRoot":"","sources":["../../../src/controllers/events/getAllEvents.controller.ts"],"names":[],"mappings":";;;;;;AACA,kEAA8D;AAC9D,sDAAmD;AACnD,gEAAwC;AACxC,yCAAmD;AAEnD,MAAa,sBAAuB,SAAQ,+BAAc;IACtD;;;;;;OAMG;IAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAoDG;IACI,KAAK,CAAC,YAAY,CACrB,OAAgB,EAChB,QAAkB;QAElB,MAAM,aAAa,GAAI,OAAe,CAAC,aAAa,IAAI,KAAK,CAAC;QAC9D,MAAM,EAAE,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,EAAE,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC;QAC/C,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,oCAAoC,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;QAErF,IAAI,CAAC;YACD,MAAM,cAAc,GAAG,MAAM,8BAAa,CAAC,iBAAiB,EAAE,CAAC;YAC/D,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,qCAAqC,EAAE,EAAE,KAAK,EAAE,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC;YACtG,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC;QAClE,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YAClB,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAE3E,IAAI,KAAK,YAAY,4BAAmB,EAAE,CAAC;gBACvC,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,mDAAmD,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC7G,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACjD,CAAC;YAED,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,8CAA8C,CAAC,CAAC;YAC9E,IAAI,CAAC,wBAAwB,CAAC,2BAA2B,CAAC,CAAC;QAC/D,CAAC;IACL,CAAC;CACJ;AAtFD,wDAsFC;AAEY,QAAA,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC;AACtD,QAAA,YAAY,GAAG,8BAAsB,CAAC,YAAY,CAAC,IAAI,CAAC,8BAAsB,CAAC,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\nimport { EventsService } from '../../services/events.service';\r\nimport { BaseController } from '../BaseController';\r\nimport Logger from '../../utils/logger';\r\nimport { InternalServerError } from '../../errors';\r\n\r\nexport class GetAllEventsController extends BaseController {\r\n    /**\r\n     * Controller function to retrieve all events with enriched data\r\n     * Fetches events and includes ticket availability and pricing information\r\n     * @param request - Express request object\r\n     * @param response - Express response object\r\n     * @returns Response with array of enriched events or error message\r\n     */\r\n    \r\n    /**\r\n     * @openapi\r\n     * /events:\r\n     *   get:\r\n     *     summary: Retrieve all events\r\n     *     description: Fetches all events with enriched data including ticket availability and pricing information\r\n     *     tags:\r\n     *       - Events\r\n     *     parameters:\r\n     *       - in: query\r\n     *         name: page\r\n     *         schema:\r\n     *           type: integer\r\n     *           minimum: 1\r\n     *         description: Page number for pagination\r\n     *       - in: query\r\n     *         name: limit\r\n     *         schema:\r\n     *           type: integer\r\n     *           minimum: 1\r\n     *           maximum: 100\r\n     *         description: Number of events per page\r\n     *     responses:\r\n     *       200:\r\n     *         description: Successful response with events data\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 data:\r\n     *                   type: object\r\n     *                   properties:\r\n     *                     events:\r\n     *                       type: array\r\n     *                       items:\r\n     *                         $ref: '#/components/schemas/Event'\r\n     *       500:\r\n     *         description: Internal server error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     */\r\n    public async getAllEvents(\r\n        request: Request,\r\n        response: Response\r\n    ) {\r\n        const correlationId = (request as any).correlationId || 'N/A';\r\n        const { page = 1, limit = 10 } = request.query;\r\n        Logger.debug(`[${correlationId}] Get all events controller called`, { page, limit });\r\n        \r\n        try {\r\n            const enrichedEvents = await EventsService.getEnrichedEvents();\r\n            Logger.info(`[${correlationId}] Successfully retrieved all events`, { count: enrichedEvents.length });\r\n            return this.sendSuccess(response, { events: enrichedEvents });\r\n        } catch (error: any) {\r\n            Logger.error(`[${correlationId}] Error in getAllEventsController:`, error);\r\n            \r\n            if (error instanceof InternalServerError) {\r\n                Logger.error(`[${correlationId}] Internal server error in getAllEventsController`, { error: error.message });\r\n                this.throwInternalServerError(error.message);\r\n            }\r\n            \r\n            Logger.error(`[${correlationId}] Unexpected error in getAllEventsController`);\r\n            this.throwInternalServerError('Failed to retrieve events');\r\n        }\r\n    }\r\n}\r\n\r\nexport const getAllEventsController = new GetAllEventsController();\r\nexport const getAllEvents = getAllEventsController.getAllEvents.bind(getAllEventsController);"]}