{"version":3,"file":"getEventById.controller.js","sourceRoot":"","sources":["../../../src/controllers/events/getEventById.controller.ts"],"names":[],"mappings":";;;;;;AACA,kEAA8D;AAC9D,sDAAmD;AACnD,gEAAwC;AACxC,yCAAkE;AAElE,MAAa,sBAAuB,SAAQ,+BAAc;IACtD;;;;;;OAMG;IAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAyDG;IACI,KAAK,CAAC,YAAY,CACrB,OAAgB,EAChB,QAAkB;QAElB,MAAM,aAAa,GAAI,OAAe,CAAC,aAAa,IAAI,KAAK,CAAC;QAC9D,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;QACnC,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,qCAAqC,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;QAElF,IAAI,CAAC;YACD,MAAM,aAAa,GAAG,MAAM,8BAAa,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAEhE,IAAI,CAAC,aAAa,EAAE,CAAC;gBACjB,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,mBAAmB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;gBAC/D,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;YAC/C,CAAC;YAED,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,gCAAgC,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;YAC5E,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC;QAChE,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YAClB,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAE3E,IAAI,KAAK,YAAY,sBAAa,EAAE,CAAC;gBACjC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,mBAAmB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;gBAC/D,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC3C,CAAC;YAED,IAAI,KAAK,YAAY,4BAAmB,EAAE,CAAC;gBACvC,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,mDAAmD,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC7G,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACjD,CAAC;YAED,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,8CAA8C,CAAC,CAAC;YAC9E,IAAI,CAAC,wBAAwB,CAAC,0BAA0B,CAAC,CAAC;QAC9D,CAAC;IACL,CAAC;CACJ;AAtGD,wDAsGC;AAEY,QAAA,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC;AACtD,QAAA,YAAY,GAAG,8BAAsB,CAAC,YAAY,CAAC,IAAI,CAAC,8BAAsB,CAAC,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\nimport { EventsService } from '../../services/events.service';\r\nimport { BaseController } from '../BaseController';\r\nimport Logger from '../../utils/logger';\r\nimport { InternalServerError, NotFoundError } from '../../errors';\r\n\r\nexport class GetEventByIdController extends BaseController {\r\n    /**\r\n     * Controller function to retrieve a specific event by ID\r\n     * Fetches event details with enriched data\r\n     * @param request - Express request object\r\n     * @param response - Express response object\r\n     * @returns Response with event data or error message\r\n     */\r\n    \r\n    /**\r\n     * @openapi\r\n     * /events/{eventId}:\r\n     *   get:\r\n     *     summary: Retrieve a specific event by ID\r\n     *     description: Fetches event details with enriched data including ticket availability and pricing information\r\n     *     tags:\r\n     *       - Events\r\n     *     parameters:\r\n     *       - in: path\r\n     *         name: eventId\r\n     *         required: true\r\n     *         schema:\r\n     *           type: string\r\n     *           format: uuid\r\n     *         description: The event ID\r\n     *     responses:\r\n     *       200:\r\n     *         description: Successful response with event data\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 data:\r\n     *                   type: object\r\n     *                   properties:\r\n     *                     event:\r\n     *                       $ref: '#/components/schemas/Event'\r\n     *       404:\r\n     *         description: Event not found\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       500:\r\n     *         description: Internal server error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     */\r\n    public async getEventById(\r\n        request: Request,\r\n        response: Response\r\n    ) {\r\n        const correlationId = (request as any).correlationId || 'N/A';\r\n        const { eventId } = request.params;\r\n        Logger.debug(`[${correlationId}] Get event by ID controller called`, { eventId });\r\n        \r\n        try {\r\n            const enrichedEvent = await EventsService.getEventById(eventId);\r\n            \r\n            if (!enrichedEvent) {\r\n                Logger.warn(`[${correlationId}] Event not found`, { eventId });\r\n                this.throwNotFoundError('Event not found');\r\n            }\r\n            \r\n            Logger.info(`[${correlationId}] Successfully retrieved event`, { eventId });\r\n            return this.sendSuccess(response, { event: enrichedEvent });\r\n        } catch (error: any) {\r\n            Logger.error(`[${correlationId}] Error in getEventByIdController:`, error);\r\n            \r\n            if (error instanceof NotFoundError) {\r\n                Logger.warn(`[${correlationId}] Event not found`, { eventId });\r\n                this.throwNotFoundError(error.message);\r\n            }\r\n            \r\n            if (error instanceof InternalServerError) {\r\n                Logger.error(`[${correlationId}] Internal server error in getEventByIdController`, { error: error.message });\r\n                this.throwInternalServerError(error.message);\r\n            }\r\n            \r\n            Logger.error(`[${correlationId}] Unexpected error in getEventByIdController`);\r\n            this.throwInternalServerError('Failed to retrieve event');\r\n        }\r\n    }\r\n}\r\n\r\nexport const getEventByIdController = new GetEventByIdController();\r\nexport const getEventById = getEventByIdController.getEventById.bind(getEventByIdController);"]}