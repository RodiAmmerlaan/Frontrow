{"version":3,"file":"createEvent.controller.js","sourceRoot":"","sources":["../../../src/controllers/events/createEvent.controller.ts"],"names":[],"mappings":";;;;;;AACA,kEAA8D;AAC9D,sDAAmD;AACnD,yCAAmF;AACnF,gEAAwC;AAExC,MAAa,qBAAsB,SAAQ,+BAAc;IACrD;;;;;;OAMG;IAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAgIG;IACI,KAAK,CAAC,WAAW,CACpB,OAAgB,EAChB,QAAkB;QAElB,MAAM,aAAa,GAAI,OAAe,CAAC,aAAa,IAAI,KAAK,CAAC;QAC9D,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,kCAAkC,EAAE;YAC9D,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK;SAC5B,CAAC,CAAC;QAEH,IAAI,CAAC;YACD,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,aAAa,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;YAE9F,MAAM,MAAM,GAAG,MAAM,8BAAa,CAAC,WAAW,CAAC;gBAC3C,KAAK;gBACL,WAAW;gBACX,IAAI;gBACJ,UAAU;gBACV,QAAQ;gBACR,aAAa;gBACb,KAAK;aACR,CAAC,CAAC;YAEH,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,8BAA8B,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YACxE,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;QAC9D,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YAClB,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,yBAAyB,EAAE,KAAK,CAAC,CAAC;YAChE,IAAI,KAAK,YAAY,sBAAa,EAAE,CAAC;gBACjC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,wBAAwB,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;gBACtF,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC3C,CAAC;YACD,IAAI,KAAK,YAAY,wBAAe,EAAE,CAAC;gBACnC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,0BAA0B,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBACnF,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7C,CAAC;YACD,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,yCAAyC,CAAC,CAAC;YACzE,IAAI,CAAC,wBAAwB,CAAC,iDAAiD,CAAC,CAAC;QACrF,CAAC;IACL,CAAC;CACJ;AAhLD,sDAgLC;AAEY,QAAA,qBAAqB,GAAG,IAAI,qBAAqB,EAAE,CAAC;AACpD,QAAA,WAAW,GAAG,6BAAqB,CAAC,WAAW,CAAC,IAAI,CAAC,6BAAqB,CAAC,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\nimport { EventsService } from '../../services/events.service';\r\nimport { BaseController } from '../BaseController';\r\nimport { ConflictError, ValidationError, InternalServerError } from '../../errors';\r\nimport Logger from '../../utils/logger';\r\n\r\nexport class CreateEventController extends BaseController {\r\n    /**\r\n     * Controller function to create a new event\r\n     * Creates an event and associated ticket batch in the database\r\n     * @param request - Express request object containing event details in body\r\n     * @param response - Express response object\r\n     * @returns Response with success message or appropriate error message\r\n     */\r\n    \r\n    /**\r\n     * @openapi\r\n     * /events/create:\r\n     *   post:\r\n     *     summary: Create a new event\r\n     *     description: Creates a new event with associated ticket batch\r\n     *     tags:\r\n     *       - Events\r\n     *     security:\r\n     *       - bearerAuth: []\r\n     *     requestBody:\r\n     *       required: true\r\n     *       content:\r\n     *         application/json:\r\n     *           schema:\r\n     *             type: object\r\n     *             required:\r\n     *               - title\r\n     *               - description\r\n     *               - date\r\n     *               - start_time\r\n     *               - end_time\r\n     *               - total_tickets\r\n     *               - price\r\n     *             properties:\r\n     *               title:\r\n     *                 type: string\r\n     *                 minLength: 1\r\n     *                 maxLength: 100\r\n     *               description:\r\n     *                 type: string\r\n     *                 minLength: 1\r\n     *                 maxLength: 1000\r\n     *               date:\r\n     *                 type: string\r\n     *                 pattern: '^\\d{4}-\\d{2}-\\d{2}$'\r\n     *               start_time:\r\n     *                 type: string\r\n     *                 pattern: '^\\d{2}:\\d{2}$'\r\n     *               end_time:\r\n     *                 type: string\r\n     *                 pattern: '^\\d{2}:\\d{2}$'\r\n     *               total_tickets:\r\n     *                 type: integer\r\n     *                 minimum: 1\r\n     *               price:\r\n     *                 type: number\r\n     *                 minimum: 0\r\n     *     responses:\r\n     *       201:\r\n     *         description: Event created successfully\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 data:\r\n     *                   type: object\r\n     *                   properties:\r\n     *                     message:\r\n     *                       type: string\r\n     *       400:\r\n     *         description: Bad request - validation error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       401:\r\n     *         description: Unauthorized\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       403:\r\n     *         description: Forbidden - admin access required\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       409:\r\n     *         description: Conflict - event with this title already exists\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       500:\r\n     *         description: Internal server error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     */\r\n    public async createEvent(\r\n        request: Request,\r\n        response: Response\r\n    ) {\r\n        const correlationId = (request as any).correlationId || 'N/A';\r\n        Logger.debug(`[${correlationId}] Create event controller called`, { \r\n            title: request.body.title \r\n        });\r\n        \r\n        try {\r\n            const { title, description, date, start_time, end_time, total_tickets, price } = request.body;\r\n            \r\n            const result = await EventsService.createEvent({\r\n                title,\r\n                description,\r\n                date,\r\n                start_time,\r\n                end_time,\r\n                total_tickets,\r\n                price\r\n            });\r\n            \r\n            Logger.info(`[${correlationId}] Event created successfully`, { title });\r\n            return this.sendSuccess(response, result, undefined, 201);\r\n        } catch (error: any) {\r\n            Logger.error(`[${correlationId}] Error creating event:`, error);\r\n            if (error instanceof ConflictError) {\r\n                Logger.warn(`[${correlationId}] Event already exists`, { title: request.body.title });\r\n                this.throwConflictError(error.message);\r\n            }\r\n            if (error instanceof ValidationError) {\r\n                Logger.warn(`[${correlationId}] Event validation error`, { error: error.message });\r\n                this.throwBadRequestError(error.message);\r\n            }\r\n            Logger.error(`[${correlationId}] Unexpected error while creating event`);\r\n            this.throwInternalServerError('Failed to create event. Please try again later.');\r\n        }\r\n    }\r\n}\r\n\r\nexport const createEventController = new CreateEventController();\r\nexport const createEvent = createEventController.createEvent.bind(createEventController);"]}