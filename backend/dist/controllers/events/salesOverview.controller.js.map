{"version":3,"file":"salesOverview.controller.js","sourceRoot":"","sources":["../../../src/controllers/events/salesOverview.controller.ts"],"names":[],"mappings":";;;;;;AACA,oEAAgE;AAChE,sDAAmD;AACnD,gEAAwC;AACxC,yCAAmF;AAEnF,MAAa,uBAAwB,SAAQ,+BAAc;IACvD;;;;;;OAMG;IAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAiHG;IACI,KAAK,CAAC,gBAAgB,CACzB,OAAgB,EAChB,QAAkB;QAElB,MAAM,aAAa,GAAI,OAAe,CAAC,aAAa,IAAI,KAAK,CAAC;QAC9D,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC;QACtC,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,wCAAwC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAEzF,IAAI,CAAC;YACD,MAAM,aAAa,GAAG,MAAM,gCAAc,CAAC,gBAAgB,CACvD,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC,SAAS,EAC7C,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAc,CAAC,CAAC,CAAC,CAAC,SAAS,CAC9C,CAAC;YAEF,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,yCAAyC,CAAC,CAAC;YACxE,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QACrD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,gBAAM,CAAC,KAAK,CAAC,IAAI,aAAa,wCAAwC,EAAE,KAAK,CAAC,CAAC;YAC/E,IAAI,KAAK,YAAY,wBAAe,EAAE,CAAC;gBACnC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,mCAAmC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC5F,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7C,CAAC;YACD,IAAI,KAAK,YAAY,sBAAa,EAAE,CAAC;gBACjC,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,kCAAkC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC3F,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC3C,CAAC;YACD,IAAI,CAAC,wBAAwB,CAAC,mCAAmC,CAAC,CAAC;QACvE,CAAC;IACL,CAAC;CACJ;AAxJD,0DAwJC;AAEY,QAAA,uBAAuB,GAAG,IAAI,uBAAuB,EAAE,CAAC;AACxD,QAAA,gBAAgB,GAAG,+BAAuB,CAAC,gBAAgB,CAAC,IAAI,CAAC,+BAAuB,CAAC,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\nimport { ReportsService } from '../../services/reports.service';\r\nimport { BaseController } from '../BaseController';\r\nimport Logger from '../../utils/logger';\r\nimport { ValidationError, NotFoundError, InternalServerError } from '../../errors';\r\n\r\nexport class SalesOverviewController extends BaseController {\r\n    /**\r\n     * Controller function to retrieve sales overview data\r\n     * Calculates and returns sales metrics for events\r\n     * @param request - Express request object with optional month/year query parameters\r\n     * @param response - Express response object\r\n     * @returns Response with sales overview data or error message\r\n     */\r\n    \r\n    /**\r\n     * @openapi\r\n     * /events/sales-overview:\r\n     *   get:\r\n     *     summary: Retrieve sales overview data\r\n     *     description: Calculates and returns sales metrics for events, optionally filtered by month and year\r\n     *     tags:\r\n     *       - Events\r\n     *     security:\r\n     *       - bearerAuth: []\r\n     *     parameters:\r\n     *       - in: query\r\n     *         name: month\r\n     *         required: false\r\n     *         schema:\r\n     *           type: integer\r\n     *           minimum: 1\r\n     *           maximum: 12\r\n     *         description: Month to filter sales data (1-12)\r\n     *       - in: query\r\n     *         name: year\r\n     *         required: false\r\n     *         schema:\r\n     *           type: integer\r\n     *           minimum: 2000\r\n     *           maximum: 2100\r\n     *         description: Year to filter sales data (2000-2100)\r\n     *     responses:\r\n     *       200:\r\n     *         description: Successful response with sales overview data\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 data:\r\n     *                   type: object\r\n     *                   properties:\r\n     *                     totalRevenue:\r\n     *                       type: number\r\n     *                     totalTicketsSold:\r\n     *                       type: integer\r\n     *                     totalEvents:\r\n     *                       type: integer\r\n     *                     averageTicketPrice:\r\n     *                       type: number\r\n     *       400:\r\n     *         description: Bad request - validation error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       401:\r\n     *         description: Unauthorized\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       403:\r\n     *         description: Forbidden - admin access required\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       404:\r\n     *         description: Sales data not found\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     *       500:\r\n     *         description: Internal server error\r\n     *         content:\r\n     *           application/json:\r\n     *             schema:\r\n     *               type: object\r\n     *               properties:\r\n     *                 success:\r\n     *                   type: boolean\r\n     *                 error:\r\n     *                   type: string\r\n     *                 message:\r\n     *                   type: string\r\n     */\r\n    public async getSalesOverview(\r\n        request: Request,\r\n        response: Response\r\n    ) {\r\n        const correlationId = (request as any).correlationId || 'N/A';\r\n        const { month, year } = request.query;\r\n        Logger.debug(`[${correlationId}] Get sales overview controller called`, { month, year });\r\n        \r\n        try {\r\n            const salesOverview = await ReportsService.getSalesOverview(\r\n                month ? parseInt(month as string) : undefined,\r\n                year ? parseInt(year as string) : undefined\r\n            );\r\n            \r\n            Logger.info(`[${correlationId}] Successfully retrieved sales overview`);\r\n            return this.sendSuccess(response, salesOverview);\r\n        } catch (error) {\r\n            Logger.error(`[${correlationId}] Error in getSalesOverviewController:`, error);\r\n            if (error instanceof ValidationError) {\r\n                Logger.warn(`[${correlationId}] Sales overview validation error`, { error: error.message });\r\n                this.throwBadRequestError(error.message);\r\n            }\r\n            if (error instanceof NotFoundError) {\r\n                Logger.warn(`[${correlationId}] Sales overview not found error`, { error: error.message });\r\n                this.throwNotFoundError(error.message);\r\n            }\r\n            this.throwInternalServerError('Failed to retrieve sales overview');\r\n        }\r\n    }\r\n}\r\n\r\nexport const salesOverviewController = new SalesOverviewController();\r\nexport const getSalesOverview = salesOverviewController.getSalesOverview.bind(salesOverviewController);"]}