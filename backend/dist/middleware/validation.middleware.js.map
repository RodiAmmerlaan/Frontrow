{"version":3,"file":"validation.middleware.js","sourceRoot":"","sources":["../../src/middleware/validation.middleware.ts"],"names":[],"mappings":";;;;;;AAiBA,oCAeC;AAQD,0CA8BC;AArED,8CAA+E;AAC/E,8DAAqC;AAErC,yDAAyD;AAQzD;;;;GAIG;AACH,SAAgB,YAAY,CAAC,IAAS;IACpC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;QAC7B,OAAO,IAAA,qBAAU,EAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;SAAM,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;QAC/B,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9C,CAAC;SAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC;QACrD,MAAM,SAAS,GAAQ,EAAE,CAAC;QAC1B,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC7B,SAAS,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YAC3C,CAAC;QACH,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;GAKG;AACH,SAAgB,eAAe,CAAC,MAAoB,EAAE,UAA6B,EAAE,MAAM,EAAE,MAAM,EAAE;IACnG,OAAO,CAAC,OAAgB,EAAE,QAAkB,EAAE,IAAkB,EAAE,EAAE;QAClE,IAAI,CAAC;YACH,IAAI,IAAI,GAAG,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;YAEvD,IAAI,OAAO,CAAC,QAAQ,KAAK,KAAK,EAAE,CAAC;gBAC/B,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;YAC5B,CAAC;YAED,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE;gBAC7C,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,OAAO,CAAC,YAAY,IAAI,IAAI;aAC3C,CAAC,CAAC;YAEH,IAAI,KAAK,EAAE,CAAC;gBACV,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC5E,MAAM,IAAI,8BAAe,CAAC,YAAY,CAAC,CAAC;YAC1C,CAAC;YAED,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAEjD,IAAI,EAAE,CAAC;QACT,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,8BAAe,EAAE,CAAC;gBACrC,MAAM,KAAK,CAAC;YACd,CAAC;YAED,MAAM,IAAI,8BAAe,CAAC,qBAAqB,GAAI,KAAe,CAAC,OAAO,CAAC,CAAC;QAC9E,CAAC;IACH,CAAC,CAAC;AACJ,CAAC;AAED;;;;;GAKG;AACH,SAAS,kBAAkB,CAAC,OAAgB,EAAE,MAAmC;IAC/E,QAAQ,MAAM,EAAE,CAAC;QACf,KAAK,MAAM;YACT,OAAO,OAAO,CAAC,IAAI,CAAC;QACtB,KAAK,OAAO;YACV,OAAO,OAAO,CAAC,KAAK,CAAC;QACvB,KAAK,QAAQ;YACX,OAAO,OAAO,CAAC,MAAM,CAAC;QACxB;YACE,OAAO,OAAO,CAAC,IAAI,CAAC;IACxB,CAAC;AACH,CAAC;AAED;;;;;GAKG;AACH,SAAS,gBAAgB,CAAC,OAAgB,EAAE,MAAmC,EAAE,IAAS;IACxF,QAAQ,MAAM,EAAE,CAAC;QACf,KAAK,MAAM;YACT,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;YACpB,MAAM;QACR,KAAK,OAAO;YACV,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;YACrB,MAAM;QACR,KAAK,QAAQ;YACX,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;YACtB,MAAM;IACV,CAAC;AACH,CAAC;AAEY,QAAA,iBAAiB,GAAG;IAC/B,KAAK,EAAE,GAAG,EAAE,CAAC,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;QACpD,cAAc,EAAE,sBAAsB;QACtC,cAAc,EAAE,mBAAmB;KACpC,CAAC;IAEF,QAAQ,EAAE,CAAC,YAAoB,CAAC,EAAE,EAAE,CAAC,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;QACnF,YAAY,EAAE,6BAA6B,SAAS,kBAAkB;QACtE,cAAc,EAAE,sBAAsB;KACvC,CAAC;IAEF,IAAI,EAAE,GAAG,EAAE,CAAC,aAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;QACzE,aAAa,EAAE,mBAAmB;QAClC,cAAc,EAAE,gBAAgB;KACjC,CAAC;IAEF,eAAe,EAAE,GAAG,EAAE,CAAC,aAAG,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;QACvE,gBAAgB,EAAE,0BAA0B;QAC5C,YAAY,EAAE,kCAAkC;QAChD,cAAc,EAAE,mBAAmB;KACpC,CAAC;IAEF,IAAI,EAAE,CAAC,YAAoB,IAAI,EAAE,EAAE,CAAC,aAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;QAClF,YAAY,EAAE,0BAA0B,SAAS,aAAa;KAC/D,CAAC;CACH,CAAC","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport Joi, { ObjectSchema, ValidationError as JoiValidationError } from 'joi';\r\nimport escapeHtml from 'escape-html';\r\nimport { BaseController } from '../controllers/BaseController';\r\nimport { ValidationError } from '../errors/CustomErrors';\r\n\r\nexport interface ValidationOptions {\r\n  source: 'body' | 'query' | 'params';\r\n  stripUnknown?: boolean;\r\n  sanitize?: boolean;\r\n}\r\n\r\n/**\r\n * Sanitizes string values to prevent XSS attacks\r\n * @param data - The data to sanitize\r\n * @returns Sanitized data\r\n */\r\nexport function sanitizeData(data: any): any {\r\n  if (typeof data === 'string') {\r\n    return escapeHtml(data);\r\n  } else if (Array.isArray(data)) {\r\n    return data.map(item => sanitizeData(item));\r\n  } else if (typeof data === 'object' && data !== null) {\r\n    const sanitized: any = {};\r\n    for (const key in data) {\r\n      if (data.hasOwnProperty(key)) {\r\n        sanitized[key] = sanitizeData(data[key]);\r\n      }\r\n    }\r\n    return sanitized;\r\n  }\r\n  return data;\r\n}\r\n\r\n/**\r\n * Validates request data based on provided Joi schema\r\n * @param schema - Joi schema for validation\r\n * @param options - Validation options\r\n * @returns Express middleware function\r\n */\r\nexport function validateRequest(schema: ObjectSchema, options: ValidationOptions = { source: 'body' }) {\r\n  return (request: Request, response: Response, next: NextFunction) => {\r\n    try {\r\n      let data = getDataFromRequest(request, options.source);\r\n      \r\n      if (options.sanitize !== false) {\r\n        data = sanitizeData(data);\r\n      }\r\n      \r\n      const { error, value } = schema.validate(data, { \r\n        abortEarly: false,\r\n        stripUnknown: options.stripUnknown ?? true\r\n      });\r\n      \r\n      if (error) {\r\n        const errorMessage = error.details.map(detail => detail.message).join(', ');\r\n        throw new ValidationError(errorMessage);\r\n      }\r\n      \r\n      setDataOnRequest(request, options.source, value);\r\n      \r\n      next();\r\n    } catch (error) {\r\n      if (error instanceof ValidationError) {\r\n        throw error;\r\n      }\r\n      \r\n      throw new ValidationError('Validation failed: ' + (error as Error).message);\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Extracts data from the request based on the source\r\n * @param request - Express request object\r\n * @param source - Where to extract data from\r\n * @returns Data object\r\n */\r\nfunction getDataFromRequest(request: Request, source: 'body' | 'query' | 'params'): any {\r\n  switch (source) {\r\n    case 'body':\r\n      return request.body;\r\n    case 'query':\r\n      return request.query;\r\n    case 'params':\r\n      return request.params;\r\n    default:\r\n      return request.body;\r\n  }\r\n}\r\n\r\n/**\r\n * Sets validated data back on the request object\r\n * @param request - Express request object\r\n * @param source - Where to set the data\r\n * @param data - Validated data\r\n */\r\nfunction setDataOnRequest(request: Request, source: 'body' | 'query' | 'params', data: any): void {\r\n  switch (source) {\r\n    case 'body':\r\n      request.body = data;\r\n      break;\r\n    case 'query':\r\n      request.query = data;\r\n      break;\r\n    case 'params':\r\n      request.params = data;\r\n      break;\r\n  }\r\n}\r\n\r\nexport const ValidationSchemas = {\r\n  email: () => Joi.string().email().required().messages({\r\n    'string.email': 'Invalid email format',\r\n    'any.required': 'Email is required'\r\n  }),\r\n  \r\n  password: (minLength: number = 8) => Joi.string().min(minLength).required().messages({\r\n    'string.min': `Password must be at least ${minLength} characters long`,\r\n    'any.required': 'Password is required'\r\n  }),\r\n  \r\n  uuid: () => Joi.string().uuid({ version: ['uuidv4'] }).required().messages({\r\n    'string.uuid': 'Invalid ID format',\r\n    'any.required': 'ID is required'\r\n  }),\r\n  \r\n  positiveInteger: () => Joi.number().integer().min(1).required().messages({\r\n    'number.integer': 'Value must be an integer',\r\n    'number.min': 'Value must be a positive integer',\r\n    'any.required': 'Value is required'\r\n  }),\r\n  \r\n  text: (maxLength: number = 1000) => Joi.string().max(maxLength).optional().messages({\r\n    'string.max': `Text must be less than ${maxLength} characters`\r\n  })\r\n};"]}