{"version":3,"file":"correlationId.middleware.js","sourceRoot":"","sources":["../../src/middleware/correlationId.middleware.ts"],"names":[],"mappings":";;;;;AA0BA,0DAiBC;AA1CD,6DAAqC;AAUrC;;;GAGG;AACH,SAAS,qBAAqB;IAC5B,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;AAChE,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,uBAAuB,CACrC,OAAgB,EAChB,QAAkB,EAClB,IAAkB;IAElB,MAAM,aAAa,GAAG,qBAAqB,EAAE,CAAC;IAC9C,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC;IAEtC,QAAQ,CAAC,SAAS,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC;IAEtD,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,KAAK,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,oBAAoB,CAAC,CAAC;IAEtF,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;QACzB,gBAAM,CAAC,IAAI,CAAC,IAAI,aAAa,KAAK,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,uBAAuB,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;IAChH,CAAC,CAAC,CAAC;IAEH,IAAI,EAAE,CAAC;AACT,CAAC","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport Logger from '../utils/logger';\r\n\r\ndeclare global {\r\n  namespace Express {\r\n    interface Request {\r\n      correlationId?: string;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Generates a simple correlation ID using timestamp and random number\r\n * @returns A string representing a correlation ID\r\n */\r\nfunction generateCorrelationId(): string {\r\n  return `${Date.now()}-${Math.floor(Math.random() * 1000000)}`;\r\n}\r\n\r\n/**\r\n * Middleware to generate and attach a correlation ID to each request\r\n * This helps with tracing requests through the system for debugging purposes\r\n * @param request - Express request object\r\n * @param response - Express response object\r\n * @param next - Express next function\r\n */\r\nexport function correlationIdMiddleware(\r\n  request: Request,\r\n  response: Response,\r\n  next: NextFunction\r\n) {\r\n  const correlationId = generateCorrelationId();\r\n  request.correlationId = correlationId;\r\n  \r\n  response.setHeader('X-Correlation-ID', correlationId);\r\n  \r\n  Logger.http(`[${correlationId}] ${request.method} ${request.path} - Request started`);\r\n  \r\n  response.on('finish', () => {\r\n    Logger.http(`[${correlationId}] ${request.method} ${request.path} - Response status: ${response.statusCode}`);\r\n  });\r\n  \r\n  next();\r\n}"]}