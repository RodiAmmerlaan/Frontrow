{"version":3,"file":"auth.middleware.js","sourceRoot":"","sources":["../../src/middleware/auth.middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { UserRepositoryImpl } from '../repositories/UserRepositoryImpl';\r\nimport { extractAndVerifyToken } from '../utils/token.util';\r\n\r\nconst userRepository = new UserRepositoryImpl();\r\n\r\n/**\r\n * Middleware function to authenticate a user based on JWT token\r\n * Verifies the access token and attaches user information to the request object\r\n * @param request - Express request object\r\n * @param response - Express response object\r\n * @param next - Express next function\r\n * @returns Response with error if authentication fails, otherwise calls next()\r\n */\r\nexport async function authenticate(\r\n  request: Request,\r\n  response: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const tokenResult = extractAndVerifyToken(request);\r\n    \r\n    if (!tokenResult.success) {\r\n      return response.status(401).json({ \r\n        success: false, \r\n        error: \"UNAUTHORIZED\", \r\n        message: tokenResult.error\r\n      });\r\n    }\r\n    \r\n    const { decoded } = tokenResult;\r\n    const user = await userRepository.findById(decoded.sub);\r\n    \r\n    if (!user) {\r\n      return response.status(401).json({ \r\n        success: false, \r\n        error: \"UNAUTHORIZED\", \r\n        message: \"Invalid token\" \r\n      });\r\n    }\r\n    \r\n    (request as any).user = {\r\n      id: user.id,\r\n      email: user.email,\r\n      role: user.role\r\n    };\r\n    \r\n    next();\r\n  } catch (error) {\r\n    return response.status(401).json({ \r\n      success: false, \r\n      error: \"UNAUTHORIZED\", \r\n      message: \"Invalid or expired token\" \r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Middleware function to authorize admin users\r\n * Checks if the authenticated user has ADMIN role\r\n * @param request - Express request object with user attached\r\n * @param response - Express response object\r\n * @param next - Express next function\r\n * @returns Response with error if user is not an admin, otherwise calls next()\r\n */\r\nexport function authorizeAdmin(\r\n  request: Request,\r\n  response: Response,\r\n  next: NextFunction\r\n) {\r\n  const user = (request as any).user;\r\n  \r\n  if (!user) {\r\n    return response.status(401).json({ \r\n      success: false, \r\n      error: \"UNAUTHORIZED\", \r\n      message: \"Authentication required\" \r\n    });\r\n  }\r\n  \r\n  if (user.role !== \"ADMIN\") {\r\n    return response.status(403).json({ \r\n      success: false, \r\n      error: \"FORBIDDEN\", \r\n      message: \"Access denied. Admin role required\" \r\n    });\r\n  }\r\n  \r\n  next();\r\n}\r\n\r\n/**\r\n * Factory function to create middleware for authorizing specific roles\r\n * @param roles - Array of roles that are authorized to access the route\r\n * @returns Middleware function that checks if user has one of the specified roles\r\n */\r\nexport function authorizeRoles(roles: string[]) {\r\n  return (request: Request, response: Response, next: NextFunction) => {\r\n    const user = (request as any).user;\r\n    \r\n    if (!user) {\r\n      return response.status(401).json({ \r\n        success: false, \r\n        error: \"UNAUTHORIZED\", \r\n        message: \"Authentication required\" \r\n      });\r\n    }\r\n    \r\n    if (!roles.includes(user.role)) {\r\n      return response.status(403).json({ \r\n        success: false, \r\n        error: \"FORBIDDEN\", \r\n        message: `Access denied. Required roles: ${roles.join(', ')}` \r\n      });\r\n    }\r\n    \r\n    next();\r\n  };\r\n}"]}