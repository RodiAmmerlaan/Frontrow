{"version":3,"file":"email.service.js","sourceRoot":"","sources":["../../src/services/email.service.ts"],"names":[],"mappings":"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","sourcesContent":["import nodemailer, { Transporter } from 'nodemailer';\r\nimport QRCode from 'qrcode';\r\n\r\n// Mock email configuration for development/testing\r\n// Option 1: Use jsonTransport for complete mocking (no actual emails sent)\r\nconst useMockTransport = process.env.NODE_ENV !== 'development';\r\n\r\nlet transporter: Transporter;\r\n\r\nif (useMockTransport) {\r\n    // Create a mock transporter that logs emails instead of sending them\r\n    transporter = nodemailer.createTransport({\r\n        streamTransport: true,\r\n        newline: 'unix',\r\n        buffer: true\r\n    });\r\n} else {\r\n    // Use real SMTP provider for actual email delivery\r\n    transporter = nodemailer.createTransport({\r\n        host: 'smtp.gmail.com',\r\n        port: 587,\r\n        secure: false,\r\n        auth: {\r\n            user: process.env.SMTP_USER || 'ammerlaan.rodi@gmail.com',\r\n            pass: process.env.SMTP_PASS || 'egdj tmlv jwsh xxxj' // Use App Password, not regular password\r\n        }\r\n    });\r\n}\r\n\r\ninterface TicketInfo {\r\n    id: string;\r\n    created_at: Date | null;\r\n    order_id: string | null;\r\n    assigned_to: string | null;\r\n    ticket_number: string;\r\n}\r\n\r\ninterface EventInfo {\r\n    id: string;\r\n    title: string;\r\n    description: string | null;\r\n    start_time: Date;\r\n    end_time: Date;\r\n}\r\n\r\ninterface UserInfo {\r\n    email: string;\r\n    first_name: string | null;\r\n    last_name: string | null;\r\n}\r\n\r\n// Helper function to generate QR code as Buffer for email attachment\r\nasync function generateQRCodeBuffer(ticketNumber: string): Promise<Buffer> {\r\n    try {\r\n        // Create QR code data with ticket information\r\n        const qrData = JSON.stringify({\r\n            ticket: ticketNumber,\r\n            event: 'FrontRow Event',\r\n            timestamp: new Date().toISOString(),\r\n            version: '1.0'\r\n        });\r\n        \r\n        // Generate QR code as Buffer (binary data)\r\n        const qrCodeBuffer = await QRCode.toBuffer(qrData, {\r\n            errorCorrectionLevel: 'M',\r\n            margin: 1,\r\n            color: {\r\n                dark: '#000000',\r\n                light: '#FFFFFF'\r\n            },\r\n            width: 200\r\n        });\r\n        \r\n        return qrCodeBuffer;\r\n    } catch (error) {\r\n        console.error('Error generating QR code:', error);\r\n        // Return a minimal 1x1 transparent PNG as fallback\r\n        return Buffer.from('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==', 'base64');\r\n    }\r\n}\r\n\r\nexport async function sendTicketConfirmationEmail(\r\n    userInfo: UserInfo,\r\n    tickets: TicketInfo[],\r\n    eventInfo: EventInfo\r\n) {\r\n    try {\r\n        // Generate QR codes as buffers for email attachments\r\n        const ticketsWithQR = await Promise.all(\r\n            tickets.map(async (ticket, index) => {\r\n                const qrCodeBuffer = await generateQRCodeBuffer(ticket.ticket_number);\r\n                const cid = `qr-${ticket.id}-${index}`;\r\n                return { \r\n                    ...ticket, \r\n                    qrCodeBuffer,\r\n                    cid\r\n                };\r\n            })\r\n        );\r\n\r\n        // Create email attachments for QR codes\r\n        const attachments = ticketsWithQR.map(ticket => ({\r\n            filename: `qr-${ticket.ticket_number}.png`,\r\n            content: ticket.qrCodeBuffer,\r\n            contentType: 'image/png',\r\n            cid: ticket.cid,\r\n            contentDisposition: 'inline' as const\r\n        }));\r\n\r\n        const ticketListHtml = ticketsWithQR.map(ticket => `\r\n            <div style=\"border: 1px solid #ddd; margin: 20px 0; padding: 20px; border-radius: 8px; background-color: #fafafa;\">\r\n                <div style=\"display: flex; align-items: center; justify-content: space-between; margin-bottom: 15px;\">\r\n                    <div style=\"flex: 1;\">\r\n                        <h4 style=\"margin: 0 0 10px 0; color: #333; font-size: 18px;\">ðŸŽ« Ticket: ${ticket.ticket_number}</h4>\r\n                        <p style=\"margin: 5px 0; color: #666;\"><strong>Order ID:</strong> ${ticket.order_id || 'N/A'}</p>\r\n                        <p style=\"margin: 5px 0; color: #666;\"><strong>Ticket ID:</strong> ${ticket.id}</p>\r\n                        ${ticket.created_at ? `<p style=\"margin: 5px 0; color: #666;\"><strong>Created:</strong> ${new Date(ticket.created_at).toLocaleDateString('nl-NL')}</p>` : ''}\r\n                    </div>\r\n                    <div style=\"margin-left: 20px; text-align: center;\">\r\n                        <img src=\"cid:${ticket.cid}\" alt=\"QR Code for ${ticket.ticket_number}\" style=\"width: 120px; height: 120px; border: 1px solid #ddd; border-radius: 4px; display: block; margin: 0 auto; max-width: 120px; max-height: 120px;\" />\r\n                        <p style=\"margin: 8px 0 0 0; font-size: 12px; color: #888; font-weight: bold;\">SCAN AT ENTRANCE</p>\r\n                    </div>\r\n                </div>\r\n                <div style=\"background-color: #e8f4fd; padding: 10px; border-radius: 4px; border-left: 4px solid #2196F3;\">\r\n                    <p style=\"margin: 0; font-size: 12px; color: #1976D2;\">\r\n                        ðŸ’¡ <strong>Tip:</strong> Save this email or take a screenshot of the QR code for quick access at the event.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        `).join('');\r\n\r\n        const mailOptions = {\r\n            from: process.env.SMTP_FROM || '\"FrontRow Tickets\" <noreply@frontrow.nl>',\r\n            to: userInfo.email,\r\n            subject: `Ticket Confirmation - ${eventInfo.title}`,\r\n            html: `\r\n                <h1>Ticket Confirmation</h1>\r\n                <p>Dear ${userInfo.first_name} ${userInfo.last_name},</p>\r\n                \r\n                <p>Thank you for your purchase! You have successfully bought ${tickets.length} ticket(s) for the following event:</p>\r\n                \r\n                <div style=\"background-color: #f5f5f5; padding: 20px; margin: 20px 0; border-radius: 5px;\">\r\n                    <h2>${eventInfo.title}</h2>\r\n                    <p><strong>Description:</strong> ${eventInfo.description || 'No description available'}</p>\r\n                    <p><strong>Start Time:</strong> ${new Date(eventInfo.start_time).toLocaleDateString('nl-NL', {\r\n                        weekday: 'long',\r\n                        year: 'numeric',\r\n                        month: 'long',\r\n                        day: 'numeric',\r\n                        hour: '2-digit',\r\n                        minute: '2-digit'\r\n                    })}</p>\r\n                    <p><strong>End Time:</strong> ${new Date(eventInfo.end_time).toLocaleDateString('nl-NL', {\r\n                        weekday: 'long',\r\n                        year: 'numeric',\r\n                        month: 'long',\r\n                        day: 'numeric',\r\n                        hour: '2-digit',\r\n                        minute: '2-digit'\r\n                    })}</p>\r\n                </div>\r\n                \r\n                <h3>ðŸŽ« Your Digital Tickets:</h3>\r\n                ${ticketListHtml}\r\n                \r\n                <div style=\"background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 20px; margin: 30px 0;\">\r\n                    <h4 style=\"margin: 0 0 15px 0; color: #856404;\">ðŸ“± How to Use Your Tickets:</h4>\r\n                    <ul style=\"margin: 0; padding-left: 20px; color: #856404;\">\r\n                        <li style=\"margin-bottom: 8px;\"><strong>Save this email</strong> or take screenshots of the QR codes</li>\r\n                        <li style=\"margin-bottom: 8px;\"><strong>Show your QR code</strong> at the entrance on your phone or print it</li>\r\n                        <li style=\"margin-bottom: 8px;\"><strong>Each ticket has a unique QR code</strong> - one scan per person</li>\r\n                        <li style=\"margin-bottom: 8px;\"><strong>Arrive early</strong> to avoid queues at the entrance</li>\r\n                    </ul>\r\n                </div>\r\n                \r\n                <p style=\"margin-top: 30px; padding: 15px; background-color: #f8f9fa; border-radius: 5px; border-left: 4px solid #28a745;\">\r\n                    <strong>âœ… Important:</strong> Each ticket contains a unique QR code that will be scanned at the entrance. \r\n                    Make sure to have your QR codes ready (either on your phone or printed) when you arrive at the event.\r\n                </p>\r\n                \r\n                <p>If you have any questions, please contact our support team.</p>\r\n                \r\n                <p>Best regards,<br>\r\n                The FrontRow Team</p>\r\n                \r\n                <hr style=\"margin-top: 40px;\">\r\n                <p style=\"font-size: 12px; color: #666;\">\r\n                    This is an automated email. Please do not reply to this message.\r\n                </p>\r\n            `,\r\n            attachments: attachments\r\n        };\r\n\r\n        const info = await transporter.sendMail(mailOptions);\r\n        \r\n        if (useMockTransport) {\r\n            console.log('ðŸ“§ MOCK EMAIL SENT:');\r\n            console.log('  To:', userInfo.email);\r\n            console.log('  Subject:', mailOptions.subject);\r\n            console.log('  Event:', eventInfo.title);\r\n            console.log('  Tickets:', tickets.length);\r\n            console.log('  QR Codes Generated:', ticketsWithQR.length);\r\n            console.log('  Message ID:', info.messageId || 'mock-' + Date.now());\r\n        } else {\r\n            console.log('Email sent successfully to:', userInfo.email);\r\n            console.log('QR codes generated for', ticketsWithQR.length, 'tickets');\r\n        }\r\n        return { success: true, messageId: info.messageId };\r\n    } catch (error) {\r\n        console.error('Error sending email:', error);\r\n        return { success: false, error: error };\r\n    }\r\n}\r\n\r\n// Test email configuration\r\nexport async function testEmailConnection() {\r\n    try {\r\n        if (useMockTransport) {\r\n            console.log('ðŸš€ Mock email transporter is ready (no actual verification needed)');\r\n            return true;\r\n        } else {\r\n            await transporter.verify();\r\n            console.log('Email server connection successful');\r\n            return true;\r\n        }\r\n    } catch (error) {\r\n        console.error('Email server connection failed:', error);\r\n        return false;\r\n    }\r\n}"]}