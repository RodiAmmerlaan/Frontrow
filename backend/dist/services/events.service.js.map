{"version":3,"file":"events.service.js","sourceRoot":"","sources":["../../src/services/events.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventRepositoryImpl } from \"../repositories/EventRepositoryImpl\";\nimport { TicketBatchRepositoryImpl } from \"../repositories/TicketBatchRepositoryImpl\";\nimport { OrderRepositoryImpl } from \"../repositories/OrderRepositoryImpl\";\nimport { EventOverview } from \"../interfaces/event.interface\";\nimport Logger from '../utils/logger';\n\nimport { BaseService } from './BaseService';\nimport { NotFoundError, ConflictError } from '../errors';\n\nconst eventRepository = new EventRepositoryImpl();\nconst ticketBatchRepository = new TicketBatchRepositoryImpl();\nconst orderRepository = new OrderRepositoryImpl();\n\nexport class EventsService extends BaseService {\n    /**\n     * Retrieves enriched event data with ticket and order information\n     * Combines event data with ticket availability and pricing information\n     * @returns A promise that resolves to an array of enriched event objects\n     * @throws Will throw an error if there's a problem retrieving or processing the data\n     */\n    static async getEnrichedEvents() {\n        Logger.debug('EventsService.getEnrichedEvents called');\n        \n        try {\n            const events = await eventRepository.findAllByDate();\n            const enrichedEvents = await this.enrichEventsWithTicketInfo(events);\n            \n            Logger.info('Enriched events retrieved successfully', { count: enrichedEvents.length });\n            \n            return enrichedEvents;\n        } catch (error) {\n            Logger.error('Error in getEnrichedEvents:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Retrieves a specific event by its ID with enriched data\n     * Fetches detailed event information including ticket availability and sales data\n     * @param eventId - The unique identifier of the event to retrieve\n     * @returns A promise that resolves to the event details\n     * @throws Will throw an error if there's a problem retrieving or processing the data\n     */\n    static async getEventById(eventId: string) {\n        Logger.debug('EventsService.getEventById called', { eventId });\n        \n        try {\n            const event = await eventRepository.findEventById(eventId);\n            \n            if (!event) {\n                Logger.warn('Event not found', { eventId });\n                throw new NotFoundError('Event not found');\n            }\n\n            const eventDetails = await this.enrichEventWithDetails(eventId, event);\n\n            Logger.info('Event retrieved successfully', { eventId });\n            \n            return eventDetails;\n        } catch (error) {\n            Logger.error('Error in getEventById:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Enrich event with ticket and sales details\n     * @param eventId - The ID of the event\n     * @param event - The event data from the repository\n     * @returns A promise that resolves to the enriched event details\n     */\n    private static async enrichEventWithDetails(eventId: string, event: any) {\n        const ticketBatch = await ticketBatchRepository.findFirstByEventId(eventId);\n        \n        const orders = await orderRepository.findByEventId(eventId);\n        const ticketsSold = orders.reduce((total: number, order: any) => total + order.total_amount, 0);\n\n        const totalTickets = ticketBatch?.total_tickets || 0;\n        const ticketsLeft = Math.max(0, totalTickets - ticketsSold);\n\n        return {\n            id: event.id,\n            title: event.title,\n            description: event.description,\n            start_time: event.start_time,\n            end_time: event.end_time,\n            total_tickets: totalTickets,\n            tickets_left: ticketsLeft,\n            price: ticketBatch?.price || 0,\n            created_at: event.created_at\n        };\n    }\n\n    /**\n     * Creates a new event with associated ticket batch\n     * @param eventData - Object containing event details\n     * @returns A promise that resolves to the created event\n     * @throws Will throw an error if there's a problem creating the event\n     */\n    static async createEvent(eventData: {\n        title: string;\n        description: string;\n        date: string;\n        start_time: string;\n        end_time: string;\n        total_tickets: number;\n        price: number;\n    }) {\n        Logger.debug('EventsService.createEvent called', { title: eventData.title });\n        \n        try {\n            const { title, description, date, start_time, end_time, total_tickets, price } = eventData;\n            \n            const existingEvent = await this.checkForExistingEvent(title);\n            \n            const { startTimeDate, endTimeDate } = this.createEventDates(date, start_time, end_time);\n            \n            const eventDb = await eventRepository.createEventWithDetails(title, description, date, startTimeDate, endTimeDate);\n            const eventId = eventDb.id;\n\n            await ticketBatchRepository.createTicketBatch(eventId, total_tickets, price);\n            \n            Logger.info('Event created successfully', { eventId, title });\n            \n            return { message: \"Event created\" };\n        } catch (error) {\n            Logger.error('Error in createEvent:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Check if an event with the same title already exists\n     * @param title - The title of the event to check\n     * @returns A promise that resolves to the existing event if found\n     * @throws ConflictError if an event with the same title already exists\n     */\n    private static async checkForExistingEvent(title: string) {\n        const existingEvent = await eventRepository.findByTitle(title);\n        if (existingEvent) {\n            Logger.warn('Event already exists', { title });\n            throw new ConflictError('An event with this title already exists');\n        }\n        return existingEvent;\n    }\n\n    /**\n     * Create Date objects for event start and end times\n     * @param date - The date of the event in YYYY-MM-DD format\n     * @param start_time - The start time of the event in HH:MM format\n     * @param end_time - The end time of the event in HH:MM format\n     * @returns Object containing startTimeDate and endTimeDate\n     */\n    private static createEventDates(date: string, start_time: string, end_time: string) {\n        const startTimeDate = new Date(date + \"T\" + start_time + \":00.000Z\");\n        const endTimeDate = new Date(date + \"T\" + end_time + \":00.000Z\");\n        return { startTimeDate, endTimeDate };\n    }\n\n    /**\n     * Searches for events by name with enriched data\n     * Performs a case-insensitive partial match search on event titles\n     * @param searchTerm - The term to search for in event titles\n     * @returns A promise that resolves to an array of enriched events\n     * @throws Will throw an error if there's a problem searching or processing the data\n     */\n    static async searchEventsByName(searchTerm: string) {\n        Logger.debug('EventsService.searchEventsByName called', { searchTerm });\n        \n        try {\n            const trimmedSearchTerm = searchTerm.trim();\n            const events = await eventRepository.searchByName(trimmedSearchTerm);\n            \n            const enrichedEvents = await this.enrichEventsWithTicketInfo(events);\n\n            Logger.info('Events search completed successfully', { \n                searchTerm: trimmedSearchTerm, \n                count: enrichedEvents.length \n            });\n\n            return {\n                events: enrichedEvents,\n                count: enrichedEvents.length,\n                searchTerm: trimmedSearchTerm\n            };\n        } catch (error) {\n            Logger.error('Error in searchEventsByName:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Enrich events with ticket information\n     * @param events - Array of events to enrich\n     * @returns A promise that resolves to an array of enriched events\n     */\n    private static async enrichEventsWithTicketInfo(events: any[]) {\n        let enrichedEvents: EventOverview[] = [];\n        \n        for (let event of events) {\n            let eventOverview: EventOverview = {\n                id: event.id,\n                title: event.title,\n                description: event.description || undefined,\n                start_time: event.start_time.toString(),\n                end_time: event.end_time.toString()\n            }\n\n            const ticketBatch = await ticketBatchRepository.findFirstByEventId(event.id);\n            const totalTickets = ticketBatch?.total_tickets || 0;\n            const ticketPrice = ticketBatch?.price;\n\n            const orders = await orderRepository.findByEventId(event.id);\n            let soldTickets = 0;\n            \n            if (orders.length > 0) {\n                soldTickets = orders.reduce((sum: number, order: any) => sum + order.total_amount, 0);\n            }\n            \n            eventOverview.total_tickets = totalTickets;\n            eventOverview.tickets_left = totalTickets - soldTickets;\n            eventOverview.price = ticketPrice;\n\n            enrichedEvents.push(eventOverview);\n        }\n        \n        return enrichedEvents;\n    }\n}"]}