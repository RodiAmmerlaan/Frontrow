{"version":3,"file":"BaseService.js","sourceRoot":"","sources":["../../src/services/BaseService.ts"],"names":[],"mappings":";;;;;;AAAA,6DAAqC;AAErC,MAAa,WAAW;IAGtB;QACE,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACO,WAAW,CAAC,KAAU,EAAE,SAAiB,EAAE,UAAmB,IAAI;QAC1E,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,SAAS,GAAG,EAAE,KAAK,CAAC,CAAC;QAEnD,IAAI,OAAO,EAAE,CAAC;YACZ,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;CACF;AApBD,kCAoBC","sourcesContent":["import Logger from '../utils/logger';\r\n\r\nexport class BaseService {\r\n  protected logger: typeof Logger;\r\n  \r\n  constructor() {\r\n    this.logger = Logger;\r\n  }\r\n  \r\n  /**\r\n   * Handles common error scenarios and logs them appropriately\r\n   * @param error - The error to handle\r\n   * @param operation - The operation that was being performed\r\n   * @param rethrow - Whether to rethrow the error (default: true)\r\n   */\r\n  protected handleError(error: any, operation: string, rethrow: boolean = true): void {\r\n    this.logger.error(`Error in ${operation}:`, error);\r\n    \r\n    if (rethrow) {\r\n      throw error;\r\n    }\r\n  }\r\n}"]}