{"version":3,"file":"CrudService.js","sourceRoot":"","sources":["../../src/services/CrudService.ts"],"names":[],"mappings":";;;AAEA;;;;GAIG;AACH,MAAa,WAAW;IAGtB,YAAY,UAAiC;QAC3C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,QAAQ,CAAC,EAAM;QACnB,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,OAAO;QACX,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,MAAqB;QAChC,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CAAC,EAAM,EAAE,MAAkB;QACrC,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,EAAM;QACjB,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,EAAM;QACjB,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC;CACF;AA5DD,kCA4DC","sourcesContent":["import { BaseRepository } from \"../repositories/BaseRepository\";\r\n\r\n/**\r\n * Generic CRUD service base class that provides common CRUD operations\r\n * This class should be extended by specific service classes to provide\r\n * type-safe CRUD operations for specific entities\r\n */\r\nexport class CrudService<T, ID> {\r\n  protected repository: BaseRepository<T, ID>;\r\n\r\n  constructor(repository: BaseRepository<T, ID>) {\r\n    this.repository = repository;\r\n  }\r\n\r\n  /**\r\n   * Find an entity by its ID\r\n   * @param id - The unique identifier of the entity\r\n   * @returns A promise that resolves to the entity or null if not found\r\n   */\r\n  async findById(id: ID): Promise<T | null> {\r\n    return await this.repository.findById(id);\r\n  }\r\n\r\n  /**\r\n   * Find all entities\r\n   * @returns A promise that resolves to an array of all entities\r\n   */\r\n  async findAll(): Promise<T[]> {\r\n    return await this.repository.findAll();\r\n  }\r\n\r\n  /**\r\n   * Create a new entity\r\n   * @param entity - The entity data to create\r\n   * @returns A promise that resolves to the created entity\r\n   */\r\n  async create(entity: Omit<T, 'id'>): Promise<T> {\r\n    return await this.repository.create(entity);\r\n  }\r\n\r\n  /**\r\n   * Update an existing entity\r\n   * @param id - The unique identifier of the entity to update\r\n   * @param entity - The updated entity data\r\n   * @returns A promise that resolves to the updated entity or null if not found\r\n   */\r\n  async update(id: ID, entity: Partial<T>): Promise<T | null> {\r\n    return await this.repository.update(id, entity);\r\n  }\r\n\r\n  /**\r\n   * Delete an entity by its ID\r\n   * @param id - The unique identifier of the entity to delete\r\n   * @returns A promise that resolves to true if deletion was successful, false otherwise\r\n   */\r\n  async delete(id: ID): Promise<boolean> {\r\n    return await this.repository.delete(id);\r\n  }\r\n\r\n  /**\r\n   * Check if an entity exists by its ID\r\n   * @param id - The unique identifier to check\r\n   * @returns A promise that resolves to true if the entity exists, false otherwise\r\n   */\r\n  async exists(id: ID): Promise<boolean> {\r\n    return await this.repository.exists(id);\r\n  }\r\n}"]}