{"version":3,"file":"validation.util.js","sourceRoot":"","sources":["../../src/utils/validation.util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Shared validation utilities for common validation scenarios\r\n * These utilities provide reusable validation functions that can be used\r\n * across services and controllers to ensure consistent validation logic\r\n */\r\n\r\nimport { ValidationError } from '../errors/CustomErrors';\r\n\r\n/**\r\n * Validates that a value is not null, undefined, or empty\r\n * @param value - The value to validate\r\n * @param fieldName - The name of the field being validated (for error messages)\r\n * @throws ValidationError if the value is null, undefined, or empty\r\n */\r\nexport function validateRequired<T>(value: T, fieldName: string): void {\r\n  if (value === null || value === undefined || value === '') {\r\n    throw new ValidationError(`${fieldName} is required`);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates that a string is not empty after trimming\r\n * @param value - The string to validate\r\n * @param fieldName - The name of the field being validated (for error messages)\r\n * @throws ValidationError if the string is null, undefined, or empty after trimming\r\n */\r\nexport function validateNonEmptyString(value: string | null | undefined, fieldName: string): void {\r\n  if (!value || value.trim() === '') {\r\n    throw new ValidationError(`${fieldName} cannot be empty`);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates that a number is a positive integer\r\n * @param value - The number to validate\r\n * @param fieldName - The name of the field being validated (for error messages)\r\n * @throws ValidationError if the number is not a positive integer\r\n */\r\nexport function validatePositiveInteger(value: number | null | undefined, fieldName: string): void {\r\n  if (value === null || value === undefined || !Number.isInteger(value) || value < 1) {\r\n    throw new ValidationError(`${fieldName} must be a positive integer`);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates that a number is non-negative\r\n * @param value - The number to validate\r\n * @param fieldName - The name of the field being validated (for error messages)\r\n * @throws ValidationError if the number is negative\r\n */\r\nexport function validateNonNegativeNumber(value: number | null | undefined, fieldName: string): void {\r\n  if (value === null || value === undefined || value < 0) {\r\n    throw new ValidationError(`${fieldName} must be a non-negative number`);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates that an optional number is an integer within a specified range\r\n * @param value - The number to validate\r\n * @param fieldName - The name of the field being validated (for error messages)\r\n * @param min - Minimum allowed value (inclusive)\r\n * @param max - Maximum allowed value (inclusive)\r\n * @throws ValidationError if the number is not an integer within the specified range\r\n */\r\nexport function validateOptionalInteger(value: number | null | undefined, fieldName: string, min: number, max: number): void {\r\n  if (value === null || value === undefined) {\r\n    return; \r\n  }\r\n  \r\n  if (!Number.isInteger(value) || value < min || value > max) {\r\n    throw new ValidationError(`${fieldName} must be an integer between ${min} and ${max}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates that an email has a valid format\r\n * @param email - The email to validate\r\n * @param fieldName - The name of the field being validated (for error messages)\r\n * @throws ValidationError if the email format is invalid\r\n */\r\nexport function validateEmail(email: string | null | undefined, fieldName: string): void {\r\n  if (!email) {\r\n    throw new ValidationError(`${fieldName} is required`);\r\n  }\r\n  \r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  if (!emailRegex.test(email)) {\r\n    throw new ValidationError(`${fieldName} must be a valid email address`);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates that a password meets minimum security requirements\r\n * @param password - The password to validate\r\n * @param minLength - Minimum length requirement (default: 8)\r\n * @throws ValidationError if the password doesn't meet requirements\r\n */\r\nexport function validatePassword(password: string | null | undefined, minLength: number = 8): void {\r\n  if (!password) {\r\n    throw new ValidationError('Password is required');\r\n  }\r\n  \r\n  if (password.length < minLength) {\r\n    throw new ValidationError(`Password must be at least ${minLength} characters long`);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates that a date is a valid Date object or valid date string\r\n * @param date - The date to validate\r\n * @param fieldName - The name of the field being validated (for error messages)\r\n * @throws ValidationError if the date is invalid\r\n */\r\nexport function validateDate(date: Date | string | null | undefined, fieldName: string): void {\r\n  if (!date) {\r\n    throw new ValidationError(`${fieldName} is required`);\r\n  }\r\n  \r\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n  if (!(dateObj instanceof Date) || isNaN(dateObj.getTime())) {\r\n    throw new ValidationError(`${fieldName} must be a valid date`);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates that a UUID has a valid format\r\n * @param uuid - The UUID to validate\r\n * @param fieldName - The name of the field being validated (for error messages)\r\n * @throws ValidationError if the UUID format is invalid\r\n */\r\nexport function validateUUID(uuid: string | null | undefined, fieldName: string): void {\r\n  if (!uuid) {\r\n    throw new ValidationError(`${fieldName} is required`);\r\n  }\r\n  \r\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\r\n  if (!uuidRegex.test(uuid)) {\r\n    throw new ValidationError(`${fieldName} must be a valid UUID`);\r\n  }\r\n}\r\n\r\nexport default {\r\n  validateRequired,\r\n  validateNonEmptyString,\r\n  validatePositiveInteger,\r\n  validateNonNegativeNumber,\r\n  validateOptionalInteger,\r\n  validateEmail,\r\n  validatePassword,\r\n  validateDate,\r\n  validateUUID\r\n};"]}