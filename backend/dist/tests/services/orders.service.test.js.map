{"version":3,"file":"orders.service.test.js","sourceRoot":"","sources":["../../../tests/services/orders.service.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { BadRequestError, InternalServerError, NotFoundError } from '../../src/errors';\r\n\r\nconst mockOrderRepository = {\r\n  buyTickets: jest.fn(),\r\n  findById: jest.fn(),\r\n  findByUserId: jest.fn(),\r\n  getEventSalesDetails: jest.fn(),\r\n  getUserPurchaseDetails: jest.fn(),\r\n  findByEventId: jest.fn()\r\n};\r\n\r\nconst mockTicketRepository = {\r\n  createTickets: jest.fn(),\r\n  findByOrderId: jest.fn()\r\n};\r\n\r\nconst mockUserRepository = {\r\n  findById: jest.fn()\r\n};\r\n\r\nconst mockEventRepository = {\r\n  findById: jest.fn()\r\n};\r\n\r\nconst mockTicketBatchRepository = {\r\n  findFirstByEventId: jest.fn()\r\n};\r\n\r\njest.mock('../../src/repositories/OrderRepositoryImpl', () => {\r\n  return {\r\n    OrderRepositoryImpl: jest.fn(() => mockOrderRepository)\r\n  };\r\n});\r\n\r\njest.mock('../../src/repositories/TicketRepositoryImpl', () => {\r\n  return {\r\n    TicketRepositoryImpl: jest.fn(() => mockTicketRepository)\r\n  };\r\n});\r\n\r\njest.mock('../../src/repositories/UserRepositoryImpl', () => {\r\n  return {\r\n    UserRepositoryImpl: jest.fn(() => mockUserRepository)\r\n  };\r\n});\r\n\r\njest.mock('../../src/repositories/EventRepositoryImpl', () => {\r\n  return {\r\n    EventRepositoryImpl: jest.fn(() => mockEventRepository)\r\n  };\r\n});\r\n\r\njest.mock('../../src/repositories/TicketBatchRepositoryImpl', () => {\r\n  return {\r\n    TicketBatchRepositoryImpl: jest.fn(() => mockTicketBatchRepository)\r\n  };\r\n});\r\n\r\njest.mock('../../src/utils/logger', () => ({\r\n  debug: jest.fn(),\r\n  info: jest.fn(),\r\n  warn: jest.fn(),\r\n  error: jest.fn()\r\n}));\r\n\r\nconst { OrdersService } = require('../../src/services/orders.service');\r\n\r\ndescribe('OrdersService', () => {\r\n  const mockOrder = {\r\n    id: 'order-123',\r\n    user_id: 'user-123',\r\n    event_id: 'event-123',\r\n    total_amount: 2,\r\n    created_at: new Date()\r\n  };\r\n\r\n  const mockEvent = {\r\n    id: 'event-123',\r\n    title: 'Test Event',\r\n    description: 'Test Description',\r\n    start_time: new Date(),\r\n    end_time: new Date(),\r\n    created_by: 'user-456',\r\n    created_at: new Date()\r\n  };\r\n\r\n  const mockUser = {\r\n    id: 'user-123',\r\n    email: 'test@example.com',\r\n    first_name: 'Test',\r\n    last_name: 'User',\r\n    role: 'USER'\r\n  };\r\n\r\n  const mockTicketBatch = {\r\n    id: 'batch-123',\r\n    event_id: 'event-123',\r\n    total_tickets: 100,\r\n    price: 50,\r\n    created_at: new Date()\r\n  };\r\n\r\n  const mockTickets = [\r\n    { id: 'ticket-1', order_id: 'order-123', assigned_to: 'user-123' },\r\n    { id: 'ticket-2', order_id: 'order-123', assigned_to: 'user-123' }\r\n  ];\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('processTicketPurchase', () => {\r\n    it('should process ticket purchase successfully', async () => {\r\n      mockEventRepository.findById.mockResolvedValue(mockEvent);\r\n      mockUserRepository.findById.mockResolvedValue(mockUser);\r\n      mockTicketBatchRepository.findFirstByEventId.mockResolvedValue(mockTicketBatch);\r\n      mockOrderRepository.findByEventId.mockResolvedValue([]);\r\n      mockOrderRepository.buyTickets.mockResolvedValue(mockOrder);\r\n      mockTicketRepository.createTickets.mockResolvedValue(mockTickets);\r\n\r\n      const result = await OrdersService.processTicketPurchase('event-123', 'user-123', 2);\r\n\r\n      expect(mockEventRepository.findById).toHaveBeenCalledWith('event-123');\r\n      expect(mockUserRepository.findById).toHaveBeenCalledWith('user-123');\r\n      expect(mockTicketBatchRepository.findFirstByEventId).toHaveBeenCalledWith('event-123');\r\n      expect(mockOrderRepository.findByEventId).toHaveBeenCalledWith('event-123');\r\n      expect(mockOrderRepository.buyTickets).toHaveBeenCalledWith('event-123', 'user-123', 2);\r\n      expect(mockTicketRepository.createTickets).toHaveBeenCalledWith('order-123', 'user-123', 2);\r\n      expect(result).toEqual(mockTickets);\r\n    });\r\n\r\n    it('should throw NotFoundError when event is not found', async () => {\r\n      mockEventRepository.findById.mockResolvedValue(null);\r\n      await expect(OrdersService.processTicketPurchase('event-123', 'user-123', 2))\r\n        .rejects\r\n        .toThrow(NotFoundError);\r\n    });\r\n\r\n    it('should throw NotFoundError when user is not found', async () => {\r\n      mockEventRepository.findById.mockResolvedValue(mockEvent);\r\n      mockUserRepository.findById.mockResolvedValue(null);\r\n\r\n      await expect(OrdersService.processTicketPurchase('event-123', 'user-123', 2))\r\n        .rejects\r\n        .toThrow(NotFoundError);\r\n    });\r\n\r\n    it('should throw NotFoundError when ticket batch is not found', async () => {\r\n      mockEventRepository.findById.mockResolvedValue(mockEvent);\r\n      mockUserRepository.findById.mockResolvedValue(mockUser);\r\n      mockTicketBatchRepository.findFirstByEventId.mockResolvedValue(null);\r\n\r\n      await expect(OrdersService.processTicketPurchase('event-123', 'user-123', 2))\r\n        .rejects\r\n        .toThrow(NotFoundError);\r\n    });\r\n\r\n    it('should throw BadRequestError when not enough tickets are available', async () => {\r\n      mockEventRepository.findById.mockResolvedValue(mockEvent);\r\n      mockUserRepository.findById.mockResolvedValue(mockUser);\r\n      mockTicketBatchRepository.findFirstByEventId.mockResolvedValue({\r\n        ...mockTicketBatch,\r\n        total_tickets: 1\r\n      });\r\n      mockOrderRepository.findByEventId.mockResolvedValue([{ total_amount: 1 }]);\r\n\r\n      await expect(OrdersService.processTicketPurchase('event-123', 'user-123', 2))\r\n        .rejects\r\n        .toThrow(BadRequestError);\r\n    });\r\n\r\n    it('should throw an error when processing ticket purchase fails', async () => {\r\n      mockEventRepository.findById.mockResolvedValue(mockEvent);\r\n      mockUserRepository.findById.mockResolvedValue(mockUser);\r\n      mockTicketBatchRepository.findFirstByEventId.mockResolvedValue(mockTicketBatch);\r\n      mockOrderRepository.findByEventId.mockResolvedValue([]);\r\n      mockOrderRepository.buyTickets.mockRejectedValue(new Error('Database error'));\r\n\r\n      await expect(OrdersService.processTicketPurchase('event-123', 'user-123', 2))\r\n        .rejects\r\n        .toThrow('Database error');\r\n    });\r\n  });\r\n\r\n  describe('getOrderById', () => {\r\n    it('should return an order by ID with tickets', async () => {\r\n      mockOrderRepository.findById.mockResolvedValue(mockOrder);\r\n      mockTicketRepository.findByOrderId.mockResolvedValue(mockTickets);\r\n\r\n      const result = await OrdersService.getOrderById('order-123');\r\n\r\n      expect(mockOrderRepository.findById).toHaveBeenCalledWith('order-123');\r\n      expect(mockTicketRepository.findByOrderId).toHaveBeenCalledWith('order-123');\r\n      expect(result).toEqual({\r\n        ...mockOrder,\r\n        tickets: mockTickets\r\n      });\r\n    });\r\n\r\n    it('should throw NotFoundError when order is not found', async () => {\r\n      mockOrderRepository.findById.mockResolvedValue(null);\r\n\r\n      await expect(OrdersService.getOrderById('order-123'))\r\n        .rejects\r\n        .toThrow(NotFoundError);\r\n    });\r\n\r\n    it('should throw an error when fetching order fails', async () => {\r\n      mockOrderRepository.findById.mockRejectedValue(new Error('Database error'));\r\n\r\n      await expect(OrdersService.getOrderById('order-123'))\r\n        .rejects\r\n        .toThrow('Database error');\r\n    });\r\n  });\r\n\r\n  describe('getUserOrders', () => {\r\n    it('should return orders for a user with tickets', async () => {\r\n      const mockOrders = [mockOrder];\r\n      mockOrderRepository.findByUserId.mockResolvedValue(mockOrders);\r\n      mockTicketRepository.findByOrderId.mockResolvedValue(mockTickets);\r\n\r\n      const result = await OrdersService.getUserOrders('user-123');\r\n\r\n      expect(mockOrderRepository.findByUserId).toHaveBeenCalledWith('user-123');\r\n      expect(mockTicketRepository.findByOrderId).toHaveBeenCalledWith('order-123');\r\n      expect(result).toEqual([{\r\n        ...mockOrder,\r\n        tickets: mockTickets\r\n      }]);\r\n    });\r\n\r\n    it('should throw an error when fetching user orders fails', async () => {\r\n      mockOrderRepository.findByUserId.mockRejectedValue(new Error('Database error'));\r\n\r\n      await expect(OrdersService.getUserOrders('user-123'))\r\n        .rejects\r\n        .toThrow('Database error');\r\n    });\r\n  });\r\n});"]}