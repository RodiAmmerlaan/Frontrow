{"version":3,"file":"token.service.test.js","sourceRoot":"","sources":["../../../tests/services/token.service.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as bcrypt from 'bcrypt';\r\nimport * as tokenService from '../../src/services/token.service';\r\n\r\njest.mock('bcrypt');\r\n\r\n// Mock the PrismaClient\r\njest.mock('@prisma/client', () => {\r\n  const mockPrismaClient = {\r\n    refreshToken: {\r\n      create: jest.fn(),\r\n      findMany: jest.fn()\r\n    }\r\n  };\r\n  \r\n  return {\r\n    PrismaClient: jest.fn(() => mockPrismaClient)\r\n  };\r\n});\r\n\r\ndescribe('Token Service', () => {\r\n  const mockTokenRecord = {\r\n    id: 1n,\r\n    user_id: 'user-123',\r\n    hashedtoken: 'hashed-token',\r\n    createdat: new Date(),\r\n    expiresat: new Date(Date.now() + 86400000), // 1 day from now\r\n    revokedat: null\r\n  };\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('issueRefreshToken', () => {\r\n    it('should create a new refresh token record in the database', async () => {\r\n      // Import PrismaClient inside the test to get the mocked version\r\n      const { PrismaClient } = require('@prisma/client');\r\n      const mockPrismaClient = new PrismaClient();\r\n      \r\n      mockPrismaClient.refreshToken.create.mockResolvedValue(mockTokenRecord);\r\n      (bcrypt.hash as jest.Mock).mockResolvedValue('hashed-token');\r\n\r\n      const result = await tokenService.issueRefreshToken('user-123', 'raw-token');\r\n\r\n      // Check that bcrypt.hash was called with the correct parameters\r\n      expect(bcrypt.hash).toHaveBeenCalledWith('raw-token', 8);\r\n      expect(bcrypt.hash).toHaveBeenCalledWith('raw-token', 5);\r\n      \r\n      expect(mockPrismaClient.refreshToken.create).toHaveBeenCalledWith({\r\n        data: {\r\n          user_id: 'user-123',\r\n          hashedtoken: 'hashed-token',\r\n          expiresat: expect.any(Date)\r\n        }\r\n      });\r\n      expect(result).toEqual(mockTokenRecord);\r\n    });\r\n  });\r\n\r\n  describe('validateRefreshtoken', () => {\r\n    it('should validate a refresh token and return the token record if valid', async () => {\r\n      const mockTokens = [\r\n        {\r\n          id: 1n,\r\n          user_id: 'user-123',\r\n          hashedtoken: 'hashed-token-1',\r\n          createdat: new Date(),\r\n          expiresat: new Date(Date.now() + 86400000), // 1 day from now\r\n          revokedat: null\r\n        }\r\n      ];\r\n      \r\n      // Import PrismaClient inside the test to get the mocked version\r\n      const { PrismaClient } = require('@prisma/client');\r\n      const mockPrismaClient = new PrismaClient();\r\n      \r\n      mockPrismaClient.refreshToken.findMany.mockResolvedValue(mockTokens);\r\n      (bcrypt.compare as jest.Mock).mockResolvedValue(true);\r\n\r\n      const result = await tokenService.validateRefreshtoken('user-123', 'raw-token');\r\n\r\n      // Check that refreshToken.findMany was called\r\n      expect(mockPrismaClient.refreshToken.findMany).toHaveBeenCalled();\r\n      expect(bcrypt.compare).toHaveBeenCalledWith('raw-token', 'hashed-token-1');\r\n      expect(result).toEqual(mockTokens[0]);\r\n    });\r\n\r\n    it('should return null when no valid tokens are found', async () => {\r\n      // Import PrismaClient inside the test to get the mocked version\r\n      const { PrismaClient } = require('@prisma/client');\r\n      const mockPrismaClient = new PrismaClient();\r\n      \r\n      mockPrismaClient.refreshToken.findMany.mockResolvedValue([]);\r\n      \r\n      const result = await tokenService.validateRefreshtoken('user-123', 'raw-token');\r\n\r\n      expect(result).toBeNull();\r\n    });\r\n  });\r\n});"]}