{"version":3,"file":"token.service.test.js","sourceRoot":"","sources":["../../../tests/services/token.service.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as tokenService from '../../src/services/token.service';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport * as bcrypt from 'bcrypt';\r\nimport * as crypto from 'crypto';\r\n\r\njest.mock('jsonwebtoken');\r\njest.mock('bcrypt');\r\njest.mock('crypto');\r\njest.mock('@prisma/client', () => {\r\n  const mockRefreshToken = {\r\n    create: jest.fn(),\r\n    findMany: jest.fn()\r\n  };\r\n  \r\n  return {\r\n    PrismaClient: jest.fn(() => ({\r\n      refreshToken: mockRefreshToken\r\n    }))\r\n  };\r\n});\r\n\r\njest.mock('../../src/config', () => ({\r\n  JWT_CONFIG: {\r\n    ACCESS_SECRET: 'test-secret',\r\n    REFRESH_TTL_DAYS: 30\r\n  }\r\n}));\r\n\r\ndescribe('Token Service', () => {\r\n  const mockJwtPayload = {\r\n    sub: 'user-123',\r\n    email: 'test@example.com',\r\n    role: 'USER'\r\n  };\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('signAccessToken', () => {\r\n    it('should sign a JWT access token with the provided payload', () => {\r\n      (jwt.sign as jest.Mock).mockReturnValue('signed-token');\r\n\r\n      const result = tokenService.signAccessToken(mockJwtPayload);\r\n\r\n      expect(jwt.sign).toHaveBeenCalledWith(mockJwtPayload, 'test-secret');\r\n      expect(result).toBe('signed-token');\r\n    });\r\n  });\r\n\r\n  describe('verifyAccessToken', () => {\r\n    it('should verify a JWT access token and return the decoded payload', () => {\r\n      const decodedPayload = { ...mockJwtPayload, iat: 1234567890, exp: 1234571490 };\r\n      (jwt.verify as jest.Mock).mockReturnValue(decodedPayload);\r\n\r\n      const result = tokenService.verifyAccessToken('valid-token');\r\n\r\n      expect(jwt.verify).toHaveBeenCalledWith('valid-token', 'test-secret');\r\n      expect(result).toEqual(decodedPayload);\r\n    });\r\n  });\r\n\r\n  describe('generateRefreshToken', () => {\r\n    it('should generate a cryptographically secure random refresh token', () => {\r\n      const mockRandomBytes = Buffer.from('72616e646f6d686578737472696e67', 'hex'); // 'randomhexstring' in hex\r\n      (crypto.randomBytes as jest.Mock).mockImplementation(() => mockRandomBytes);\r\n\r\n      const result = tokenService.generateRefreshToken();\r\n\r\n      expect(crypto.randomBytes).toHaveBeenCalledWith(48);\r\n      expect(result).toBe('72616e646f6d686578737472696e67');\r\n    });\r\n  });\r\n\r\n  describe('issueRefreshToken', () => {\r\n    it('should create a new refresh token record in the database', async () => {\r\n      const mockTokenRecord = {\r\n        id: 1n,\r\n        user_id: 'user-123',\r\n        hashedtoken: 'hashed-token',\r\n        createdat: new Date(),\r\n        expiresat: new Date(),\r\n        revokedat: null\r\n      };\r\n      \r\n      const { PrismaClient } = require('@prisma/client');\r\n      const mockPrismaClient = new PrismaClient();\r\n      mockPrismaClient.refreshToken.create.mockResolvedValue(mockTokenRecord);\r\n      (bcrypt.hash as jest.Mock).mockResolvedValue('hashed-token');\r\n\r\n      const result = await tokenService.issueRefreshToken('user-123', 'raw-token');\r\n\r\n      expect(bcrypt.hash).toHaveBeenCalledWith('raw-token', 10);\r\n      expect(mockPrismaClient.refreshToken.create).toHaveBeenCalledWith({\r\n        data: {\r\n          user_id: 'user-123',\r\n          hashedtoken: 'hashed-token',\r\n          expiresat: expect.any(Date)\r\n        }\r\n      });\r\n      expect(result).toEqual(mockTokenRecord);\r\n    });\r\n  });\r\n\r\n  describe('validateRefreshtoken', () => {\r\n    it('should validate a refresh token and return the token record if valid', async () => {\r\n      const mockTokens = [\r\n        {\r\n          id: 1n,\r\n          user_id: 'user-123',\r\n          hashedtoken: 'hashed-token-1',\r\n          createdat: new Date(),\r\n          expiresat: new Date(Date.now() + 86400000), // 1 day from now\r\n          revokedat: null\r\n        }\r\n      ];\r\n      \r\n      const { PrismaClient } = require('@prisma/client');\r\n      const mockPrismaClient = new PrismaClient();\r\n      mockPrismaClient.refreshToken.findMany.mockResolvedValue(mockTokens);\r\n      (bcrypt.compare as jest.Mock).mockResolvedValue(true);\r\n\r\n      const result = await tokenService.validateRefreshtoken('user-123', 'raw-token');\r\n\r\n      expect(mockPrismaClient.refreshToken.findMany).toHaveBeenCalledWith({\r\n        where: {\r\n          user_id: 'user-123',\r\n          revokedat: null,\r\n          expiresat: { gt: expect.any(Date) }\r\n        }\r\n      });\r\n      expect(bcrypt.compare).toHaveBeenCalledWith('raw-token', 'hashed-token-1');\r\n      expect(result).toEqual(mockTokens[0]);\r\n    });\r\n\r\n    it('should return null when no valid tokens are found', async () => {\r\n      const { PrismaClient } = require('@prisma/client');\r\n      const mockPrismaClient = new PrismaClient();\r\n      mockPrismaClient.refreshToken.findMany.mockResolvedValue([]);\r\n      \r\n      const result = await tokenService.validateRefreshtoken('user-123', 'raw-token');\r\n\r\n      expect(result).toBeNull();\r\n    });\r\n  });\r\n});"]}