{"version":3,"file":"events.service.test.js","sourceRoot":"","sources":["../../../tests/services/events.service.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConflictError, InternalServerError, NotFoundError } from '../../src/errors';\r\n\r\nconst mockEventRepository = {\r\n  findAllByDate: jest.fn(),\r\n  findEventById: jest.fn(),\r\n  createEventWithDetails: jest.fn(),\r\n  findByTitle: jest.fn(),\r\n  searchByName: jest.fn()\r\n};\r\n\r\nconst mockTicketBatchRepository = {\r\n  findFirstByEventId: jest.fn(),\r\n  createTicketBatch: jest.fn()\r\n};\r\n\r\nconst mockOrderRepository = {\r\n  findByEventId: jest.fn()\r\n};\r\n\r\njest.mock('../../src/repositories/EventRepositoryImpl', () => {\r\n  return {\r\n    EventRepositoryImpl: jest.fn(() => mockEventRepository)\r\n  };\r\n});\r\n\r\njest.mock('../../src/repositories/TicketBatchRepositoryImpl', () => {\r\n  return {\r\n    TicketBatchRepositoryImpl: jest.fn(() => mockTicketBatchRepository)\r\n  };\r\n});\r\n\r\njest.mock('../../src/repositories/OrderRepositoryImpl', () => {\r\n  return {\r\n    OrderRepositoryImpl: jest.fn(() => mockOrderRepository)\r\n  };\r\n});\r\n\r\njest.mock('../../src/utils/logger', () => ({\r\n  debug: jest.fn(),\r\n  info: jest.fn(),\r\n  warn: jest.fn(),\r\n  error: jest.fn()\r\n}));\r\n\r\nconst { EventsService } = require('../../src/services/events.service');\r\n\r\ndescribe('EventsService', () => {\r\n  const mockEvent = {\r\n    id: 'event-123',\r\n    title: 'Test Event',\r\n    description: 'Test Description',\r\n    start_time: new Date(),\r\n    end_time: new Date(),\r\n    created_at: new Date()\r\n  };\r\n\r\n  const mockTicketBatch = {\r\n    id: 'batch-123',\r\n    event_id: 'event-123',\r\n    total_tickets: 100,\r\n    price: 50,\r\n    created_at: new Date()\r\n  };\r\n\r\n  const mockOrder = {\r\n    id: 'order-123',\r\n    event_id: 'event-123',\r\n    total_amount: 10,\r\n    created_at: new Date()\r\n  };\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('getEnrichedEvents', () => {\r\n    it('should return enriched events', async () => {\r\n      const mockEvents = [mockEvent];\r\n      const enrichedEvent = {\r\n        id: mockEvent.id,\r\n        title: mockEvent.title,\r\n        description: mockEvent.description,\r\n        start_time: mockEvent.start_time.toString(),\r\n        end_time: mockEvent.end_time.toString(),\r\n        total_tickets: 100,\r\n        tickets_left: 90,\r\n        price: 50\r\n      };\r\n\r\n      mockEventRepository.findAllByDate.mockResolvedValue(mockEvents);\r\n      mockTicketBatchRepository.findFirstByEventId.mockResolvedValue(mockTicketBatch);\r\n      mockOrderRepository.findByEventId.mockResolvedValue([mockOrder]);\r\n\r\n      const result = await EventsService.getEnrichedEvents();\r\n\r\n      expect(mockEventRepository.findAllByDate).toHaveBeenCalled();\r\n      expect(result).toEqual([enrichedEvent]);\r\n    });\r\n\r\n    it('should throw an error when fetching enriched events fails', async () => {\r\n      mockEventRepository.findAllByDate.mockRejectedValue(new Error('Database error'));\r\n\r\n      await expect(EventsService.getEnrichedEvents())\r\n        .rejects\r\n        .toThrow('Database error');\r\n    });\r\n  });\r\n\r\n  describe('getEventById', () => {\r\n    it('should return an event by ID with enriched details', async () => {\r\n      const enrichedEvent = {\r\n        id: mockEvent.id,\r\n        title: mockEvent.title,\r\n        description: mockEvent.description,\r\n        start_time: mockEvent.start_time,\r\n        end_time: mockEvent.end_time,\r\n        total_tickets: 100,\r\n        tickets_left: 90,\r\n        price: 50,\r\n        created_at: mockEvent.created_at\r\n      };\r\n\r\n      mockEventRepository.findEventById.mockResolvedValue(mockEvent);\r\n      mockTicketBatchRepository.findFirstByEventId.mockResolvedValue(mockTicketBatch);\r\n      mockOrderRepository.findByEventId.mockResolvedValue([mockOrder]);\r\n\r\n      const result = await EventsService.getEventById('event-123');\r\n\r\n      expect(mockEventRepository.findEventById).toHaveBeenCalledWith('event-123');\r\n      expect(result).toEqual(enrichedEvent);\r\n    });\r\n\r\n    it('should throw NotFoundError when event is not found', async () => {\r\n      mockEventRepository.findEventById.mockResolvedValue(null);\r\n\r\n      await expect(EventsService.getEventById('event-123'))\r\n        .rejects\r\n        .toThrow(NotFoundError);\r\n    });\r\n\r\n    it('should throw an error when fetching event fails', async () => {\r\n      mockEventRepository.findEventById.mockRejectedValue(new Error('Database error'));\r\n\r\n      await expect(EventsService.getEventById('event-123'))\r\n        .rejects\r\n        .toThrow('Database error');\r\n    });\r\n  });\r\n\r\n  describe('createEvent', () => {\r\n    it('should create a new event successfully', async () => {\r\n      const eventData = {\r\n        title: 'Test Event',\r\n        description: 'Test Description',\r\n        date: '2023-12-25',\r\n        start_time: '10:00',\r\n        end_time: '12:00',\r\n        total_tickets: 100,\r\n        price: 50\r\n      };\r\n\r\n      const eventDb = { ...mockEvent, id: 'event-123' };\r\n      \r\n      mockEventRepository.findByTitle.mockResolvedValue(null);\r\n      mockEventRepository.createEventWithDetails.mockResolvedValue(eventDb);\r\n      mockTicketBatchRepository.createTicketBatch.mockResolvedValue(mockTicketBatch);\r\n\r\n      const result = await EventsService.createEvent(eventData);\r\n\r\n      expect(mockEventRepository.findByTitle).toHaveBeenCalledWith(eventData.title);\r\n      expect(mockEventRepository.createEventWithDetails).toHaveBeenCalled();\r\n      expect(mockTicketBatchRepository.createTicketBatch).toHaveBeenCalledWith(\r\n        'event-123',\r\n        eventData.total_tickets,\r\n        eventData.price\r\n      );\r\n      expect(result).toEqual({ message: \"Event created\" });\r\n    });\r\n\r\n    it('should throw ConflictError when event with same title already exists', async () => {\r\n      const eventData = {\r\n        title: 'Test Event',\r\n        description: 'Test Description',\r\n        date: '2023-12-25',\r\n        start_time: '10:00',\r\n        end_time: '12:00',\r\n        total_tickets: 100,\r\n        price: 50\r\n      };\r\n\r\n      mockEventRepository.findByTitle.mockResolvedValue(mockEvent);\r\n\r\n      await expect(EventsService.createEvent(eventData))\r\n        .rejects\r\n        .toThrow(ConflictError);\r\n    });\r\n\r\n    it('should throw an error when event creation fails', async () => {\r\n        const eventData = {\r\n        title: 'Test Event',\r\n        description: 'Test Description',\r\n        date: '2023-12-25',\r\n        start_time: '10:00',\r\n        end_time: '12:00',\r\n        total_tickets: 100,\r\n        price: 50\r\n      };\r\n\r\n      mockEventRepository.findByTitle.mockResolvedValue(null);\r\n      mockEventRepository.createEventWithDetails.mockRejectedValue(new Error('Database error'));\r\n\r\n      await expect(EventsService.createEvent(eventData))\r\n        .rejects\r\n        .toThrow('Database error');\r\n    });\r\n  });\r\n\r\n  describe('searchEventsByName', () => {\r\n    it('should search events by name and return enriched results', async () => {\r\n      const searchTerm = 'test';\r\n      const mockEvents = [mockEvent];\r\n      const enrichedEvent = {\r\n        id: mockEvent.id,\r\n        title: mockEvent.title,\r\n        description: mockEvent.description,\r\n        start_time: mockEvent.start_time.toString(),\r\n        end_time: mockEvent.end_time.toString(),\r\n        total_tickets: 100,\r\n        tickets_left: 90,\r\n        price: 50\r\n      };\r\n\r\n      mockEventRepository.searchByName.mockResolvedValue(mockEvents);\r\n      mockTicketBatchRepository.findFirstByEventId.mockResolvedValue(mockTicketBatch);\r\n      mockOrderRepository.findByEventId.mockResolvedValue([mockOrder]);\r\n\r\n      const result = await EventsService.searchEventsByName(searchTerm);\r\n\r\n      expect(mockEventRepository.searchByName).toHaveBeenCalledWith(searchTerm);\r\n      expect(result).toEqual({\r\n        events: [enrichedEvent],\r\n        count: 1,\r\n        searchTerm: searchTerm\r\n      });\r\n    });\r\n\r\n    it('should throw an error when searching events fails', async () => {\r\n      const searchTerm = 'test';\r\n      mockEventRepository.searchByName.mockRejectedValue(new Error('Database error'));\r\n\r\n      await expect(EventsService.searchEventsByName(searchTerm))\r\n        .rejects\r\n        .toThrow('Database error');\r\n    });\r\n  });\r\n});"]}