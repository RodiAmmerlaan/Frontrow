{"version":3,"file":"auth.service.test.js","sourceRoot":"","sources":["../../../tests/services/auth.service.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as tokenService from '../../src/services/token.service';\r\nimport * as bcrypt from 'bcrypt';\r\nimport { AuthenticationError, ConflictError, InternalServerError, NotFoundError } from '../../src/errors';\r\nimport { mockUser, mockRefreshTokenRecord } from '../mocks/testUtils';\r\n\r\nconst mockUserRepository = {\r\n  findByEmail: jest.fn(),\r\n  findById: jest.fn(),\r\n  registerUser: jest.fn(),\r\n  findValidTokens: jest.fn(),\r\n  revokeToken: jest.fn()\r\n};\r\n\r\nconst mockRefreshTokenRepository = {\r\n  findValidTokens: jest.fn(),\r\n  revokeToken: jest.fn()\r\n};\r\n\r\njest.mock('../../src/repositories/UserRepositoryImpl', () => {\r\n  return {\r\n    UserRepositoryImpl: jest.fn(() => mockUserRepository)\r\n  };\r\n});\r\n\r\njest.mock('../../src/repositories/RefreshTokenRepositoryImpl', () => {\r\n  return {\r\n    RefreshTokenRepositoryImpl: jest.fn(() => mockRefreshTokenRepository)\r\n  };\r\n});\r\n\r\njest.mock('../../src/services/token.service');\r\n\r\njest.mock('bcrypt');\r\n\r\njest.mock('../../src/utils/logger', () => ({\r\n  debug: jest.fn(),\r\n  info: jest.fn(),\r\n  warn: jest.fn(),\r\n  error: jest.fn()\r\n}));\r\n\r\nconst { AuthService } = require('../../src/services/auth.service');\r\n\r\ndescribe('AuthService', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n\r\n    (tokenService.signAccessToken as jest.Mock).mockReturnValue('mock-access-token');\r\n    (tokenService.generateRefreshToken as jest.Mock).mockReturnValue('mock-refresh-token');\r\n    (tokenService.issueRefreshToken as jest.Mock).mockResolvedValue(mockRefreshTokenRecord);\r\n\r\n    (bcrypt.compare as jest.Mock).mockResolvedValue(true);\r\n    (bcrypt.hash as jest.Mock).mockResolvedValue('hashed-password');\r\n  });\r\n\r\n  describe('authenticateUser', () => {\r\n    it('should authenticate a user with valid credentials', async () => {\r\n      mockUserRepository.findByEmail.mockResolvedValue(mockUser);\r\n\r\n      const result = await AuthService.authenticateUser('test@example.com', 'password123');\r\n\r\n      expect(mockUserRepository.findByEmail).toHaveBeenCalledWith('test@example.com');\r\n      expect(bcrypt.compare).toHaveBeenCalledWith('password123', mockUser.password);\r\n      expect(tokenService.signAccessToken).toHaveBeenCalled();\r\n      expect(tokenService.generateRefreshToken).toHaveBeenCalled();\r\n      expect(tokenService.issueRefreshToken).toHaveBeenCalledWith(mockUser.id, 'mock-refresh-token');\r\n      expect(result).toEqual({\r\n        user: {\r\n          id: mockUser.id,\r\n          email: mockUser.email,\r\n          firstName: mockUser.first_name,\r\n          lastName: mockUser.last_name,\r\n          role: mockUser.role\r\n        },\r\n        accessToken: 'mock-access-token',\r\n        refreshToken: 'mock-refresh-token'\r\n      });\r\n    });\r\n\r\n    it('should throw AuthenticationError when user is not found', async () => {\r\n      mockUserRepository.findByEmail.mockResolvedValue(null);\r\n\r\n      await expect(AuthService.authenticateUser('test@example.com', 'password123'))\r\n        .rejects\r\n        .toThrow(AuthenticationError);\r\n      \r\n      expect(mockUserRepository.findByEmail).toHaveBeenCalledWith('test@example.com');\r\n    });\r\n\r\n    it('should throw AuthenticationError when password is invalid', async () => {\r\n      mockUserRepository.findByEmail.mockResolvedValue(mockUser);\r\n      (bcrypt.compare as jest.Mock).mockResolvedValue(false);\r\n\r\n      await expect(AuthService.authenticateUser('test@example.com', 'wrongpassword'))\r\n        .rejects\r\n        .toThrow(AuthenticationError);\r\n      \r\n      expect(mockUserRepository.findByEmail).toHaveBeenCalledWith('test@example.com');\r\n      expect(bcrypt.compare).toHaveBeenCalledWith('wrongpassword', mockUser.password);\r\n    });\r\n\r\n    it('should throw InternalServerError when an unexpected error occurs', async () => {\r\n      mockUserRepository.findByEmail.mockRejectedValue(new Error('Database error'));\r\n\r\n      await expect(AuthService.authenticateUser('test@example.com', 'password123'))\r\n        .rejects\r\n        .toThrow(InternalServerError);\r\n    });\r\n  });\r\n\r\n  describe('registerUser', () => {\r\n    const userData = {\r\n      email: 'newuser@example.com',\r\n      password: 'password123',\r\n      first_name: 'New',\r\n      last_name: 'User',\r\n      street: 'New Street',\r\n      house_number: '456',\r\n      postal_code: '67890',\r\n      city: 'New City'\r\n    };\r\n\r\n    it('should register a new user successfully', async () => {\r\n      mockUserRepository.findByEmail.mockResolvedValue(null);\r\n      mockUserRepository.registerUser.mockResolvedValue({\r\n        ...mockUser,\r\n        email: userData.email,\r\n        first_name: userData.first_name,\r\n        last_name: userData.last_name,\r\n        street: userData.street,\r\n        house_number: userData.house_number,\r\n        postal_code: userData.postal_code,\r\n        city: userData.city\r\n      } as any);\r\n\r\n      mockUserRepository.findByEmail.mockResolvedValueOnce(null); // First call\r\n      mockUserRepository.findByEmail.mockResolvedValueOnce({\r\n        ...mockUser,\r\n        email: userData.email,\r\n        first_name: userData.first_name,\r\n        last_name: userData.last_name,\r\n        street: userData.street,\r\n        house_number: userData.house_number,\r\n        postal_code: userData.postal_code,\r\n        city: userData.city\r\n      } as any); \r\n      \r\n      const result = await AuthService.registerUser(userData);\r\n\r\n      expect(mockUserRepository.findByEmail).toHaveBeenCalledWith(userData.email);\r\n      expect(bcrypt.hash).toHaveBeenCalledWith(userData.password, 10);\r\n      expect(mockUserRepository.registerUser).toHaveBeenCalled();\r\n      expect(tokenService.signAccessToken).toHaveBeenCalled();\r\n      expect(tokenService.generateRefreshToken).toHaveBeenCalled();\r\n      expect(tokenService.issueRefreshToken).toHaveBeenCalledWith(\r\n        expect.any(String),\r\n        'mock-refresh-token'\r\n      );\r\n      expect(result).toEqual({\r\n        user: {\r\n          id: mockUser.id,\r\n          email: userData.email,\r\n          firstName: userData.first_name,\r\n          lastName: userData.last_name,\r\n          role: mockUser.role\r\n        },\r\n        accessToken: 'mock-access-token',\r\n        refreshToken: 'mock-refresh-token'\r\n      });\r\n    });\r\n\r\n    it('should throw ConflictError when user already exists', async () => {\r\n      mockUserRepository.findByEmail.mockResolvedValue(mockUser);\r\n\r\n      await expect(AuthService.registerUser(userData))\r\n        .rejects\r\n        .toThrow(ConflictError);\r\n      \r\n      expect(mockUserRepository.findByEmail).toHaveBeenCalledWith(userData.email);\r\n    });\r\n\r\n    it('should throw InternalServerError when failing to retrieve newly created user', async () => {\r\n      mockUserRepository.findByEmail.mockResolvedValue(null); // First call\r\n      mockUserRepository.findByEmail.mockResolvedValue(null); // Second call (after registration)\r\n      mockUserRepository.registerUser.mockResolvedValue({} as any);\r\n\r\n      await expect(AuthService.registerUser(userData))\r\n        .rejects\r\n        .toThrow(InternalServerError);\r\n    });\r\n  });\r\n\r\n  describe('getUserProfile', () => {\r\n    it('should return user profile when user exists', async () => {\r\n      mockUserRepository.findById.mockResolvedValue(mockUser);\r\n\r\n      const result = await AuthService.getUserProfile('user-123');\r\n\r\n      expect(mockUserRepository.findById).toHaveBeenCalledWith('user-123');\r\n      expect(result).toEqual({\r\n        id: mockUser.id,\r\n        email: mockUser.email,\r\n        first_name: mockUser.first_name,\r\n        last_name: mockUser.last_name,\r\n        role: mockUser.role\r\n      });\r\n    });\r\n\r\n    it('should throw NotFoundError when user does not exist', async () => {\r\n      mockUserRepository.findById.mockResolvedValue(null);\r\n\r\n      await expect(AuthService.getUserProfile('nonexistent-user'))\r\n        .rejects\r\n        .toThrow(NotFoundError);\r\n      \r\n      expect(mockUserRepository.findById).toHaveBeenCalledWith('nonexistent-user');\r\n    });\r\n  });\r\n\r\n  describe('refreshUserTokens', () => {\r\n    it('should refresh tokens when valid refresh token is provided', async () => {\r\n      mockRefreshTokenRepository.findValidTokens.mockResolvedValue([mockRefreshTokenRecord]);\r\n      mockUserRepository.findById.mockResolvedValue(mockUser);\r\n\r\n      const result = await AuthService.refreshUserTokens('valid-refresh-token');\r\n\r\n      expect(mockRefreshTokenRepository.findValidTokens).toHaveBeenCalled();\r\n      expect(bcrypt.compare).toHaveBeenCalledWith('valid-refresh-token', mockRefreshTokenRecord.hashedtoken);\r\n      expect(mockUserRepository.findById).toHaveBeenCalledWith(mockRefreshTokenRecord.user_id);\r\n      expect(tokenService.signAccessToken).toHaveBeenCalled();\r\n      expect(tokenService.generateRefreshToken).toHaveBeenCalled();\r\n      expect(tokenService.issueRefreshToken).toHaveBeenCalledWith(mockUser.id, 'mock-refresh-token');\r\n      expect(result).toEqual({\r\n        accessToken: 'mock-access-token',\r\n        refreshToken: 'mock-refresh-token'\r\n      });\r\n    });\r\n\r\n    it('should throw AuthenticationError when refresh token is invalid', async () => {\r\n      mockRefreshTokenRepository.findValidTokens.mockResolvedValue([mockRefreshTokenRecord]);\r\n      (bcrypt.compare as jest.Mock).mockResolvedValue(false);\r\n\r\n      await expect(AuthService.refreshUserTokens('invalid-refresh-token'))\r\n        .rejects\r\n        .toThrow(AuthenticationError);\r\n    });\r\n\r\n    it('should throw AuthenticationError when user for token is not found', async () => {\r\n      mockRefreshTokenRepository.findValidTokens.mockResolvedValue([mockRefreshTokenRecord]);\r\n      mockUserRepository.findById.mockResolvedValue(null);\r\n\r\n      await expect(AuthService.refreshUserTokens('valid-refresh-token'))\r\n        .rejects\r\n        .toThrow(AuthenticationError);\r\n    });\r\n  });\r\n\r\n  describe('logoutUser', () => {\r\n    it('should logout user when valid refresh token is provided', async () => {\r\n      mockRefreshTokenRepository.findValidTokens.mockResolvedValue([mockRefreshTokenRecord]);\r\n      mockRefreshTokenRepository.revokeToken.mockResolvedValue(null);\r\n\r\n      const result = await AuthService.logoutUser('valid-refresh-token');\r\n\r\n      expect(mockRefreshTokenRepository.findValidTokens).toHaveBeenCalled();\r\n      expect(bcrypt.compare).toHaveBeenCalledWith('valid-refresh-token', mockRefreshTokenRecord.hashedtoken);\r\n      expect(mockRefreshTokenRepository.revokeToken).toHaveBeenCalledWith(Number(mockRefreshTokenRecord.id));\r\n      expect(result).toEqual({ message: 'Logout successful' });\r\n    });\r\n\r\n    it('should throw AuthenticationError when refresh token is invalid', async () => {\r\n      mockRefreshTokenRepository.findValidTokens.mockResolvedValue([mockRefreshTokenRecord]);\r\n      (bcrypt.compare as jest.Mock).mockResolvedValue(false);\r\n\r\n      await expect(AuthService.logoutUser('invalid-refresh-token'))\r\n        .rejects\r\n        .toThrow(AuthenticationError);\r\n    });\r\n  });\r\n});"]}